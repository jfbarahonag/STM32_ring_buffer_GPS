
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005628  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a3c  08005a3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a3c  08005a3c  00015a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a44  08005a44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a44  08005a44  00015a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000070  08005abc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08005abc  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123fb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024f0  00000000  00000000  0003249b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  00034990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  00035a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000282bd  00000000  00000000  00036938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d6de  00000000  00000000  0005ebf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f52e7  00000000  00000000  0006c2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001615ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb0  00000000  00000000  00161638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057a0 	.word	0x080057a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080057a0 	.word	0x080057a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
/* INTERRUPT CALLBACKS */
uint8_t rx_data_byte;
uint8_t tx_data_byte;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, &rx_data_byte, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	490a      	ldr	r1, [pc, #40]	; (80005a4 <HAL_UART_RxCpltCallback+0x34>)
 800057c:	480a      	ldr	r0, [pc, #40]	; (80005a8 <HAL_UART_RxCpltCallback+0x38>)
 800057e:	f003 fab9 	bl	8003af4 <HAL_UART_Receive_IT>
	/* Tested OK */
	if (huart->Instance == USART2) {
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a09      	ldr	r2, [pc, #36]	; (80005ac <HAL_UART_RxCpltCallback+0x3c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d106      	bne.n	800059a <HAL_UART_RxCpltCallback+0x2a>
		uart_write(ring_buffer_rx, &rx_data_byte, 1);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_UART_RxCpltCallback+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2201      	movs	r2, #1
 8000592:	4904      	ldr	r1, [pc, #16]	; (80005a4 <HAL_UART_RxCpltCallback+0x34>)
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fddb 	bl	8001150 <uart_write>
	}
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200005dc 	.word	0x200005dc
 80005a8:	2000055c 	.word	0x2000055c
 80005ac:	40004400 	.word	0x40004400
 80005b0:	20000508 	.word	0x20000508

080005b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	}
	*/

}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <HAL_TIM_PeriodElapsedCallback>:
uint16_t time_ms = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	/* Tested OK */
	/* HAL_TIM_Base_start_IT() must be called in main.c */

	if (htim->Instance == TIM2) {
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005d8:	d112      	bne.n	8000600 <HAL_TIM_PeriodElapsedCallback+0x38>
		time_ms++;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005e4:	801a      	strh	r2, [r3, #0]
		if (time_ms >= 1000) {
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ee:	d307      	bcc.n	8000600 <HAL_TIM_PeriodElapsedCallback+0x38>
			time_ms = 0;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005f6:	2120      	movs	r1, #32
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f001 f9c6 	bl	800198c <HAL_GPIO_TogglePin>
		}
	}

}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000008c 	.word	0x2000008c

0800060c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	/* Tested OK */
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fe28 	bl	800127e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f847 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f95b 	bl	80008ec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000636:	f000 f8ab 	bl	8000790 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800063a:	f000 f8f7 	bl	800082c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800063e:	f000 f925 	bl	800088c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_rx = ring_buf_init(comm_rx_buffer, BUFFER_SIZE);
 8000642:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000646:	4817      	ldr	r0, [pc, #92]	; (80006a4 <main+0x80>)
 8000648:	f000 fbcc 	bl	8000de4 <ring_buf_init>
 800064c:	4602      	mov	r2, r0
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <main+0x84>)
 8000650:	601a      	str	r2, [r3, #0]
  ring_buffer_tx = ring_buf_init(comm_tx_buffer, BUFFER_SIZE);
 8000652:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000656:	4815      	ldr	r0, [pc, #84]	; (80006ac <main+0x88>)
 8000658:	f000 fbc4 	bl	8000de4 <ring_buf_init>
 800065c:	4602      	mov	r2, r0
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <main+0x8c>)
 8000660:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 8000662:	4814      	ldr	r0, [pc, #80]	; (80006b4 <main+0x90>)
 8000664:	f002 fd1a 	bl	800309c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data_byte, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	4913      	ldr	r1, [pc, #76]	; (80006b8 <main+0x94>)
 800066c:	4813      	ldr	r0, [pc, #76]	; (80006bc <main+0x98>)
 800066e:	f003 fa41 	bl	8003af4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  size_t size_buf = ring_buf_size(ring_buffer_rx);
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <main+0x84>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fc5c 	bl	8000f34 <ring_buf_size>
 800067c:	6078      	str	r0, [r7, #4]
	  if(size_buf == 3) {
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b03      	cmp	r3, #3
 8000682:	d1f6      	bne.n	8000672 <main+0x4e>
		  uart_read(ring_buffer_rx, comm_tx_buffer, size_buf);
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <main+0x84>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4908      	ldr	r1, [pc, #32]	; (80006ac <main+0x88>)
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fd9b 	bl	80011c8 <uart_read>
			  HAL_UART_Transmit(&huart2, comm_tx_buffer, size_buf, 1000);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	b29a      	uxth	r2, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	4904      	ldr	r1, [pc, #16]	; (80006ac <main+0x88>)
 800069c:	4807      	ldr	r0, [pc, #28]	; (80006bc <main+0x98>)
 800069e:	f003 f995 	bl	80039cc <HAL_UART_Transmit>
  {
 80006a2:	e7e6      	b.n	8000672 <main+0x4e>
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	20000508 	.word	0x20000508
 80006ac:	20000310 	.word	0x20000310
 80006b0:	20000504 	.word	0x20000504
 80006b4:	20000510 	.word	0x20000510
 80006b8:	200005dc 	.word	0x200005dc
 80006bc:	2000055c 	.word	0x2000055c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0b8      	sub	sp, #224	; 0xe0
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ca:	2244      	movs	r2, #68	; 0x44
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 f946 	bl	8004960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2288      	movs	r2, #136	; 0x88
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 f938 	bl	8004960 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006f0:	2310      	movs	r3, #16
 80006f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f9d0 	bl	8001ab8 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800071e:	f000 f93d 	bl	800099c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000728:	2300      	movs	r3, #0
 800072a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000740:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fd9c 	bl	8002284 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000752:	f000 f923 	bl	800099c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000756:	2303      	movs	r3, #3
 8000758:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800075a:	2300      	movs	r3, #0
 800075c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800075e:	2300      	movs	r3, #0
 8000760:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4618      	mov	r0, r3
 8000766:	f001 ff91 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000770:	f000 f914 	bl	800099c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000774:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000778:	f001 f948 	bl	8001a0c <HAL_PWREx_ControlVoltageScaling>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000782:	f000 f90b 	bl	800099c <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	37e0      	adds	r7, #224	; 0xe0
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_TIM2_Init+0x98>)
 80007b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_TIM2_Init+0x98>)
 80007b8:	220f      	movs	r2, #15
 80007ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_TIM2_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_TIM2_Init+0x98>)
 80007c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_TIM2_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_TIM2_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d6:	4814      	ldr	r0, [pc, #80]	; (8000828 <MX_TIM2_Init+0x98>)
 80007d8:	f002 fc08 	bl	8002fec <HAL_TIM_Base_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007e2:	f000 f8db 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_TIM2_Init+0x98>)
 80007f4:	f002 fde1 	bl	80033ba <HAL_TIM_ConfigClockSource>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007fe:	f000 f8cd 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_TIM2_Init+0x98>)
 8000810:	f002 ffe8 	bl	80037e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800081a:	f000 f8bf 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000510 	.word	0x20000510

0800082c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <MX_USART1_UART_Init+0x5c>)
 8000834:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART1_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART1_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART1_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART1_UART_Init+0x58>)
 8000870:	f003 f85e 	bl	8003930 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f88f 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000290 	.word	0x20000290
 8000888:	40013800 	.word	0x40013800

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_USART2_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008d0:	f003 f82e 	bl	8003930 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f85f 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000055c 	.word	0x2000055c
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_GPIO_Init+0xa4>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a22      	ldr	r2, [pc, #136]	; (8000990 <MX_GPIO_Init+0xa4>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_GPIO_Init+0xa4>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_GPIO_Init+0xa4>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <MX_GPIO_Init+0xa4>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_GPIO_Init+0xa4>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2120      	movs	r1, #32
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f001 f80f 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800093e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_GPIO_Init+0xa8>)
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	4811      	ldr	r0, [pc, #68]	; (8000998 <MX_GPIO_Init+0xac>)
 8000954:	f000 fe5a 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000958:	2320      	movs	r3, #32
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4619      	mov	r1, r3
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f000 fe4b 	bl	800160c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2028      	movs	r0, #40	; 0x28
 800097c:	f000 fdcf 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000980:	2028      	movs	r0, #40	; 0x28
 8000982:	f000 fde8 	bl	8001556 <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	10210000 	.word	0x10210000
 8000998:	48000800 	.word	0x48000800

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_MspInit+0x44>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6613      	str	r3, [r2, #96]	; 0x60
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x44>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6593      	str	r3, [r2, #88]	; 0x58
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a04:	d113      	bne.n	8000a2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_TIM_Base_MspInit+0x44>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <HAL_TIM_Base_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6593      	str	r3, [r2, #88]	; 0x58
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_TIM_Base_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	201c      	movs	r0, #28
 8000a24:	f000 fd7b 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a28:	201c      	movs	r0, #28
 8000a2a:	f000 fd94 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a37      	ldr	r2, [pc, #220]	; (8000b38 <HAL_UART_MspInit+0xfc>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d132      	bne.n	8000ac4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5e:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	4a36      	ldr	r2, [pc, #216]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6a:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a30      	ldr	r2, [pc, #192]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1_TX_Pin|U1_RX_Pin;
 8000a8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f000 fdad 	bl	800160c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2025      	movs	r0, #37	; 0x25
 8000ab8:	f000 fd31 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000abc:	2025      	movs	r0, #37	; 0x25
 8000abe:	f000 fd4a 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac2:	e035      	b.n	8000b30 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <HAL_UART_MspInit+0x104>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d130      	bne.n	8000b30 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_UART_MspInit+0x100>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U2_TX_Pin|U2_RX_Pin;
 8000afe:	230c      	movs	r3, #12
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f000 fd76 	bl	800160c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2026      	movs	r0, #38	; 0x26
 8000b26:	f000 fcfa 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b2a:	2026      	movs	r0, #38	; 0x26
 8000b2c:	f000 fd13 	bl	8001556 <HAL_NVIC_EnableIRQ>
}
 8000b30:	bf00      	nop
 8000b32:	3730      	adds	r7, #48	; 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40013800 	.word	0x40013800
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40004400 	.word	0x40004400

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 fbc6 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <TIM2_IRQHandler+0x10>)
 8000ba6:	f002 fae9 	bl	800317c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000510 	.word	0x20000510

08000bb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <USART1_IRQHandler+0x10>)
 8000bba:	f003 f82d 	bl	8003c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000290 	.word	0x20000290

08000bc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <USART2_IRQHandler+0x10>)
 8000bce:	f003 f823 	bl	8003c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000055c 	.word	0x2000055c

08000bdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000be0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000be4:	f000 feec 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
	return 1;
 8000bf0:	2301      	movs	r3, #1
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <_kill>:

int _kill(int pid, int sig)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c06:	f003 fe67 	bl	80048d8 <__errno>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	2316      	movs	r3, #22
 8000c0e:	6013      	str	r3, [r2, #0]
	return -1;
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <_exit>:

void _exit (int status)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ffe7 	bl	8000bfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c2e:	e7fe      	b.n	8000c2e <_exit+0x12>

08000c30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e00a      	b.n	8000c58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c42:	f3af 8000 	nop.w
 8000c46:	4601      	mov	r1, r0
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	60ba      	str	r2, [r7, #8]
 8000c4e:	b2ca      	uxtb	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf0      	blt.n	8000c42 <_read+0x12>
	}

return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	e009      	b.n	8000c90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	60ba      	str	r2, [r7, #8]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbf1      	blt.n	8000c7c <_write+0x12>
	}
	return len;
 8000c98:	687b      	ldr	r3, [r7, #4]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <_close>:

int _close(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	return -1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cca:	605a      	str	r2, [r3, #4]
	return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_isatty>:

int _isatty(int file)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
	return 0;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f003 fdcc 	bl	80048d8 <__errno>
 8000d40:	4602      	mov	r2, r0
 8000d42:	230c      	movs	r3, #12
 8000d44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20018000 	.word	0x20018000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	20000090 	.word	0x20000090
 8000d74:	200005e8 	.word	0x200005e8

08000d78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <SystemInit+0x64>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <SystemInit+0x64>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <SystemInit+0x68>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <SystemInit+0x68>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <SystemInit+0x68>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <SystemInit+0x68>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <SystemInit+0x68>)
 8000da4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000da8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000dac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <SystemInit+0x68>)
 8000db0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000db4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <SystemInit+0x68>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <SystemInit+0x68>)
 8000dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <SystemInit+0x68>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SystemInit+0x64>)
 8000dca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dce:	609a      	str	r2, [r3, #8]
#endif
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	40021000 	.word	0x40021000

08000de4 <ring_buf_init>:
	size_t max; //of the buffer
	bool full;
};

cbuf_handle_t ring_buf_init(uint8_t* buffer, size_t size)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
	assert(buffer && size);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <ring_buf_init+0x16>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d105      	bne.n	8000e06 <ring_buf_init+0x22>
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <ring_buf_init+0x74>)
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <ring_buf_init+0x78>)
 8000dfe:	2116      	movs	r1, #22
 8000e00:	4817      	ldr	r0, [pc, #92]	; (8000e60 <ring_buf_init+0x7c>)
 8000e02:	f003 fd4b 	bl	800489c <__assert_func>

	cbuf_handle_t cbuf = malloc(sizeof(ring_buf_t));
 8000e06:	2014      	movs	r0, #20
 8000e08:	f003 fda2 	bl	8004950 <malloc>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60fb      	str	r3, [r7, #12]
	assert(cbuf);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d105      	bne.n	8000e22 <ring_buf_init+0x3e>
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <ring_buf_init+0x80>)
 8000e18:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <ring_buf_init+0x78>)
 8000e1a:	2119      	movs	r1, #25
 8000e1c:	4810      	ldr	r0, [pc, #64]	; (8000e60 <ring_buf_init+0x7c>)
 8000e1e:	f003 fd3d 	bl	800489c <__assert_func>

	cbuf->buffer = buffer;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
	cbuf->max = size;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	60da      	str	r2, [r3, #12]
	ring_buf_reset(cbuf);
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f000 f81c 	bl	8000e6c <ring_buf_reset>

	assert(ring_buf_empty(cbuf));
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f000 f853 	bl	8000ee0 <ring_buf_empty>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d105      	bne.n	8000e4c <ring_buf_init+0x68>
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <ring_buf_init+0x84>)
 8000e42:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <ring_buf_init+0x78>)
 8000e44:	211f      	movs	r1, #31
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <ring_buf_init+0x7c>)
 8000e48:	f003 fd28 	bl	800489c <__assert_func>

	return cbuf;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	080057b8 	.word	0x080057b8
 8000e5c:	080058c0 	.word	0x080058c0
 8000e60:	080057c8 	.word	0x080057c8
 8000e64:	080057e8 	.word	0x080057e8
 8000e68:	080057f0 	.word	0x080057f0

08000e6c <ring_buf_reset>:

void ring_buf_reset(cbuf_handle_t cbuf)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    assert(cbuf);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d105      	bne.n	8000e86 <ring_buf_reset+0x1a>
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <ring_buf_reset+0x34>)
 8000e7c:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <ring_buf_reset+0x38>)
 8000e7e:	2126      	movs	r1, #38	; 0x26
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <ring_buf_reset+0x3c>)
 8000e82:	f003 fd0b 	bl	800489c <__assert_func>

    cbuf->head = 0;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
    cbuf->tail = 0;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
    cbuf->full = false;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	741a      	strb	r2, [r3, #16]
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	080057e8 	.word	0x080057e8
 8000ea4:	080058d0 	.word	0x080058d0
 8000ea8:	080057c8 	.word	0x080057c8

08000eac <ring_buf_full>:
	assert(cbuf);
	free(cbuf);
}

bool ring_buf_full(cbuf_handle_t cbuf)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d105      	bne.n	8000ec6 <ring_buf_full+0x1a>
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <ring_buf_full+0x28>)
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <ring_buf_full+0x2c>)
 8000ebe:	2135      	movs	r1, #53	; 0x35
 8000ec0:	4806      	ldr	r0, [pc, #24]	; (8000edc <ring_buf_full+0x30>)
 8000ec2:	f003 fceb 	bl	800489c <__assert_func>

    return cbuf->full;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7c1b      	ldrb	r3, [r3, #16]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	080057e8 	.word	0x080057e8
 8000ed8:	080058e0 	.word	0x080058e0
 8000edc:	080057c8 	.word	0x080057c8

08000ee0 <ring_buf_empty>:

bool ring_buf_empty(cbuf_handle_t cbuf)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d105      	bne.n	8000efa <ring_buf_empty+0x1a>
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <ring_buf_empty+0x48>)
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <ring_buf_empty+0x4c>)
 8000ef2:	213c      	movs	r1, #60	; 0x3c
 8000ef4:	480e      	ldr	r0, [pc, #56]	; (8000f30 <ring_buf_empty+0x50>)
 8000ef6:	f003 fcd1 	bl	800489c <__assert_func>

    return (!cbuf->full && (cbuf->head == cbuf->tail));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7c1b      	ldrb	r3, [r3, #16]
 8000efe:	f083 0301 	eor.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d007      	beq.n	8000f18 <ring_buf_empty+0x38>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d101      	bne.n	8000f18 <ring_buf_empty+0x38>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <ring_buf_empty+0x3a>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	080057e8 	.word	0x080057e8
 8000f2c:	080058f0 	.word	0x080058f0
 8000f30:	080057c8 	.word	0x080057c8

08000f34 <ring_buf_size>:

	return cbuf->max;
}

size_t ring_buf_size(cbuf_handle_t cbuf)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d105      	bne.n	8000f4e <ring_buf_size+0x1a>
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <ring_buf_size+0x64>)
 8000f44:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <ring_buf_size+0x68>)
 8000f46:	214a      	movs	r1, #74	; 0x4a
 8000f48:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <ring_buf_size+0x6c>)
 8000f4a:	f003 fca7 	bl	800489c <__assert_func>

	size_t size = cbuf->max;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	60fb      	str	r3, [r7, #12]

	if(!cbuf->full)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7c1b      	ldrb	r3, [r3, #16]
 8000f58:	f083 0301 	eor.w	r3, r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d015      	beq.n	8000f8e <ring_buf_size+0x5a>
	{
		if(cbuf->head >= cbuf->tail)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d306      	bcc.n	8000f7c <ring_buf_size+0x48>
		{
			size = (cbuf->head - cbuf->tail);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	e008      	b.n	8000f8e <ring_buf_size+0x5a>
		}
		else
		{
			size = (cbuf->max + cbuf->head - cbuf->tail);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	441a      	add	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	60fb      	str	r3, [r7, #12]
		}
	}

	return size;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	080057e8 	.word	0x080057e8
 8000f9c:	08005900 	.word	0x08005900
 8000fa0:	080057c8 	.word	0x080057c8

08000fa4 <advance_pointer>:

static void advance_pointer(cbuf_handle_t cbuf)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d105      	bne.n	8000fbe <advance_pointer+0x1a>
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <advance_pointer+0x70>)
 8000fb4:	4a18      	ldr	r2, [pc, #96]	; (8001018 <advance_pointer+0x74>)
 8000fb6:	215f      	movs	r1, #95	; 0x5f
 8000fb8:	4818      	ldr	r0, [pc, #96]	; (800101c <advance_pointer+0x78>)
 8000fba:	f003 fc6f 	bl	800489c <__assert_func>

	if(cbuf->full)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7c1b      	ldrb	r3, [r3, #16]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <advance_pointer+0x3a>
   	{
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68d2      	ldr	r2, [r2, #12]
 8000fd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fd4:	fb02 f201 	mul.w	r2, r2, r1
 8000fd8:	1a9a      	subs	r2, r3, r2
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
	}

	cbuf->head = (cbuf->head + 1) % cbuf->max;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68d2      	ldr	r2, [r2, #12]
 8000fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fec:	fb02 f201 	mul.w	r2, r2, r1
 8000ff0:	1a9a      	subs	r2, r3, r2
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	605a      	str	r2, [r3, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	bf0c      	ite	eq
 8001002:	2301      	moveq	r3, #1
 8001004:	2300      	movne	r3, #0
 8001006:	b2da      	uxtb	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	741a      	strb	r2, [r3, #16]
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	080057e8 	.word	0x080057e8
 8001018:	08005910 	.word	0x08005910
 800101c:	080057c8 	.word	0x080057c8

08001020 <retreat_pointer>:

static void retreat_pointer(cbuf_handle_t cbuf)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d105      	bne.n	800103a <retreat_pointer+0x1a>
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <retreat_pointer+0x40>)
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <retreat_pointer+0x44>)
 8001032:	216c      	movs	r1, #108	; 0x6c
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <retreat_pointer+0x48>)
 8001036:	f003 fc31 	bl	800489c <__assert_func>

	cbuf->full = false;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	741a      	strb	r2, [r3, #16]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	3301      	adds	r3, #1
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68d2      	ldr	r2, [r2, #12]
 800104a:	fbb3 f1f2 	udiv	r1, r3, r2
 800104e:	fb02 f201 	mul.w	r2, r2, r1
 8001052:	1a9a      	subs	r2, r3, r2
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	609a      	str	r2, [r3, #8]
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	080057e8 	.word	0x080057e8
 8001064:	08005920 	.word	0x08005920
 8001068:	080057c8 	.word	0x080057c8

0800106c <ring_buf_put>:

void ring_buf_put(cbuf_handle_t cbuf, uint8_t data)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
	assert(cbuf && cbuf->buffer);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <ring_buf_put+0x1a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d105      	bne.n	8001092 <ring_buf_put+0x26>
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <ring_buf_put+0x44>)
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <ring_buf_put+0x48>)
 800108a:	2174      	movs	r1, #116	; 0x74
 800108c:	480a      	ldr	r0, [pc, #40]	; (80010b8 <ring_buf_put+0x4c>)
 800108e:	f003 fc05 	bl	800489c <__assert_func>

    cbuf->buffer[cbuf->head] = data;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4413      	add	r3, r2
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	701a      	strb	r2, [r3, #0]

    advance_pointer(cbuf);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff7f 	bl	8000fa4 <advance_pointer>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	08005808 	.word	0x08005808
 80010b4:	08005930 	.word	0x08005930
 80010b8:	080057c8 	.word	0x080057c8

080010bc <ring_buf_get>:

int ring_buf_get(cbuf_handle_t cbuf, uint8_t * data)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
    assert(cbuf && data && cbuf->buffer);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <ring_buf_get+0x1e>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <ring_buf_get+0x1e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d105      	bne.n	80010e6 <ring_buf_get+0x2a>
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <ring_buf_get+0x68>)
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <ring_buf_get+0x6c>)
 80010de:	217d      	movs	r1, #125	; 0x7d
 80010e0:	4812      	ldr	r0, [pc, #72]	; (800112c <ring_buf_get+0x70>)
 80010e2:	f003 fbdb 	bl	800489c <__assert_func>

    int r = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]

    if(!ring_buf_empty(cbuf))
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fef8 	bl	8000ee0 <ring_buf_empty>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00d      	beq.n	8001118 <ring_buf_get+0x5c>
    {
        *data = cbuf->buffer[cbuf->tail];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	4413      	add	r3, r2
 8001106:	781a      	ldrb	r2, [r3, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	701a      	strb	r2, [r3, #0]
        retreat_pointer(cbuf);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff87 	bl	8001020 <retreat_pointer>

        r = -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	60fb      	str	r3, [r7, #12]
    }

    return r;
 8001118:	68fb      	ldr	r3, [r7, #12]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	08005820 	.word	0x08005820
 8001128:	08005940 	.word	0x08005940
 800112c:	080057c8 	.word	0x080057c8

08001130 <ring_buf_free_space>:

size_t ring_buf_free_space(cbuf_handle_t cbuf)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	return cbuf->max - ring_buf_size(cbuf);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68dc      	ldr	r4, [r3, #12]
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fef9 	bl	8000f34 <ring_buf_size>
 8001142:	4603      	mov	r3, r0
 8001144:	1ae3      	subs	r3, r4, r3
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
	...

08001150 <uart_write>:
 *      Author: felipebg
 */
#include "uart/uart_driver.h"

uint8_t uart_write(cbuf_handle_t cbuf, uint8_t *data, size_t data_len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
	assert(cbuf);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d105      	bne.n	800116e <uart_write+0x1e>
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <uart_write+0x6c>)
 8001164:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <uart_write+0x70>)
 8001166:	210b      	movs	r1, #11
 8001168:	4816      	ldr	r0, [pc, #88]	; (80011c4 <uart_write+0x74>)
 800116a:	f003 fb97 	bl	800489c <__assert_func>

	if(ring_buf_full(cbuf))
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f7ff fe9c 	bl	8000eac <ring_buf_full>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <uart_write+0x2e>
	{
		return 1;
 800117a:	2301      	movs	r3, #1
 800117c:	e01a      	b.n	80011b4 <uart_write+0x64>
	}

	if(ring_buf_free_space(cbuf) < data_len)
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff ffd6 	bl	8001130 <ring_buf_free_space>
 8001184:	4602      	mov	r2, r0
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4293      	cmp	r3, r2
 800118a:	d901      	bls.n	8001190 <uart_write+0x40>
	{
		return 2;
 800118c:	2302      	movs	r3, #2
 800118e:	e011      	b.n	80011b4 <uart_write+0x64>
	}

	size_t data_counter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

	while (data_counter < data_len)
 8001194:	e009      	b.n	80011aa <uart_write+0x5a>
	{
		ring_buf_put(cbuf, data[data_counter++]);
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	617a      	str	r2, [r7, #20]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff ff61 	bl	800106c <ring_buf_put>
	while (data_counter < data_len)
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d3f1      	bcc.n	8001196 <uart_write+0x46>
	}

	return 0;
 80011b2:	2300      	movs	r3, #0

}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	08005840 	.word	0x08005840
 80011c0:	08005950 	.word	0x08005950
 80011c4:	08005848 	.word	0x08005848

080011c8 <uart_read>:

uint8_t uart_read(cbuf_handle_t cbuf, uint8_t *data, size_t data_len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	assert(cbuf && data);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <uart_read+0x18>
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <uart_read+0x24>
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <uart_read+0x58>)
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <uart_read+0x5c>)
 80011e4:	2124      	movs	r1, #36	; 0x24
 80011e6:	4810      	ldr	r0, [pc, #64]	; (8001228 <uart_read+0x60>)
 80011e8:	f003 fb58 	bl	800489c <__assert_func>

	size_t data_counter = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

	while (data_counter < data_len)
 80011f0:	e00d      	b.n	800120e <uart_read+0x46>
	{
		if (!ring_buf_get(cbuf, &data[data_counter++]))
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	617a      	str	r2, [r7, #20]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	4413      	add	r3, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff ff5c 	bl	80010bc <ring_buf_get>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <uart_read+0x46>
		{
			return 0;
 800120a:	2300      	movs	r3, #0
 800120c:	e004      	b.n	8001218 <uart_read+0x50>
	while (data_counter < data_len)
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	429a      	cmp	r2, r3
 8001214:	d3ed      	bcc.n	80011f2 <uart_read+0x2a>
		}
	}

	return 1;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	08005868 	.word	0x08005868
 8001224:	0800595c 	.word	0x0800595c
 8001228:	08005848 	.word	0x08005848

0800122c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001230:	f7ff fda2 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001234:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001236:	e003      	b.n	8001240 <LoopCopyDataInit>

08001238 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800123a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800123c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800123e:	3104      	adds	r1, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001240:	480a      	ldr	r0, [pc, #40]	; (800126c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001244:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001246:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001248:	d3f6      	bcc.n	8001238 <CopyDataInit>
	ldr	r2, =_sbss
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <LoopForever+0x12>)
	b	LoopFillZerobss
 800124c:	e002      	b.n	8001254 <LoopFillZerobss>

0800124e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800124e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001250:	f842 3b04 	str.w	r3, [r2], #4

08001254 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <LoopForever+0x16>)
	cmp	r2, r3
 8001256:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001258:	d3f9      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125a:	f003 fb55 	bl	8004908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800125e:	f7ff f9e1 	bl	8000624 <main>

08001262 <LoopForever>:

LoopForever:
    b LoopForever
 8001262:	e7fe      	b.n	8001262 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001264:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001268:	08005a4c 	.word	0x08005a4c
	ldr	r0, =_sdata
 800126c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001270:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001274:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001278:	200005e8 	.word	0x200005e8

0800127c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC1_2_IRQHandler>

0800127e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f93d 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f80e 	bl	80012b0 <HAL_InitTick>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	e001      	b.n	80012a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a0:	f7ff fb84 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012a4:	79fb      	ldrb	r3, [r7, #7]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_InitTick+0x6c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d023      	beq.n	800130c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_InitTick+0x70>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_InitTick+0x6c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f949 	bl	8001572 <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10f      	bne.n	8001306 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d809      	bhi.n	8001300 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f000 f913 	bl	800151e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_InitTick+0x74>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e007      	b.n	8001310 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e004      	b.n	8001310 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e001      	b.n	8001310 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000008 	.word	0x20000008
 800134c:	200005e0 	.word	0x200005e0

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200005e0 	.word	0x200005e0

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	; (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff29 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff3e 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff31 	bl	80013cc <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d005      	beq.n	80015ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2204      	movs	r2, #4
 80015a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e029      	b.n	8001602 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 020e 	bic.w	r2, r2, #14
 80015bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f003 021c 	and.w	r2, r3, #28
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
    }
  }
  return status;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	e17f      	b.n	800191c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8171 	beq.w	8001916 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d00b      	beq.n	8001654 <HAL_GPIO_Init+0x48>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d007      	beq.n	8001654 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001648:	2b11      	cmp	r3, #17
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b12      	cmp	r3, #18
 8001652:	d130      	bne.n	80016b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800168a:	2201      	movs	r2, #1
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f003 0201 	and.w	r2, r3, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d118      	bne.n	80016f4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016c8:	2201      	movs	r2, #1
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	f003 0201 	and.w	r2, r3, #1
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x128>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b12      	cmp	r3, #18
 8001732:	d123      	bne.n	800177c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	08da      	lsrs	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3208      	adds	r2, #8
 8001776:	6939      	ldr	r1, [r7, #16]
 8001778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0203 	and.w	r2, r3, #3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80ac 	beq.w	8001916 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <HAL_GPIO_Init+0x32c>)
 80017c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c2:	4a5d      	ldr	r2, [pc, #372]	; (8001938 <HAL_GPIO_Init+0x32c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ca:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <HAL_GPIO_Init+0x32c>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017d6:	4a59      	ldr	r2, [pc, #356]	; (800193c <HAL_GPIO_Init+0x330>)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001800:	d025      	beq.n	800184e <HAL_GPIO_Init+0x242>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4e      	ldr	r2, [pc, #312]	; (8001940 <HAL_GPIO_Init+0x334>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01f      	beq.n	800184a <HAL_GPIO_Init+0x23e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <HAL_GPIO_Init+0x338>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d019      	beq.n	8001846 <HAL_GPIO_Init+0x23a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <HAL_GPIO_Init+0x33c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <HAL_GPIO_Init+0x236>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4b      	ldr	r2, [pc, #300]	; (800194c <HAL_GPIO_Init+0x340>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00d      	beq.n	800183e <HAL_GPIO_Init+0x232>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4a      	ldr	r2, [pc, #296]	; (8001950 <HAL_GPIO_Init+0x344>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d007      	beq.n	800183a <HAL_GPIO_Init+0x22e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a49      	ldr	r2, [pc, #292]	; (8001954 <HAL_GPIO_Init+0x348>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_GPIO_Init+0x22a>
 8001832:	2306      	movs	r3, #6
 8001834:	e00c      	b.n	8001850 <HAL_GPIO_Init+0x244>
 8001836:	2307      	movs	r3, #7
 8001838:	e00a      	b.n	8001850 <HAL_GPIO_Init+0x244>
 800183a:	2305      	movs	r3, #5
 800183c:	e008      	b.n	8001850 <HAL_GPIO_Init+0x244>
 800183e:	2304      	movs	r3, #4
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x244>
 8001842:	2303      	movs	r3, #3
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x244>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x244>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x244>
 800184e:	2300      	movs	r3, #0
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001860:	4936      	ldr	r1, [pc, #216]	; (800193c <HAL_GPIO_Init+0x330>)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <HAL_GPIO_Init+0x34c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001892:	4a31      	ldr	r2, [pc, #196]	; (8001958 <HAL_GPIO_Init+0x34c>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_GPIO_Init+0x34c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018bc:	4a26      	ldr	r2, [pc, #152]	; (8001958 <HAL_GPIO_Init+0x34c>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_GPIO_Init+0x34c>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <HAL_GPIO_Init+0x34c>)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_GPIO_Init+0x34c>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_GPIO_Init+0x34c>)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa22 f303 	lsr.w	r3, r2, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	f47f ae78 	bne.w	800161c <HAL_GPIO_Init+0x10>
  }
}
 800192c:	bf00      	nop
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000
 8001940:	48000400 	.word	0x48000400
 8001944:	48000800 	.word	0x48000800
 8001948:	48000c00 	.word	0x48000c00
 800194c:	48001000 	.word	0x48001000
 8001950:	48001400 	.word	0x48001400
 8001954:	48001800 	.word	0x48001800
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001978:	e002      	b.n	8001980 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43d9      	mvns	r1, r3
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	400b      	ands	r3, r1
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fe14 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40007000 	.word	0x40007000

08001a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1a:	d130      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a28:	d038      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2232      	movs	r2, #50	; 0x32
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9b      	lsrs	r3, r3, #18
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a50:	e002      	b.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d102      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f2      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a78:	d110      	bne.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e00f      	b.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d007      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e3d4      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aca:	4ba1      	ldr	r3, [pc, #644]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad4:	4b9e      	ldr	r3, [pc, #632]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80e4 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4a>
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	f040 808b 	bne.w	8001c10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	f040 8087 	bne.w	8001c10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b02:	4b93      	ldr	r3, [pc, #588]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x62>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e3ac      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1a      	ldr	r2, [r3, #32]
 8001b1e:	4b8c      	ldr	r3, [pc, #560]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_RCC_OscConfig+0x7c>
 8001b2a:	4b89      	ldr	r3, [pc, #548]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b32:	e005      	b.n	8001b40 <HAL_RCC_OscConfig+0x88>
 8001b34:	4b86      	ldr	r3, [pc, #536]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d223      	bcs.n	8001b8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fd3f 	bl	80025cc <RCC_SetFlashLatencyFromMSIRange>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e38d      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b58:	4b7d      	ldr	r3, [pc, #500]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a7c      	ldr	r2, [pc, #496]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b7a      	ldr	r3, [pc, #488]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4977      	ldr	r1, [pc, #476]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	4972      	ldr	r1, [pc, #456]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
 8001b8a:	e025      	b.n	8001bd8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8c:	4b70      	ldr	r3, [pc, #448]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6f      	ldr	r2, [pc, #444]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	496a      	ldr	r1, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001baa:	4b69      	ldr	r3, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	4965      	ldr	r1, [pc, #404]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 fcff 	bl	80025cc <RCC_SetFlashLatencyFromMSIRange>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e34d      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd8:	f000 fc36 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8001bdc:	4601      	mov	r1, r0
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	4a5a      	ldr	r2, [pc, #360]	; (8001d54 <HAL_RCC_OscConfig+0x29c>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	fa21 f303 	lsr.w	r3, r1, r3
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_RCC_OscConfig+0x2a0>)
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf8:	4b58      	ldr	r3, [pc, #352]	; (8001d5c <HAL_RCC_OscConfig+0x2a4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fb57 	bl	80012b0 <HAL_InitTick>
 8001c02:	4603      	mov	r3, r0
 8001c04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d052      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	e331      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d032      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c18:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fb94 	bl	8001350 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fb90 	bl	8001350 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e31a      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a40      	ldr	r2, [pc, #256]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	493b      	ldr	r1, [pc, #236]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c68:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	4936      	ldr	r1, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
 8001c7c:	e01a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a33      	ldr	r2, [pc, #204]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fb61 	bl	8001350 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c92:	f7ff fb5d 	bl	8001350 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e2e7      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x1da>
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d074      	beq.n	8001daa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x21a>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d10e      	bne.n	8001cea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d064      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d160      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e2c4      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x24a>
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e01d      	b.n	8001d3e <HAL_RCC_OscConfig+0x286>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0a:	d10c      	bne.n	8001d26 <HAL_RCC_OscConfig+0x26e>
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e00b      	b.n	8001d3e <HAL_RCC_OscConfig+0x286>
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x298>)
 8001d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d01c      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff fb03 	bl	8001350 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4c:	e011      	b.n	8001d72 <HAL_RCC_OscConfig+0x2ba>
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08005878 	.word	0x08005878
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff faf6 	bl	8001350 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e280      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d72:	4baf      	ldr	r3, [pc, #700]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2a8>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff fae6 	bl	8001350 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff fae2 	bl	8001350 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e26c      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9a:	4ba5      	ldr	r3, [pc, #660]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x2d0>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d060      	beq.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x310>
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d119      	bne.n	8001df6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d116      	bne.n	8001df6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc8:	4b99      	ldr	r3, [pc, #612]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_OscConfig+0x328>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e249      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b93      	ldr	r3, [pc, #588]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	4990      	ldr	r1, [pc, #576]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	e040      	b.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d023      	beq.n	8001e46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfe:	4b8c      	ldr	r3, [pc, #560]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a8b      	ldr	r2, [pc, #556]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7ff faa1 	bl	8001350 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	f7ff fa9d 	bl	8001350 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e227      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e24:	4b82      	ldr	r3, [pc, #520]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b7f      	ldr	r3, [pc, #508]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	497c      	ldr	r1, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
 8001e44:	e018      	b.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a79      	ldr	r2, [pc, #484]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7ff fa7d 	bl	8001350 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fa79 	bl	8001350 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e203      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e6c:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d03c      	beq.n	8001efe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8c:	4b68      	ldr	r3, [pc, #416]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e92:	4a67      	ldr	r2, [pc, #412]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fa58 	bl	8001350 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fa54 	bl	8001350 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1de      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb6:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ef      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x3ec>
 8001ec4:	e01b      	b.n	8001efe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec6:	4b5a      	ldr	r3, [pc, #360]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ecc:	4a58      	ldr	r2, [pc, #352]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001ece:	f023 0301 	bic.w	r3, r3, #1
 8001ed2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fa3b 	bl	8001350 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ede:	f7ff fa37 	bl	8001350 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1c1      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef0:	4b4f      	ldr	r3, [pc, #316]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ef      	bne.n	8001ede <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80a6 	beq.w	8002058 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f10:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	4b44      	ldr	r3, [pc, #272]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	4a43      	ldr	r2, [pc, #268]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	6593      	str	r3, [r2, #88]	; 0x58
 8001f28:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f38:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <HAL_RCC_OscConfig+0x57c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d118      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f44:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_RCC_OscConfig+0x57c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a3a      	ldr	r2, [pc, #232]	; (8002034 <HAL_RCC_OscConfig+0x57c>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f50:	f7ff f9fe 	bl	8001350 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7ff f9fa 	bl	8001350 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e184      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6a:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_RCC_OscConfig+0x57c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d108      	bne.n	8001f90 <HAL_RCC_OscConfig+0x4d8>
 8001f7e:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f84:	4a2a      	ldr	r2, [pc, #168]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8e:	e024      	b.n	8001fda <HAL_RCC_OscConfig+0x522>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d110      	bne.n	8001fba <HAL_RCC_OscConfig+0x502>
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	4a24      	ldr	r2, [pc, #144]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	4a20      	ldr	r2, [pc, #128]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb8:	e00f      	b.n	8001fda <HAL_RCC_OscConfig+0x522>
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fca:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	4a17      	ldr	r2, [pc, #92]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8001fd2:	f023 0304 	bic.w	r3, r3, #4
 8001fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f9b5 	bl	8001350 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff f9b1 	bl	8001350 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e139      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_OscConfig+0x578>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0ed      	beq.n	8001fea <HAL_RCC_OscConfig+0x532>
 800200e:	e01a      	b.n	8002046 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002010:	f7ff f99e 	bl	8001350 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002016:	e00f      	b.n	8002038 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002018:	f7ff f99a 	bl	8001350 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d906      	bls.n	8002038 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e122      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002038:	4b90      	ldr	r3, [pc, #576]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1e8      	bne.n	8002018 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002046:	7ffb      	ldrb	r3, [r7, #31]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204c:	4b8b      	ldr	r3, [pc, #556]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	4a8a      	ldr	r2, [pc, #552]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002056:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8108 	beq.w	8002272 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	2b02      	cmp	r3, #2
 8002068:	f040 80d0 	bne.w	800220c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800206c:	4b83      	ldr	r3, [pc, #524]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	429a      	cmp	r2, r3
 800207e:	d130      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	3b01      	subs	r3, #1
 800208c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d127      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d11f      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020ac:	2a07      	cmp	r2, #7
 80020ae:	bf14      	ite	ne
 80020b0:	2201      	movne	r2, #1
 80020b2:	2200      	moveq	r2, #0
 80020b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d113      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	3b01      	subs	r3, #1
 80020c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	3b01      	subs	r3, #1
 80020dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d06e      	beq.n	80021c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d069      	beq.n	80021bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020e8:	4b64      	ldr	r3, [pc, #400]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020f4:	4b61      	ldr	r3, [pc, #388]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0b7      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002104:	4b5d      	ldr	r3, [pc, #372]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a5c      	ldr	r2, [pc, #368]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800210a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002110:	f7ff f91e 	bl	8001350 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff f91a 	bl	8001350 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e0a4      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212a:	4b54      	ldr	r3, [pc, #336]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002136:	4b51      	ldr	r3, [pc, #324]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	4b51      	ldr	r3, [pc, #324]	; (8002280 <HAL_RCC_OscConfig+0x7c8>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002146:	3a01      	subs	r2, #1
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002150:	0212      	lsls	r2, r2, #8
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002158:	0852      	lsrs	r2, r2, #1
 800215a:	3a01      	subs	r2, #1
 800215c:	0552      	lsls	r2, r2, #21
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002164:	0852      	lsrs	r2, r2, #1
 8002166:	3a01      	subs	r2, #1
 8002168:	0652      	lsls	r2, r2, #25
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002170:	0912      	lsrs	r2, r2, #4
 8002172:	0452      	lsls	r2, r2, #17
 8002174:	430a      	orrs	r2, r1
 8002176:	4941      	ldr	r1, [pc, #260]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002178:	4313      	orrs	r3, r2
 800217a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a3e      	ldr	r2, [pc, #248]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002188:	4b3c      	ldr	r3, [pc, #240]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a3b      	ldr	r2, [pc, #236]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002194:	f7ff f8dc 	bl	8001350 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff f8d8 	bl	8001350 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e062      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	4b33      	ldr	r3, [pc, #204]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ba:	e05a      	b.n	8002272 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e059      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c0:	4b2e      	ldr	r3, [pc, #184]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d152      	bne.n	8002272 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2a      	ldr	r2, [pc, #168]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 80021de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021e4:	f7ff f8b4 	bl	8001350 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7ff f8b0 	bl	8001350 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e03a      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fe:	4b1f      	ldr	r3, [pc, #124]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x734>
 800220a:	e032      	b.n	8002272 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d02d      	beq.n	800226e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002218:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800221c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	4a13      	ldr	r2, [pc, #76]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002230:	f023 0303 	bic.w	r3, r3, #3
 8002234:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 800223c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7ff f883 	bl	8001350 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7ff f87f 	bl	8001350 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e009      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_OscConfig+0x7c4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x796>
 800226c:	e001      	b.n	8002272 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	f99d808c 	.word	0xf99d808c

08002284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0c8      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002298:	4b66      	ldr	r3, [pc, #408]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d910      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 0207 	bic.w	r2, r3, #7
 80022ae:	4961      	ldr	r1, [pc, #388]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b0      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d04c      	beq.n	800236e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d107      	bne.n	80022ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022dc:	4b56      	ldr	r3, [pc, #344]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d121      	bne.n	800232c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e09e      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f4:	4b50      	ldr	r3, [pc, #320]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d115      	bne.n	800232c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e092      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d107      	bne.n	800231c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800230c:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e086      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800231c:	4b46      	ldr	r3, [pc, #280]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e07e      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800232c:	4b42      	ldr	r3, [pc, #264]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 0203 	bic.w	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	493f      	ldr	r1, [pc, #252]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233e:	f7ff f807 	bl	8001350 <HAL_GetTick>
 8002342:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002344:	e00a      	b.n	800235c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f7ff f803 	bl	8001350 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	; 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e066      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235c:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 020c 	and.w	r2, r3, #12
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	429a      	cmp	r2, r3
 800236c:	d1eb      	bne.n	8002346 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237a:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	492c      	ldr	r1, [pc, #176]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238c:	4b29      	ldr	r3, [pc, #164]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d210      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0207 	bic.w	r2, r3, #7
 80023a2:	4924      	ldr	r1, [pc, #144]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b22      	ldr	r3, [pc, #136]	; (8002434 <HAL_RCC_ClockConfig+0x1b0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e036      	b.n	800242a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4918      	ldr	r1, [pc, #96]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4910      	ldr	r1, [pc, #64]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023fa:	f000 f825 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 80023fe:	4601      	mov	r1, r0
 8002400:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_RCC_ClockConfig+0x1b4>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	4a0c      	ldr	r2, [pc, #48]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	5cd3      	ldrb	r3, [r2, r3]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	fa21 f303 	lsr.w	r3, r1, r3
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe ff46 	bl	80012b0 <HAL_InitTick>
 8002424:	4603      	mov	r3, r0
 8002426:	72fb      	strb	r3, [r7, #11]

  return status;
 8002428:	7afb      	ldrb	r3, [r7, #11]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40022000 	.word	0x40022000
 8002438:	40021000 	.word	0x40021000
 800243c:	08005878 	.word	0x08005878
 8002440:	20000000 	.word	0x20000000
 8002444:	20000004 	.word	0x20000004

08002448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_GetSysClockFreq+0x104>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	4b3a      	ldr	r3, [pc, #232]	; (800254c <HAL_RCC_GetSysClockFreq+0x104>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x34>
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d121      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d11e      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800247c:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_GetSysClockFreq+0x104>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002488:	4b30      	ldr	r3, [pc, #192]	; (800254c <HAL_RCC_GetSysClockFreq+0x104>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e005      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002498:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_RCC_GetSysClockFreq+0x104>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a4:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d102      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024c0:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e004      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024cc:	4b22      	ldr	r3, [pc, #136]	; (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d133      	bne.n	800253e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_RCC_GetSysClockFreq+0x104>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d002      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0xa4>
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d003      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0xaa>
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ee:	617b      	str	r3, [r7, #20]
      break;
 80024f0:	e005      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024f4:	617b      	str	r3, [r7, #20]
      break;
 80024f6:	e002      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	617b      	str	r3, [r7, #20]
      break;
 80024fc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_GetSysClockFreq+0x104>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	3301      	adds	r3, #1
 800250a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <HAL_RCC_GetSysClockFreq+0x104>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	fb02 f203 	mul.w	r2, r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_GetSysClockFreq+0x104>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0e5b      	lsrs	r3, r3, #25
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	3301      	adds	r3, #1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800253e:	69bb      	ldr	r3, [r7, #24]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3724      	adds	r7, #36	; 0x24
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40021000 	.word	0x40021000
 8002550:	08005890 	.word	0x08005890
 8002554:	00f42400 	.word	0x00f42400
 8002558:	007a1200 	.word	0x007a1200

0800255c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_RCC_GetHCLKFreq+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000000 	.word	0x20000000

08002574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002578:	f7ff fff0 	bl	800255c <HAL_RCC_GetHCLKFreq>
 800257c:	4601      	mov	r1, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_RCC_GetPCLK1Freq+0x28>)
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	08005888 	.word	0x08005888

080025a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a4:	f7ff ffda 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025a8:	4601      	mov	r1, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0adb      	lsrs	r3, r3, #11
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08005888 	.word	0x08005888

080025cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025d8:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025e4:	f7ff fa04 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 80025e8:	6178      	str	r0, [r7, #20]
 80025ea:	e014      	b.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	4a24      	ldr	r2, [pc, #144]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f6:	6593      	str	r3, [r2, #88]	; 0x58
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002604:	f7ff f9f4 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 8002608:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261c:	d10b      	bne.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b80      	cmp	r3, #128	; 0x80
 8002622:	d919      	bls.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2ba0      	cmp	r3, #160	; 0xa0
 8002628:	d902      	bls.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800262a:	2302      	movs	r3, #2
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	e013      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002630:	2301      	movs	r3, #1
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e010      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b80      	cmp	r3, #128	; 0x80
 800263a:	d902      	bls.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800263c:	2303      	movs	r3, #3
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	e00a      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d102      	bne.n	800264e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002648:	2302      	movs	r3, #2
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	e004      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d101      	bne.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002654:	2301      	movs	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 0207 	bic.w	r2, r3, #7
 8002660:	4909      	ldr	r1, [pc, #36]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	40022000 	.word	0x40022000

0800268c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002694:	2300      	movs	r3, #0
 8002696:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002698:	2300      	movs	r3, #0
 800269a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d03f      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b0:	d01c      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x60>
 80026b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b6:	d802      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00e      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80026bc:	e01f      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x72>
 80026be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026c2:	d003      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80026c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026c8:	d01c      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80026ca:	e018      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026cc:	4b85      	ldr	r3, [pc, #532]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a84      	ldr	r2, [pc, #528]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026d8:	e015      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fab9 	bl	8002c58 <RCCEx_PLLSAI1_Config>
 80026e6:	4603      	mov	r3, r0
 80026e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ea:	e00c      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3320      	adds	r3, #32
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fba0 	bl	8002e38 <RCCEx_PLLSAI2_Config>
 80026f8:	4603      	mov	r3, r0
 80026fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026fc:	e003      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	74fb      	strb	r3, [r7, #19]
      break;
 8002702:	e000      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800270c:	4b75      	ldr	r3, [pc, #468]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800271a:	4972      	ldr	r1, [pc, #456]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002722:	e001      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d03f      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273c:	d01c      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800273e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002742:	d802      	bhi.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00e      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002748:	e01f      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800274a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800274e:	d003      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002750:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002754:	d01c      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002756:	e018      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002758:	4b62      	ldr	r3, [pc, #392]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4a61      	ldr	r2, [pc, #388]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800275e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002762:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002764:	e015      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fa73 	bl	8002c58 <RCCEx_PLLSAI1_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002776:	e00c      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3320      	adds	r3, #32
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fb5a 	bl	8002e38 <RCCEx_PLLSAI2_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002788:	e003      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	74fb      	strb	r3, [r7, #19]
      break;
 800278e:	e000      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002792:	7cfb      	ldrb	r3, [r7, #19]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002798:	4b52      	ldr	r3, [pc, #328]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a6:	494f      	ldr	r1, [pc, #316]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ae:	e001      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a0 	beq.w	8002902 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	4a40      	ldr	r2, [pc, #256]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6593      	str	r3, [r2, #88]	; 0x58
 80027e8:	4b3e      	ldr	r3, [pc, #248]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f4:	2301      	movs	r3, #1
 80027f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a3a      	ldr	r2, [pc, #232]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002804:	f7fe fda4 	bl	8001350 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800280a:	e009      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7fe fda0 	bl	8001350 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d902      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	74fb      	strb	r3, [r7, #19]
        break;
 800281e:	e005      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002820:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ef      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d15c      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01f      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	d019      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002850:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800285c:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	4a20      	ldr	r2, [pc, #128]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800287c:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d016      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe fd5f 	bl	8001350 <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002894:	e00b      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fe fd5b 	bl	8001350 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d902      	bls.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	74fb      	strb	r3, [r7, #19]
            break;
 80028ac:	e006      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ec      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d2:	4904      	ldr	r1, [pc, #16]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028da:	e009      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	74bb      	strb	r3, [r7, #18]
 80028e0:	e006      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f0:	7c7b      	ldrb	r3, [r7, #17]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d105      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f6:	4b9e      	ldr	r3, [pc, #632]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fa:	4a9d      	ldr	r2, [pc, #628]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002900:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800290e:	4b98      	ldr	r3, [pc, #608]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f023 0203 	bic.w	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	4994      	ldr	r1, [pc, #592]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002930:	4b8f      	ldr	r3, [pc, #572]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f023 020c 	bic.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	498c      	ldr	r1, [pc, #560]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002952:	4b87      	ldr	r3, [pc, #540]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	4983      	ldr	r1, [pc, #524]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002974:	4b7e      	ldr	r3, [pc, #504]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	497b      	ldr	r1, [pc, #492]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002996:	4b76      	ldr	r3, [pc, #472]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	4972      	ldr	r1, [pc, #456]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029b8:	4b6d      	ldr	r3, [pc, #436]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	496a      	ldr	r1, [pc, #424]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029da:	4b65      	ldr	r3, [pc, #404]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	4961      	ldr	r1, [pc, #388]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029fc:	4b5c      	ldr	r3, [pc, #368]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0a:	4959      	ldr	r1, [pc, #356]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a1e:	4b54      	ldr	r3, [pc, #336]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	4950      	ldr	r1, [pc, #320]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a40:	4b4b      	ldr	r3, [pc, #300]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	4948      	ldr	r1, [pc, #288]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a62:	4b43      	ldr	r3, [pc, #268]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	493f      	ldr	r1, [pc, #252]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d028      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a84:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a92:	4937      	ldr	r1, [pc, #220]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa4:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a31      	ldr	r2, [pc, #196]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aae:	60d3      	str	r3, [r2, #12]
 8002ab0:	e011      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aba:	d10c      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f8c8 	bl	8002c58 <RCCEx_PLLSAI1_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d028      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ae2:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	491f      	ldr	r1, [pc, #124]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b00:	d106      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b02:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0c:	60d3      	str	r3, [r2, #12]
 8002b0e:	e011      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2101      	movs	r1, #1
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f899 	bl	8002c58 <RCCEx_PLLSAI1_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d02b      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4e:	4908      	ldr	r1, [pc, #32]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5e:	d109      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a02      	ldr	r2, [pc, #8]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b6a:	60d3      	str	r3, [r2, #12]
 8002b6c:	e014      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2101      	movs	r1, #1
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 f867 	bl	8002c58 <RCCEx_PLLSAI1_Config>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d02f      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb2:	4928      	ldr	r1, [pc, #160]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc2:	d10d      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	2102      	movs	r1, #2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f844 	bl	8002c58 <RCCEx_PLLSAI1_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd4:	7cfb      	ldrb	r3, [r7, #19]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d014      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	74bb      	strb	r3, [r7, #18]
 8002bde:	e011      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3320      	adds	r3, #32
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f921 	bl	8002e38 <RCCEx_PLLSAI2_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bfa:	7cfb      	ldrb	r3, [r7, #19]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c1e:	490d      	ldr	r1, [pc, #52]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c42:	4904      	ldr	r1, [pc, #16]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000

08002c58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c66:	4b73      	ldr	r3, [pc, #460]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d018      	beq.n	8002ca4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c72:	4b70      	ldr	r3, [pc, #448]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0203 	and.w	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d10d      	bne.n	8002c9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
       ||
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c8a:	4b6a      	ldr	r3, [pc, #424]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
       ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d044      	beq.n	8002d28 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	e041      	b.n	8002d28 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d00c      	beq.n	8002cc6 <RCCEx_PLLSAI1_Config+0x6e>
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d013      	beq.n	8002cd8 <RCCEx_PLLSAI1_Config+0x80>
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d120      	bne.n	8002cf6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cb4:	4b5f      	ldr	r3, [pc, #380]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d11d      	bne.n	8002cfc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc4:	e01a      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cc6:	4b5b      	ldr	r3, [pc, #364]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd6:	e013      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cd8:	4b56      	ldr	r3, [pc, #344]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10f      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ce4:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cf4:	e006      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfa:	e004      	b.n	8002d06 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cfc:	bf00      	nop
 8002cfe:	e002      	b.n	8002d06 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d00:	bf00      	nop
 8002d02:	e000      	b.n	8002d06 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d04:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10d      	bne.n	8002d28 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d0c:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6819      	ldr	r1, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	430b      	orrs	r3, r1
 8002d22:	4944      	ldr	r1, [pc, #272]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d17d      	bne.n	8002e2a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d2e:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a40      	ldr	r2, [pc, #256]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3a:	f7fe fb09 	bl	8001350 <HAL_GetTick>
 8002d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d40:	e009      	b.n	8002d56 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d42:	f7fe fb05 	bl	8001350 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d902      	bls.n	8002d56 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	73fb      	strb	r3, [r7, #15]
        break;
 8002d54:	e005      	b.n	8002d62 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d56:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1ef      	bne.n	8002d42 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d160      	bne.n	8002e2a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d111      	bne.n	8002d92 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6892      	ldr	r2, [r2, #8]
 8002d7e:	0211      	lsls	r1, r2, #8
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68d2      	ldr	r2, [r2, #12]
 8002d84:	0912      	lsrs	r2, r2, #4
 8002d86:	0452      	lsls	r2, r2, #17
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	492a      	ldr	r1, [pc, #168]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	610b      	str	r3, [r1, #16]
 8002d90:	e027      	b.n	8002de2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d112      	bne.n	8002dbe <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d98:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002da0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6892      	ldr	r2, [r2, #8]
 8002da8:	0211      	lsls	r1, r2, #8
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6912      	ldr	r2, [r2, #16]
 8002dae:	0852      	lsrs	r2, r2, #1
 8002db0:	3a01      	subs	r2, #1
 8002db2:	0552      	lsls	r2, r2, #21
 8002db4:	430a      	orrs	r2, r1
 8002db6:	491f      	ldr	r1, [pc, #124]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	610b      	str	r3, [r1, #16]
 8002dbc:	e011      	b.n	8002de2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6892      	ldr	r2, [r2, #8]
 8002dce:	0211      	lsls	r1, r2, #8
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6952      	ldr	r2, [r2, #20]
 8002dd4:	0852      	lsrs	r2, r2, #1
 8002dd6:	3a01      	subs	r2, #1
 8002dd8:	0652      	lsls	r2, r2, #25
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	4915      	ldr	r1, [pc, #84]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe faaf 	bl	8001350 <HAL_GetTick>
 8002df2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002df4:	e009      	b.n	8002e0a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002df6:	f7fe faab 	bl	8001350 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d902      	bls.n	8002e0a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	73fb      	strb	r3, [r7, #15]
          break;
 8002e08:	e005      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0ef      	beq.n	8002df6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	4903      	ldr	r1, [pc, #12]	; (8002e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000

08002e38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e46:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d018      	beq.n	8002e84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0203 	and.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d10d      	bne.n	8002e7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
       ||
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e6a:	4b5f      	ldr	r3, [pc, #380]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
       ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d044      	beq.n	8002f08 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
 8002e82:	e041      	b.n	8002f08 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d00c      	beq.n	8002ea6 <RCCEx_PLLSAI2_Config+0x6e>
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d013      	beq.n	8002eb8 <RCCEx_PLLSAI2_Config+0x80>
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d120      	bne.n	8002ed6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e94:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11d      	bne.n	8002edc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea4:	e01a      	b.n	8002edc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ea6:	4b50      	ldr	r3, [pc, #320]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb6:	e013      	b.n	8002ee0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eb8:	4b4b      	ldr	r3, [pc, #300]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ec4:	4b48      	ldr	r3, [pc, #288]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ed4:	e006      	b.n	8002ee4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8002eda:	e004      	b.n	8002ee6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002edc:	bf00      	nop
 8002ede:	e002      	b.n	8002ee6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ee0:	bf00      	nop
 8002ee2:	e000      	b.n	8002ee6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ee4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10d      	bne.n	8002f08 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eec:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6819      	ldr	r1, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	430b      	orrs	r3, r1
 8002f02:	4939      	ldr	r1, [pc, #228]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d167      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f0e:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a35      	ldr	r2, [pc, #212]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1a:	f7fe fa19 	bl	8001350 <HAL_GetTick>
 8002f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f20:	e009      	b.n	8002f36 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f22:	f7fe fa15 	bl	8001350 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d902      	bls.n	8002f36 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	73fb      	strb	r3, [r7, #15]
        break;
 8002f34:	e005      	b.n	8002f42 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ef      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d14a      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d111      	bne.n	8002f72 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f4e:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6892      	ldr	r2, [r2, #8]
 8002f5e:	0211      	lsls	r1, r2, #8
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	68d2      	ldr	r2, [r2, #12]
 8002f64:	0912      	lsrs	r2, r2, #4
 8002f66:	0452      	lsls	r2, r2, #17
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	491f      	ldr	r1, [pc, #124]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	614b      	str	r3, [r1, #20]
 8002f70:	e011      	b.n	8002f96 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6892      	ldr	r2, [r2, #8]
 8002f82:	0211      	lsls	r1, r2, #8
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6912      	ldr	r2, [r2, #16]
 8002f88:	0852      	lsrs	r2, r2, #1
 8002f8a:	3a01      	subs	r2, #1
 8002f8c:	0652      	lsls	r2, r2, #25
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	4915      	ldr	r1, [pc, #84]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f96:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fe f9d5 	bl	8001350 <HAL_GetTick>
 8002fa6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fa8:	e009      	b.n	8002fbe <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002faa:	f7fe f9d1 	bl	8001350 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d902      	bls.n	8002fbe <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	73fb      	strb	r3, [r7, #15]
          break;
 8002fbc:	e005      	b.n	8002fca <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0ef      	beq.n	8002faa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	4903      	ldr	r1, [pc, #12]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e049      	b.n	8003092 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd fcee 	bl	80009f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 faa6 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d001      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e04f      	b.n	8003154 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a23      	ldr	r2, [pc, #140]	; (8003160 <HAL_TIM_Base_Start_IT+0xc4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030de:	d018      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <HAL_TIM_Base_Start_IT+0xc8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <HAL_TIM_Base_Start_IT+0xcc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_TIM_Base_Start_IT+0xd0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <HAL_TIM_Base_Start_IT+0xd4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x76>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_TIM_Base_Start_IT+0xd8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d115      	bne.n	800313e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_TIM_Base_Start_IT+0xdc>)
 800311a:	4013      	ands	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b06      	cmp	r3, #6
 8003122:	d015      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0xb4>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312a:	d011      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	e008      	b.n	8003150 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e000      	b.n	8003152 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40013400 	.word	0x40013400
 8003174:	40014000 	.word	0x40014000
 8003178:	00010007 	.word	0x00010007

0800317c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b02      	cmp	r3, #2
 8003190:	d122      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b02      	cmp	r3, #2
 800319e:	d11b      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0202 	mvn.w	r2, #2
 80031a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f9be 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f9b0 	bl	800352c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f9c1 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d122      	bne.n	800322c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d11b      	bne.n	800322c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0204 	mvn.w	r2, #4
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f994 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f986 	bl	800352c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f997 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b08      	cmp	r3, #8
 8003238:	d122      	bne.n	8003280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b08      	cmp	r3, #8
 8003246:	d11b      	bne.n	8003280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0208 	mvn.w	r2, #8
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2204      	movs	r2, #4
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f96a 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f95c 	bl	800352c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f96d 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b10      	cmp	r3, #16
 800328c:	d122      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b10      	cmp	r3, #16
 800329a:	d11b      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0210 	mvn.w	r2, #16
 80032a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2208      	movs	r2, #8
 80032aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f940 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f932 	bl	800352c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f943 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d10e      	bne.n	8003300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0201 	mvn.w	r2, #1
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fd f964 	bl	80005c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d10e      	bne.n	800332c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b80      	cmp	r3, #128	; 0x80
 800331a:	d107      	bne.n	800332c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 faee 	bl	8003908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333a:	d10e      	bne.n	800335a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	d107      	bne.n	800335a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fae1 	bl	800391c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d10e      	bne.n	8003386 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d107      	bne.n	8003386 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f8f1 	bl	8003568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b20      	cmp	r3, #32
 8003392:	d10e      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d107      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0220 	mvn.w	r2, #32
 80033aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 faa1 	bl	80038f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_ConfigClockSource+0x18>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e0a8      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x16a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2202      	movs	r2, #2
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	d067      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x124>
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d80b      	bhi.n	800342a <HAL_TIM_ConfigClockSource+0x70>
 8003412:	2b10      	cmp	r3, #16
 8003414:	d073      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x144>
 8003416:	2b10      	cmp	r3, #16
 8003418:	d802      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x66>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d06f      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800341e:	e078      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003420:	2b20      	cmp	r3, #32
 8003422:	d06c      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x144>
 8003424:	2b30      	cmp	r3, #48	; 0x30
 8003426:	d06a      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003428:	e073      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800342a:	2b70      	cmp	r3, #112	; 0x70
 800342c:	d00d      	beq.n	800344a <HAL_TIM_ConfigClockSource+0x90>
 800342e:	2b70      	cmp	r3, #112	; 0x70
 8003430:	d804      	bhi.n	800343c <HAL_TIM_ConfigClockSource+0x82>
 8003432:	2b50      	cmp	r3, #80	; 0x50
 8003434:	d033      	beq.n	800349e <HAL_TIM_ConfigClockSource+0xe4>
 8003436:	2b60      	cmp	r3, #96	; 0x60
 8003438:	d041      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x104>
      break;
 800343a:	e06a      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003440:	d066      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0x156>
 8003442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003446:	d017      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003448:	e063      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6899      	ldr	r1, [r3, #8]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f000 f9a3 	bl	80037a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800346c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	609a      	str	r2, [r3, #8]
      break;
 8003476:	e04c      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6899      	ldr	r1, [r3, #8]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f000 f98c 	bl	80037a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800349a:	609a      	str	r2, [r3, #8]
      break;
 800349c:	e039      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6859      	ldr	r1, [r3, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f000 f900 	bl	80036b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2150      	movs	r1, #80	; 0x50
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f959 	bl	800376e <TIM_ITRx_SetConfig>
      break;
 80034bc:	e029      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f000 f91f 	bl	800370e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2160      	movs	r1, #96	; 0x60
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f949 	bl	800376e <TIM_ITRx_SetConfig>
      break;
 80034dc:	e019      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f000 f8e0 	bl	80036b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2140      	movs	r1, #64	; 0x40
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f939 	bl	800376e <TIM_ITRx_SetConfig>
      break;
 80034fc:	e009      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f000 f930 	bl	800376e <TIM_ITRx_SetConfig>
        break;
 800350e:	e000      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003510:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a40      	ldr	r2, [pc, #256]	; (8003690 <TIM_Base_SetConfig+0x114>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d00f      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3d      	ldr	r2, [pc, #244]	; (8003694 <TIM_Base_SetConfig+0x118>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00b      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3c      	ldr	r2, [pc, #240]	; (8003698 <TIM_Base_SetConfig+0x11c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3b      	ldr	r2, [pc, #236]	; (800369c <TIM_Base_SetConfig+0x120>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a3a      	ldr	r2, [pc, #232]	; (80036a0 <TIM_Base_SetConfig+0x124>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d108      	bne.n	80035ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <TIM_Base_SetConfig+0x114>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01f      	beq.n	8003616 <TIM_Base_SetConfig+0x9a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d01b      	beq.n	8003616 <TIM_Base_SetConfig+0x9a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <TIM_Base_SetConfig+0x118>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d017      	beq.n	8003616 <TIM_Base_SetConfig+0x9a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <TIM_Base_SetConfig+0x11c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <TIM_Base_SetConfig+0x9a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a2a      	ldr	r2, [pc, #168]	; (800369c <TIM_Base_SetConfig+0x120>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00f      	beq.n	8003616 <TIM_Base_SetConfig+0x9a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <TIM_Base_SetConfig+0x124>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00b      	beq.n	8003616 <TIM_Base_SetConfig+0x9a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <TIM_Base_SetConfig+0x128>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <TIM_Base_SetConfig+0x9a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <TIM_Base_SetConfig+0x12c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_Base_SetConfig+0x9a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a26      	ldr	r2, [pc, #152]	; (80036ac <TIM_Base_SetConfig+0x130>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d108      	bne.n	8003628 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a10      	ldr	r2, [pc, #64]	; (8003690 <TIM_Base_SetConfig+0x114>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00f      	beq.n	8003674 <TIM_Base_SetConfig+0xf8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <TIM_Base_SetConfig+0x124>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00b      	beq.n	8003674 <TIM_Base_SetConfig+0xf8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a11      	ldr	r2, [pc, #68]	; (80036a4 <TIM_Base_SetConfig+0x128>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <TIM_Base_SetConfig+0xf8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a10      	ldr	r2, [pc, #64]	; (80036a8 <TIM_Base_SetConfig+0x12c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0xf8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a0f      	ldr	r2, [pc, #60]	; (80036ac <TIM_Base_SetConfig+0x130>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d103      	bne.n	800367c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	615a      	str	r2, [r3, #20]
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40000400 	.word	0x40000400
 8003698:	40000800 	.word	0x40000800
 800369c:	40000c00 	.word	0x40000c00
 80036a0:	40013400 	.word	0x40013400
 80036a4:	40014000 	.word	0x40014000
 80036a8:	40014400 	.word	0x40014400
 80036ac:	40014800 	.word	0x40014800

080036b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 030a 	bic.w	r3, r3, #10
 80036ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800370e:	b480      	push	{r7}
 8003710:	b087      	sub	sp, #28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f023 0210 	bic.w	r2, r3, #16
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	031b      	lsls	r3, r3, #12
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800374a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800376e:	b480      	push	{r7}
 8003770:	b085      	sub	sp, #20
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	f043 0307 	orr.w	r3, r3, #7
 8003790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	609a      	str	r2, [r3, #8]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	021a      	lsls	r2, r3, #8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	609a      	str	r2, [r3, #8]
}
 80037d8:	bf00      	nop
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e068      	b.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a2e      	ldr	r2, [pc, #184]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d004      	beq.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a2d      	ldr	r2, [pc, #180]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d108      	bne.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01d      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d018      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00e      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a18      	ldr	r2, [pc, #96]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10c      	bne.n	80038bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40012c00 	.word	0x40012c00
 80038e0:	40013400 	.word	0x40013400
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40014000 	.word	0x40014000

080038f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e040      	b.n	80039c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd f872 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	; 0x24
 800395c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 faa4 	bl	8003ebc <UART_SetConfig>
 8003974:	4603      	mov	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e022      	b.n	80039c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fd22 	bl	80043d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800399a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fda9 	bl	8004514 <UART_CheckIdleState>
 80039c2:	4603      	mov	r3, r0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	; 0x28
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	4613      	mov	r3, r2
 80039da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	f040 8081 	bne.w	8003ae8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_UART_Transmit+0x26>
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e079      	b.n	8003aea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_UART_Transmit+0x38>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e072      	b.n	8003aea <HAL_UART_Transmit+0x11e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2221      	movs	r2, #33	; 0x21
 8003a16:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003a18:	f7fd fc9a 	bl	8001350 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d108      	bne.n	8003a4a <HAL_UART_Transmit+0x7e>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d104      	bne.n	8003a4a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	e003      	b.n	8003a52 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003a5a:	e02d      	b.n	8003ab8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2200      	movs	r2, #0
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fd99 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e039      	b.n	8003aea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	881a      	ldrh	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a88:	b292      	uxth	r2, r2
 8003a8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	3302      	adds	r3, #2
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e008      	b.n	8003aa6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	781a      	ldrb	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	b292      	uxth	r2, r2
 8003a9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1cb      	bne.n	8003a5c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2200      	movs	r2, #0
 8003acc:	2140      	movs	r1, #64	; 0x40
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fd65 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e005      	b.n	8003aea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e000      	b.n	8003aea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d17a      	bne.n	8003c00 <HAL_UART_Receive_IT+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_UART_Receive_IT+0x22>
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e073      	b.n	8003c02 <HAL_UART_Receive_IT+0x10e>
    }

    //__HAL_LOCK(huart);

    huart->pRxBuffPtr  = pData;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	d10e      	bne.n	8003b5e <HAL_UART_Receive_IT+0x6a>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <HAL_UART_Receive_IT+0x60>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b52:	e02d      	b.n	8003bb0 <HAL_UART_Receive_IT+0xbc>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b5c:	e028      	b.n	8003bb0 <HAL_UART_Receive_IT+0xbc>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10d      	bne.n	8003b82 <HAL_UART_Receive_IT+0x8e>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <HAL_UART_Receive_IT+0x84>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	22ff      	movs	r2, #255	; 0xff
 8003b72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b76:	e01b      	b.n	8003bb0 <HAL_UART_Receive_IT+0xbc>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	227f      	movs	r2, #127	; 0x7f
 8003b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b80:	e016      	b.n	8003bb0 <HAL_UART_Receive_IT+0xbc>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b8a:	d10d      	bne.n	8003ba8 <HAL_UART_Receive_IT+0xb4>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d104      	bne.n	8003b9e <HAL_UART_Receive_IT+0xaa>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	227f      	movs	r2, #127	; 0x7f
 8003b98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b9c:	e008      	b.n	8003bb0 <HAL_UART_Receive_IT+0xbc>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	223f      	movs	r2, #63	; 0x3f
 8003ba2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ba6:	e003      	b.n	8003bb0 <HAL_UART_Receive_IT+0xbc>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2222      	movs	r2, #34	; 0x22
 8003bba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd4:	d107      	bne.n	8003be6 <HAL_UART_Receive_IT+0xf2>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <HAL_UART_Receive_IT+0xf2>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a0b      	ldr	r2, [pc, #44]	; (8003c10 <HAL_UART_Receive_IT+0x11c>)
 8003be2:	661a      	str	r2, [r3, #96]	; 0x60
 8003be4:	e002      	b.n	8003bec <HAL_UART_Receive_IT+0xf8>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <HAL_UART_Receive_IT+0x120>)
 8003bea:	661a      	str	r2, [r3, #96]	; 0x60
    }

    //__HAL_UNLOCK(huart);

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003bfa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_UART_Receive_IT+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	080047dd 	.word	0x080047dd
 8003c14:	08004733 	.word	0x08004733

08003c18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d113      	bne.n	8003c70 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00e      	beq.n	8003c70 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8114 	beq.w	8003e8e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
      }
      return;
 8003c6e:	e10e      	b.n	8003e8e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80d6 	beq.w	8003e24 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d105      	bne.n	8003c8e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4b86      	ldr	r3, [pc, #536]	; (8003ea0 <HAL_UART_IRQHandler+0x288>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80cb 	beq.w	8003e24 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00e      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x9e>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cae:	f043 0201 	orr.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00e      	beq.n	8003cde <HAL_UART_IRQHandler+0xc6>
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd6:	f043 0204 	orr.w	r2, r3, #4
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00e      	beq.n	8003d06 <HAL_UART_IRQHandler+0xee>
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cfe:	f043 0202 	orr.w	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d013      	beq.n	8003d38 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d30:	f043 0208 	orr.w	r2, r3, #8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00f      	beq.n	8003d62 <HAL_UART_IRQHandler+0x14a>
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8093 	beq.w	8003e92 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00c      	beq.n	8003d90 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	d004      	beq.n	8003dae <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d031      	beq.n	8003e12 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fc70 	bl	8004694 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d123      	bne.n	8003e0a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d013      	beq.n	8003e02 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dde:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <HAL_UART_IRQHandler+0x28c>)
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd fbcf 	bl	800158a <HAL_DMA_Abort_IT>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	e00e      	b.n	8003e20 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f850 	bl	8003ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	e00a      	b.n	8003e20 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f84c 	bl	8003ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	e006      	b.n	8003e20 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f848 	bl	8003ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003e1e:	e038      	b.n	8003e92 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	bf00      	nop
    return;
 8003e22:	e036      	b.n	8003e92 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00d      	beq.n	8003e4a <HAL_UART_IRQHandler+0x232>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fd1f 	bl	8004886 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e48:	e026      	b.n	8003e98 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00d      	beq.n	8003e70 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d017      	beq.n	8003e96 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
    }
    return;
 8003e6e:	e012      	b.n	8003e96 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00e      	beq.n	8003e98 <HAL_UART_IRQHandler+0x280>
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fc3b 	bl	8004700 <UART_EndTransmit_IT>
    return;
 8003e8a:	bf00      	nop
 8003e8c:	e004      	b.n	8003e98 <HAL_UART_IRQHandler+0x280>
      return;
 8003e8e:	bf00      	nop
 8003e90:	e002      	b.n	8003e98 <HAL_UART_IRQHandler+0x280>
    return;
 8003e92:	bf00      	nop
 8003e94:	e000      	b.n	8003e98 <HAL_UART_IRQHandler+0x280>
    return;
 8003e96:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	04000120 	.word	0x04000120
 8003ea4:	080046d5 	.word	0x080046d5

08003ea8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003ec0:	b088      	sub	sp, #32
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4bac      	ldr	r3, [pc, #688]	; (800419c <UART_SetConfig+0x2e0>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	69f9      	ldr	r1, [r7, #28]
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4aa2      	ldr	r2, [pc, #648]	; (80041a0 <UART_SetConfig+0x2e4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a99      	ldr	r2, [pc, #612]	; (80041a4 <UART_SetConfig+0x2e8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d121      	bne.n	8003f88 <UART_SetConfig+0xcc>
 8003f44:	4b98      	ldr	r3, [pc, #608]	; (80041a8 <UART_SetConfig+0x2ec>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d816      	bhi.n	8003f80 <UART_SetConfig+0xc4>
 8003f52:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <UART_SetConfig+0x9c>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f69 	.word	0x08003f69
 8003f5c:	08003f75 	.word	0x08003f75
 8003f60:	08003f6f 	.word	0x08003f6f
 8003f64:	08003f7b 	.word	0x08003f7b
 8003f68:	2301      	movs	r3, #1
 8003f6a:	76fb      	strb	r3, [r7, #27]
 8003f6c:	e0e8      	b.n	8004140 <UART_SetConfig+0x284>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	76fb      	strb	r3, [r7, #27]
 8003f72:	e0e5      	b.n	8004140 <UART_SetConfig+0x284>
 8003f74:	2304      	movs	r3, #4
 8003f76:	76fb      	strb	r3, [r7, #27]
 8003f78:	e0e2      	b.n	8004140 <UART_SetConfig+0x284>
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	76fb      	strb	r3, [r7, #27]
 8003f7e:	e0df      	b.n	8004140 <UART_SetConfig+0x284>
 8003f80:	2310      	movs	r3, #16
 8003f82:	76fb      	strb	r3, [r7, #27]
 8003f84:	bf00      	nop
 8003f86:	e0db      	b.n	8004140 <UART_SetConfig+0x284>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a87      	ldr	r2, [pc, #540]	; (80041ac <UART_SetConfig+0x2f0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d134      	bne.n	8003ffc <UART_SetConfig+0x140>
 8003f92:	4b85      	ldr	r3, [pc, #532]	; (80041a8 <UART_SetConfig+0x2ec>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f003 030c 	and.w	r3, r3, #12
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	d829      	bhi.n	8003ff4 <UART_SetConfig+0x138>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <UART_SetConfig+0xec>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fdd 	.word	0x08003fdd
 8003fac:	08003ff5 	.word	0x08003ff5
 8003fb0:	08003ff5 	.word	0x08003ff5
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003fe9 	.word	0x08003fe9
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	08003ff5 	.word	0x08003ff5
 8003fc8:	08003fe3 	.word	0x08003fe3
 8003fcc:	08003ff5 	.word	0x08003ff5
 8003fd0:	08003ff5 	.word	0x08003ff5
 8003fd4:	08003ff5 	.word	0x08003ff5
 8003fd8:	08003fef 	.word	0x08003fef
 8003fdc:	2300      	movs	r3, #0
 8003fde:	76fb      	strb	r3, [r7, #27]
 8003fe0:	e0ae      	b.n	8004140 <UART_SetConfig+0x284>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	76fb      	strb	r3, [r7, #27]
 8003fe6:	e0ab      	b.n	8004140 <UART_SetConfig+0x284>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	76fb      	strb	r3, [r7, #27]
 8003fec:	e0a8      	b.n	8004140 <UART_SetConfig+0x284>
 8003fee:	2308      	movs	r3, #8
 8003ff0:	76fb      	strb	r3, [r7, #27]
 8003ff2:	e0a5      	b.n	8004140 <UART_SetConfig+0x284>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	76fb      	strb	r3, [r7, #27]
 8003ff8:	bf00      	nop
 8003ffa:	e0a1      	b.n	8004140 <UART_SetConfig+0x284>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a6b      	ldr	r2, [pc, #428]	; (80041b0 <UART_SetConfig+0x2f4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d120      	bne.n	8004048 <UART_SetConfig+0x18c>
 8004006:	4b68      	ldr	r3, [pc, #416]	; (80041a8 <UART_SetConfig+0x2ec>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004010:	2b10      	cmp	r3, #16
 8004012:	d00f      	beq.n	8004034 <UART_SetConfig+0x178>
 8004014:	2b10      	cmp	r3, #16
 8004016:	d802      	bhi.n	800401e <UART_SetConfig+0x162>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <UART_SetConfig+0x16c>
 800401c:	e010      	b.n	8004040 <UART_SetConfig+0x184>
 800401e:	2b20      	cmp	r3, #32
 8004020:	d005      	beq.n	800402e <UART_SetConfig+0x172>
 8004022:	2b30      	cmp	r3, #48	; 0x30
 8004024:	d009      	beq.n	800403a <UART_SetConfig+0x17e>
 8004026:	e00b      	b.n	8004040 <UART_SetConfig+0x184>
 8004028:	2300      	movs	r3, #0
 800402a:	76fb      	strb	r3, [r7, #27]
 800402c:	e088      	b.n	8004140 <UART_SetConfig+0x284>
 800402e:	2302      	movs	r3, #2
 8004030:	76fb      	strb	r3, [r7, #27]
 8004032:	e085      	b.n	8004140 <UART_SetConfig+0x284>
 8004034:	2304      	movs	r3, #4
 8004036:	76fb      	strb	r3, [r7, #27]
 8004038:	e082      	b.n	8004140 <UART_SetConfig+0x284>
 800403a:	2308      	movs	r3, #8
 800403c:	76fb      	strb	r3, [r7, #27]
 800403e:	e07f      	b.n	8004140 <UART_SetConfig+0x284>
 8004040:	2310      	movs	r3, #16
 8004042:	76fb      	strb	r3, [r7, #27]
 8004044:	bf00      	nop
 8004046:	e07b      	b.n	8004140 <UART_SetConfig+0x284>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a59      	ldr	r2, [pc, #356]	; (80041b4 <UART_SetConfig+0x2f8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d120      	bne.n	8004094 <UART_SetConfig+0x1d8>
 8004052:	4b55      	ldr	r3, [pc, #340]	; (80041a8 <UART_SetConfig+0x2ec>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d00f      	beq.n	8004080 <UART_SetConfig+0x1c4>
 8004060:	2b40      	cmp	r3, #64	; 0x40
 8004062:	d802      	bhi.n	800406a <UART_SetConfig+0x1ae>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <UART_SetConfig+0x1b8>
 8004068:	e010      	b.n	800408c <UART_SetConfig+0x1d0>
 800406a:	2b80      	cmp	r3, #128	; 0x80
 800406c:	d005      	beq.n	800407a <UART_SetConfig+0x1be>
 800406e:	2bc0      	cmp	r3, #192	; 0xc0
 8004070:	d009      	beq.n	8004086 <UART_SetConfig+0x1ca>
 8004072:	e00b      	b.n	800408c <UART_SetConfig+0x1d0>
 8004074:	2300      	movs	r3, #0
 8004076:	76fb      	strb	r3, [r7, #27]
 8004078:	e062      	b.n	8004140 <UART_SetConfig+0x284>
 800407a:	2302      	movs	r3, #2
 800407c:	76fb      	strb	r3, [r7, #27]
 800407e:	e05f      	b.n	8004140 <UART_SetConfig+0x284>
 8004080:	2304      	movs	r3, #4
 8004082:	76fb      	strb	r3, [r7, #27]
 8004084:	e05c      	b.n	8004140 <UART_SetConfig+0x284>
 8004086:	2308      	movs	r3, #8
 8004088:	76fb      	strb	r3, [r7, #27]
 800408a:	e059      	b.n	8004140 <UART_SetConfig+0x284>
 800408c:	2310      	movs	r3, #16
 800408e:	76fb      	strb	r3, [r7, #27]
 8004090:	bf00      	nop
 8004092:	e055      	b.n	8004140 <UART_SetConfig+0x284>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a47      	ldr	r2, [pc, #284]	; (80041b8 <UART_SetConfig+0x2fc>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d124      	bne.n	80040e8 <UART_SetConfig+0x22c>
 800409e:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <UART_SetConfig+0x2ec>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ac:	d012      	beq.n	80040d4 <UART_SetConfig+0x218>
 80040ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b2:	d802      	bhi.n	80040ba <UART_SetConfig+0x1fe>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <UART_SetConfig+0x20c>
 80040b8:	e012      	b.n	80040e0 <UART_SetConfig+0x224>
 80040ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040be:	d006      	beq.n	80040ce <UART_SetConfig+0x212>
 80040c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c4:	d009      	beq.n	80040da <UART_SetConfig+0x21e>
 80040c6:	e00b      	b.n	80040e0 <UART_SetConfig+0x224>
 80040c8:	2300      	movs	r3, #0
 80040ca:	76fb      	strb	r3, [r7, #27]
 80040cc:	e038      	b.n	8004140 <UART_SetConfig+0x284>
 80040ce:	2302      	movs	r3, #2
 80040d0:	76fb      	strb	r3, [r7, #27]
 80040d2:	e035      	b.n	8004140 <UART_SetConfig+0x284>
 80040d4:	2304      	movs	r3, #4
 80040d6:	76fb      	strb	r3, [r7, #27]
 80040d8:	e032      	b.n	8004140 <UART_SetConfig+0x284>
 80040da:	2308      	movs	r3, #8
 80040dc:	76fb      	strb	r3, [r7, #27]
 80040de:	e02f      	b.n	8004140 <UART_SetConfig+0x284>
 80040e0:	2310      	movs	r3, #16
 80040e2:	76fb      	strb	r3, [r7, #27]
 80040e4:	bf00      	nop
 80040e6:	e02b      	b.n	8004140 <UART_SetConfig+0x284>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2c      	ldr	r2, [pc, #176]	; (80041a0 <UART_SetConfig+0x2e4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d124      	bne.n	800413c <UART_SetConfig+0x280>
 80040f2:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <UART_SetConfig+0x2ec>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004100:	d012      	beq.n	8004128 <UART_SetConfig+0x26c>
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004106:	d802      	bhi.n	800410e <UART_SetConfig+0x252>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <UART_SetConfig+0x260>
 800410c:	e012      	b.n	8004134 <UART_SetConfig+0x278>
 800410e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004112:	d006      	beq.n	8004122 <UART_SetConfig+0x266>
 8004114:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004118:	d009      	beq.n	800412e <UART_SetConfig+0x272>
 800411a:	e00b      	b.n	8004134 <UART_SetConfig+0x278>
 800411c:	2300      	movs	r3, #0
 800411e:	76fb      	strb	r3, [r7, #27]
 8004120:	e00e      	b.n	8004140 <UART_SetConfig+0x284>
 8004122:	2302      	movs	r3, #2
 8004124:	76fb      	strb	r3, [r7, #27]
 8004126:	e00b      	b.n	8004140 <UART_SetConfig+0x284>
 8004128:	2304      	movs	r3, #4
 800412a:	76fb      	strb	r3, [r7, #27]
 800412c:	e008      	b.n	8004140 <UART_SetConfig+0x284>
 800412e:	2308      	movs	r3, #8
 8004130:	76fb      	strb	r3, [r7, #27]
 8004132:	e005      	b.n	8004140 <UART_SetConfig+0x284>
 8004134:	2310      	movs	r3, #16
 8004136:	76fb      	strb	r3, [r7, #27]
 8004138:	bf00      	nop
 800413a:	e001      	b.n	8004140 <UART_SetConfig+0x284>
 800413c:	2310      	movs	r3, #16
 800413e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <UART_SetConfig+0x2e4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	f040 8087 	bne.w	800425a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800414c:	7efb      	ldrb	r3, [r7, #27]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d836      	bhi.n	80041c0 <UART_SetConfig+0x304>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <UART_SetConfig+0x29c>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	0800417d 	.word	0x0800417d
 800415c:	080041c1 	.word	0x080041c1
 8004160:	08004185 	.word	0x08004185
 8004164:	080041c1 	.word	0x080041c1
 8004168:	0800418b 	.word	0x0800418b
 800416c:	080041c1 	.word	0x080041c1
 8004170:	080041c1 	.word	0x080041c1
 8004174:	080041c1 	.word	0x080041c1
 8004178:	08004193 	.word	0x08004193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800417c:	f7fe f9fa 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8004180:	6178      	str	r0, [r7, #20]
        break;
 8004182:	e022      	b.n	80041ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004184:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <UART_SetConfig+0x300>)
 8004186:	617b      	str	r3, [r7, #20]
        break;
 8004188:	e01f      	b.n	80041ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418a:	f7fe f95d 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 800418e:	6178      	str	r0, [r7, #20]
        break;
 8004190:	e01b      	b.n	80041ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004196:	617b      	str	r3, [r7, #20]
        break;
 8004198:	e017      	b.n	80041ca <UART_SetConfig+0x30e>
 800419a:	bf00      	nop
 800419c:	efff69f3 	.word	0xefff69f3
 80041a0:	40008000 	.word	0x40008000
 80041a4:	40013800 	.word	0x40013800
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40004400 	.word	0x40004400
 80041b0:	40004800 	.word	0x40004800
 80041b4:	40004c00 	.word	0x40004c00
 80041b8:	40005000 	.word	0x40005000
 80041bc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	76bb      	strb	r3, [r7, #26]
        break;
 80041c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80f1 	beq.w	80043b4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4413      	add	r3, r2
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d305      	bcc.n	80041ee <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d902      	bls.n	80041f4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	76bb      	strb	r3, [r7, #26]
 80041f2:	e0df      	b.n	80043b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	4619      	mov	r1, r3
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	f04f 0400 	mov.w	r4, #0
 8004204:	0214      	lsls	r4, r2, #8
 8004206:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800420a:	020b      	lsls	r3, r1, #8
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6852      	ldr	r2, [r2, #4]
 8004210:	0852      	lsrs	r2, r2, #1
 8004212:	4611      	mov	r1, r2
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	eb13 0b01 	adds.w	fp, r3, r1
 800421c:	eb44 0c02 	adc.w	ip, r4, r2
 8004220:	4658      	mov	r0, fp
 8004222:	4661      	mov	r1, ip
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f04f 0400 	mov.w	r4, #0
 800422c:	461a      	mov	r2, r3
 800422e:	4623      	mov	r3, r4
 8004230:	f7fc f81e 	bl	8000270 <__aeabi_uldivmod>
 8004234:	4603      	mov	r3, r0
 8004236:	460c      	mov	r4, r1
 8004238:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004240:	d308      	bcc.n	8004254 <UART_SetConfig+0x398>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004248:	d204      	bcs.n	8004254 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	e0af      	b.n	80043b4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	76bb      	strb	r3, [r7, #26]
 8004258:	e0ac      	b.n	80043b4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004262:	d15b      	bne.n	800431c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004264:	7efb      	ldrb	r3, [r7, #27]
 8004266:	2b08      	cmp	r3, #8
 8004268:	d827      	bhi.n	80042ba <UART_SetConfig+0x3fe>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0x3b4>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004295 	.word	0x08004295
 8004274:	0800429d 	.word	0x0800429d
 8004278:	080042a5 	.word	0x080042a5
 800427c:	080042bb 	.word	0x080042bb
 8004280:	080042ab 	.word	0x080042ab
 8004284:	080042bb 	.word	0x080042bb
 8004288:	080042bb 	.word	0x080042bb
 800428c:	080042bb 	.word	0x080042bb
 8004290:	080042b3 	.word	0x080042b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004294:	f7fe f96e 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8004298:	6178      	str	r0, [r7, #20]
        break;
 800429a:	e013      	b.n	80042c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800429c:	f7fe f980 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 80042a0:	6178      	str	r0, [r7, #20]
        break;
 80042a2:	e00f      	b.n	80042c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a4:	4b49      	ldr	r3, [pc, #292]	; (80043cc <UART_SetConfig+0x510>)
 80042a6:	617b      	str	r3, [r7, #20]
        break;
 80042a8:	e00c      	b.n	80042c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042aa:	f7fe f8cd 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 80042ae:	6178      	str	r0, [r7, #20]
        break;
 80042b0:	e008      	b.n	80042c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b6:	617b      	str	r3, [r7, #20]
        break;
 80042b8:	e004      	b.n	80042c4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	76bb      	strb	r3, [r7, #26]
        break;
 80042c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d074      	beq.n	80043b4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	005a      	lsls	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	085b      	lsrs	r3, r3, #1
 80042d4:	441a      	add	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	fbb2 f3f3 	udiv	r3, r2, r3
 80042de:	b29b      	uxth	r3, r3
 80042e0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b0f      	cmp	r3, #15
 80042e6:	d916      	bls.n	8004316 <UART_SetConfig+0x45a>
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ee:	d212      	bcs.n	8004316 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f023 030f 	bic.w	r3, r3, #15
 80042f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	b29a      	uxth	r2, r3
 8004306:	89fb      	ldrh	r3, [r7, #14]
 8004308:	4313      	orrs	r3, r2
 800430a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	89fa      	ldrh	r2, [r7, #14]
 8004312:	60da      	str	r2, [r3, #12]
 8004314:	e04e      	b.n	80043b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	76bb      	strb	r3, [r7, #26]
 800431a:	e04b      	b.n	80043b4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800431c:	7efb      	ldrb	r3, [r7, #27]
 800431e:	2b08      	cmp	r3, #8
 8004320:	d827      	bhi.n	8004372 <UART_SetConfig+0x4b6>
 8004322:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <UART_SetConfig+0x46c>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	0800434d 	.word	0x0800434d
 800432c:	08004355 	.word	0x08004355
 8004330:	0800435d 	.word	0x0800435d
 8004334:	08004373 	.word	0x08004373
 8004338:	08004363 	.word	0x08004363
 800433c:	08004373 	.word	0x08004373
 8004340:	08004373 	.word	0x08004373
 8004344:	08004373 	.word	0x08004373
 8004348:	0800436b 	.word	0x0800436b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800434c:	f7fe f912 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8004350:	6178      	str	r0, [r7, #20]
        break;
 8004352:	e013      	b.n	800437c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7fe f924 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8004358:	6178      	str	r0, [r7, #20]
        break;
 800435a:	e00f      	b.n	800437c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800435c:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <UART_SetConfig+0x510>)
 800435e:	617b      	str	r3, [r7, #20]
        break;
 8004360:	e00c      	b.n	800437c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004362:	f7fe f871 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8004366:	6178      	str	r0, [r7, #20]
        break;
 8004368:	e008      	b.n	800437c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436e:	617b      	str	r3, [r7, #20]
        break;
 8004370:	e004      	b.n	800437c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	76bb      	strb	r3, [r7, #26]
        break;
 800437a:	bf00      	nop
    }

    if (pclk != 0U)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d018      	beq.n	80043b4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	085a      	lsrs	r2, r3, #1
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	441a      	add	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	b29b      	uxth	r3, r3
 8004396:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b0f      	cmp	r3, #15
 800439c:	d908      	bls.n	80043b0 <UART_SetConfig+0x4f4>
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d204      	bcs.n	80043b0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	e001      	b.n	80043b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80043c0:	7ebb      	ldrb	r3, [r7, #26]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80043cc:	00f42400 	.word	0x00f42400

080043d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01a      	beq.n	80044e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ce:	d10a      	bne.n	80044e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
  }
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af02      	add	r7, sp, #8
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004522:	f7fc ff15 	bl	8001350 <HAL_GetTick>
 8004526:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b08      	cmp	r3, #8
 8004534:	d10e      	bne.n	8004554 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004536:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f82a 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e020      	b.n	8004596 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d10e      	bne.n	8004580 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004562:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f814 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e00a      	b.n	8004596 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ae:	e05d      	b.n	800466c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d059      	beq.n	800466c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b8:	f7fc feca 	bl	8001350 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <UART_WaitOnFlagUntilTimeout+0x30>
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11b      	bne.n	8004606 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e042      	b.n	800468c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02b      	beq.n	800466c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004622:	d123      	bne.n	800466c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800462c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800463c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e00f      	b.n	800468c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4013      	ands	r3, r2
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	429a      	cmp	r2, r3
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	429a      	cmp	r2, r3
 8004688:	d092      	beq.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff fbd8 	bl	8003ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004716:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fb ff45 	bl	80005b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800472a:	bf00      	nop
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004740:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004746:	2b22      	cmp	r3, #34	; 0x22
 8004748:	d13a      	bne.n	80047c0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004750:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004752:	89bb      	ldrh	r3, [r7, #12]
 8004754:	b2d9      	uxtb	r1, r3
 8004756:	89fb      	ldrh	r3, [r7, #14]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	400a      	ands	r2, r1
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d123      	bne.n	80047d4 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800479a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fb fed9 	bl	8000570 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047be:	e009      	b.n	80047d4 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	8b1b      	ldrh	r3, [r3, #24]
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0208 	orr.w	r2, r2, #8
 80047d0:	b292      	uxth	r2, r2
 80047d2:	831a      	strh	r2, [r3, #24]
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047ea:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047f0:	2b22      	cmp	r3, #34	; 0x22
 80047f2:	d13a      	bne.n	800486a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047fa:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004800:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004802:	89ba      	ldrh	r2, [r7, #12]
 8004804:	89fb      	ldrh	r3, [r7, #14]
 8004806:	4013      	ands	r3, r2
 8004808:	b29a      	uxth	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004812:	1c9a      	adds	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d123      	bne.n	800487e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004844:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fb fe84 	bl	8000570 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004868:	e009      	b.n	800487e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	8b1b      	ldrh	r3, [r3, #24]
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0208 	orr.w	r2, r2, #8
 800487a:	b292      	uxth	r2, r2
 800487c:	831a      	strh	r2, [r3, #24]
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <__assert_func>:
 800489c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800489e:	461c      	mov	r4, r3
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <__assert_func+0x2c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4605      	mov	r5, r0
 80048a6:	68d8      	ldr	r0, [r3, #12]
 80048a8:	b152      	cbz	r2, 80048c0 <__assert_func+0x24>
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <__assert_func+0x30>)
 80048ac:	9100      	str	r1, [sp, #0]
 80048ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80048b2:	4907      	ldr	r1, [pc, #28]	; (80048d0 <__assert_func+0x34>)
 80048b4:	462b      	mov	r3, r5
 80048b6:	4622      	mov	r2, r4
 80048b8:	f000 f814 	bl	80048e4 <fiprintf>
 80048bc:	f000 fc98 	bl	80051f0 <abort>
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <__assert_func+0x38>)
 80048c2:	461a      	mov	r2, r3
 80048c4:	e7f2      	b.n	80048ac <__assert_func+0x10>
 80048c6:	bf00      	nop
 80048c8:	2000000c 	.word	0x2000000c
 80048cc:	08005966 	.word	0x08005966
 80048d0:	08005973 	.word	0x08005973
 80048d4:	080059a1 	.word	0x080059a1

080048d8 <__errno>:
 80048d8:	4b01      	ldr	r3, [pc, #4]	; (80048e0 <__errno+0x8>)
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	2000000c 	.word	0x2000000c

080048e4 <fiprintf>:
 80048e4:	b40e      	push	{r1, r2, r3}
 80048e6:	b503      	push	{r0, r1, lr}
 80048e8:	4601      	mov	r1, r0
 80048ea:	ab03      	add	r3, sp, #12
 80048ec:	4805      	ldr	r0, [pc, #20]	; (8004904 <fiprintf+0x20>)
 80048ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80048f2:	6800      	ldr	r0, [r0, #0]
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	f000 f90d 	bl	8004b14 <_vfiprintf_r>
 80048fa:	b002      	add	sp, #8
 80048fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004900:	b003      	add	sp, #12
 8004902:	4770      	bx	lr
 8004904:	2000000c 	.word	0x2000000c

08004908 <__libc_init_array>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	4e0d      	ldr	r6, [pc, #52]	; (8004940 <__libc_init_array+0x38>)
 800490c:	4c0d      	ldr	r4, [pc, #52]	; (8004944 <__libc_init_array+0x3c>)
 800490e:	1ba4      	subs	r4, r4, r6
 8004910:	10a4      	asrs	r4, r4, #2
 8004912:	2500      	movs	r5, #0
 8004914:	42a5      	cmp	r5, r4
 8004916:	d109      	bne.n	800492c <__libc_init_array+0x24>
 8004918:	4e0b      	ldr	r6, [pc, #44]	; (8004948 <__libc_init_array+0x40>)
 800491a:	4c0c      	ldr	r4, [pc, #48]	; (800494c <__libc_init_array+0x44>)
 800491c:	f000 ff40 	bl	80057a0 <_init>
 8004920:	1ba4      	subs	r4, r4, r6
 8004922:	10a4      	asrs	r4, r4, #2
 8004924:	2500      	movs	r5, #0
 8004926:	42a5      	cmp	r5, r4
 8004928:	d105      	bne.n	8004936 <__libc_init_array+0x2e>
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004930:	4798      	blx	r3
 8004932:	3501      	adds	r5, #1
 8004934:	e7ee      	b.n	8004914 <__libc_init_array+0xc>
 8004936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800493a:	4798      	blx	r3
 800493c:	3501      	adds	r5, #1
 800493e:	e7f2      	b.n	8004926 <__libc_init_array+0x1e>
 8004940:	08005a44 	.word	0x08005a44
 8004944:	08005a44 	.word	0x08005a44
 8004948:	08005a44 	.word	0x08005a44
 800494c:	08005a48 	.word	0x08005a48

08004950 <malloc>:
 8004950:	4b02      	ldr	r3, [pc, #8]	; (800495c <malloc+0xc>)
 8004952:	4601      	mov	r1, r0
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	f000 b859 	b.w	8004a0c <_malloc_r>
 800495a:	bf00      	nop
 800495c:	2000000c 	.word	0x2000000c

08004960 <memset>:
 8004960:	4402      	add	r2, r0
 8004962:	4603      	mov	r3, r0
 8004964:	4293      	cmp	r3, r2
 8004966:	d100      	bne.n	800496a <memset+0xa>
 8004968:	4770      	bx	lr
 800496a:	f803 1b01 	strb.w	r1, [r3], #1
 800496e:	e7f9      	b.n	8004964 <memset+0x4>

08004970 <_free_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4605      	mov	r5, r0
 8004974:	2900      	cmp	r1, #0
 8004976:	d045      	beq.n	8004a04 <_free_r+0x94>
 8004978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800497c:	1f0c      	subs	r4, r1, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	bfb8      	it	lt
 8004982:	18e4      	addlt	r4, r4, r3
 8004984:	f000 fe1a 	bl	80055bc <__malloc_lock>
 8004988:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <_free_r+0x98>)
 800498a:	6813      	ldr	r3, [r2, #0]
 800498c:	4610      	mov	r0, r2
 800498e:	b933      	cbnz	r3, 800499e <_free_r+0x2e>
 8004990:	6063      	str	r3, [r4, #4]
 8004992:	6014      	str	r4, [r2, #0]
 8004994:	4628      	mov	r0, r5
 8004996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800499a:	f000 be10 	b.w	80055be <__malloc_unlock>
 800499e:	42a3      	cmp	r3, r4
 80049a0:	d90c      	bls.n	80049bc <_free_r+0x4c>
 80049a2:	6821      	ldr	r1, [r4, #0]
 80049a4:	1862      	adds	r2, r4, r1
 80049a6:	4293      	cmp	r3, r2
 80049a8:	bf04      	itt	eq
 80049aa:	681a      	ldreq	r2, [r3, #0]
 80049ac:	685b      	ldreq	r3, [r3, #4]
 80049ae:	6063      	str	r3, [r4, #4]
 80049b0:	bf04      	itt	eq
 80049b2:	1852      	addeq	r2, r2, r1
 80049b4:	6022      	streq	r2, [r4, #0]
 80049b6:	6004      	str	r4, [r0, #0]
 80049b8:	e7ec      	b.n	8004994 <_free_r+0x24>
 80049ba:	4613      	mov	r3, r2
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	b10a      	cbz	r2, 80049c4 <_free_r+0x54>
 80049c0:	42a2      	cmp	r2, r4
 80049c2:	d9fa      	bls.n	80049ba <_free_r+0x4a>
 80049c4:	6819      	ldr	r1, [r3, #0]
 80049c6:	1858      	adds	r0, r3, r1
 80049c8:	42a0      	cmp	r0, r4
 80049ca:	d10b      	bne.n	80049e4 <_free_r+0x74>
 80049cc:	6820      	ldr	r0, [r4, #0]
 80049ce:	4401      	add	r1, r0
 80049d0:	1858      	adds	r0, r3, r1
 80049d2:	4282      	cmp	r2, r0
 80049d4:	6019      	str	r1, [r3, #0]
 80049d6:	d1dd      	bne.n	8004994 <_free_r+0x24>
 80049d8:	6810      	ldr	r0, [r2, #0]
 80049da:	6852      	ldr	r2, [r2, #4]
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	4401      	add	r1, r0
 80049e0:	6019      	str	r1, [r3, #0]
 80049e2:	e7d7      	b.n	8004994 <_free_r+0x24>
 80049e4:	d902      	bls.n	80049ec <_free_r+0x7c>
 80049e6:	230c      	movs	r3, #12
 80049e8:	602b      	str	r3, [r5, #0]
 80049ea:	e7d3      	b.n	8004994 <_free_r+0x24>
 80049ec:	6820      	ldr	r0, [r4, #0]
 80049ee:	1821      	adds	r1, r4, r0
 80049f0:	428a      	cmp	r2, r1
 80049f2:	bf04      	itt	eq
 80049f4:	6811      	ldreq	r1, [r2, #0]
 80049f6:	6852      	ldreq	r2, [r2, #4]
 80049f8:	6062      	str	r2, [r4, #4]
 80049fa:	bf04      	itt	eq
 80049fc:	1809      	addeq	r1, r1, r0
 80049fe:	6021      	streq	r1, [r4, #0]
 8004a00:	605c      	str	r4, [r3, #4]
 8004a02:	e7c7      	b.n	8004994 <_free_r+0x24>
 8004a04:	bd38      	pop	{r3, r4, r5, pc}
 8004a06:	bf00      	nop
 8004a08:	20000094 	.word	0x20000094

08004a0c <_malloc_r>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	1ccd      	adds	r5, r1, #3
 8004a10:	f025 0503 	bic.w	r5, r5, #3
 8004a14:	3508      	adds	r5, #8
 8004a16:	2d0c      	cmp	r5, #12
 8004a18:	bf38      	it	cc
 8004a1a:	250c      	movcc	r5, #12
 8004a1c:	2d00      	cmp	r5, #0
 8004a1e:	4606      	mov	r6, r0
 8004a20:	db01      	blt.n	8004a26 <_malloc_r+0x1a>
 8004a22:	42a9      	cmp	r1, r5
 8004a24:	d903      	bls.n	8004a2e <_malloc_r+0x22>
 8004a26:	230c      	movs	r3, #12
 8004a28:	6033      	str	r3, [r6, #0]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	bd70      	pop	{r4, r5, r6, pc}
 8004a2e:	f000 fdc5 	bl	80055bc <__malloc_lock>
 8004a32:	4a21      	ldr	r2, [pc, #132]	; (8004ab8 <_malloc_r+0xac>)
 8004a34:	6814      	ldr	r4, [r2, #0]
 8004a36:	4621      	mov	r1, r4
 8004a38:	b991      	cbnz	r1, 8004a60 <_malloc_r+0x54>
 8004a3a:	4c20      	ldr	r4, [pc, #128]	; (8004abc <_malloc_r+0xb0>)
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	b91b      	cbnz	r3, 8004a48 <_malloc_r+0x3c>
 8004a40:	4630      	mov	r0, r6
 8004a42:	f000 fb05 	bl	8005050 <_sbrk_r>
 8004a46:	6020      	str	r0, [r4, #0]
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f000 fb00 	bl	8005050 <_sbrk_r>
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	d124      	bne.n	8004a9e <_malloc_r+0x92>
 8004a54:	230c      	movs	r3, #12
 8004a56:	6033      	str	r3, [r6, #0]
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f000 fdb0 	bl	80055be <__malloc_unlock>
 8004a5e:	e7e4      	b.n	8004a2a <_malloc_r+0x1e>
 8004a60:	680b      	ldr	r3, [r1, #0]
 8004a62:	1b5b      	subs	r3, r3, r5
 8004a64:	d418      	bmi.n	8004a98 <_malloc_r+0x8c>
 8004a66:	2b0b      	cmp	r3, #11
 8004a68:	d90f      	bls.n	8004a8a <_malloc_r+0x7e>
 8004a6a:	600b      	str	r3, [r1, #0]
 8004a6c:	50cd      	str	r5, [r1, r3]
 8004a6e:	18cc      	adds	r4, r1, r3
 8004a70:	4630      	mov	r0, r6
 8004a72:	f000 fda4 	bl	80055be <__malloc_unlock>
 8004a76:	f104 000b 	add.w	r0, r4, #11
 8004a7a:	1d23      	adds	r3, r4, #4
 8004a7c:	f020 0007 	bic.w	r0, r0, #7
 8004a80:	1ac3      	subs	r3, r0, r3
 8004a82:	d0d3      	beq.n	8004a2c <_malloc_r+0x20>
 8004a84:	425a      	negs	r2, r3
 8004a86:	50e2      	str	r2, [r4, r3]
 8004a88:	e7d0      	b.n	8004a2c <_malloc_r+0x20>
 8004a8a:	428c      	cmp	r4, r1
 8004a8c:	684b      	ldr	r3, [r1, #4]
 8004a8e:	bf16      	itet	ne
 8004a90:	6063      	strne	r3, [r4, #4]
 8004a92:	6013      	streq	r3, [r2, #0]
 8004a94:	460c      	movne	r4, r1
 8004a96:	e7eb      	b.n	8004a70 <_malloc_r+0x64>
 8004a98:	460c      	mov	r4, r1
 8004a9a:	6849      	ldr	r1, [r1, #4]
 8004a9c:	e7cc      	b.n	8004a38 <_malloc_r+0x2c>
 8004a9e:	1cc4      	adds	r4, r0, #3
 8004aa0:	f024 0403 	bic.w	r4, r4, #3
 8004aa4:	42a0      	cmp	r0, r4
 8004aa6:	d005      	beq.n	8004ab4 <_malloc_r+0xa8>
 8004aa8:	1a21      	subs	r1, r4, r0
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f000 fad0 	bl	8005050 <_sbrk_r>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d0cf      	beq.n	8004a54 <_malloc_r+0x48>
 8004ab4:	6025      	str	r5, [r4, #0]
 8004ab6:	e7db      	b.n	8004a70 <_malloc_r+0x64>
 8004ab8:	20000094 	.word	0x20000094
 8004abc:	20000098 	.word	0x20000098

08004ac0 <__sfputc_r>:
 8004ac0:	6893      	ldr	r3, [r2, #8]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	b410      	push	{r4}
 8004ac8:	6093      	str	r3, [r2, #8]
 8004aca:	da08      	bge.n	8004ade <__sfputc_r+0x1e>
 8004acc:	6994      	ldr	r4, [r2, #24]
 8004ace:	42a3      	cmp	r3, r4
 8004ad0:	db01      	blt.n	8004ad6 <__sfputc_r+0x16>
 8004ad2:	290a      	cmp	r1, #10
 8004ad4:	d103      	bne.n	8004ade <__sfputc_r+0x1e>
 8004ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ada:	f000 bac9 	b.w	8005070 <__swbuf_r>
 8004ade:	6813      	ldr	r3, [r2, #0]
 8004ae0:	1c58      	adds	r0, r3, #1
 8004ae2:	6010      	str	r0, [r2, #0]
 8004ae4:	7019      	strb	r1, [r3, #0]
 8004ae6:	4608      	mov	r0, r1
 8004ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <__sfputs_r>:
 8004aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af0:	4606      	mov	r6, r0
 8004af2:	460f      	mov	r7, r1
 8004af4:	4614      	mov	r4, r2
 8004af6:	18d5      	adds	r5, r2, r3
 8004af8:	42ac      	cmp	r4, r5
 8004afa:	d101      	bne.n	8004b00 <__sfputs_r+0x12>
 8004afc:	2000      	movs	r0, #0
 8004afe:	e007      	b.n	8004b10 <__sfputs_r+0x22>
 8004b00:	463a      	mov	r2, r7
 8004b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b06:	4630      	mov	r0, r6
 8004b08:	f7ff ffda 	bl	8004ac0 <__sfputc_r>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d1f3      	bne.n	8004af8 <__sfputs_r+0xa>
 8004b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b14 <_vfiprintf_r>:
 8004b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b18:	460c      	mov	r4, r1
 8004b1a:	b09d      	sub	sp, #116	; 0x74
 8004b1c:	4617      	mov	r7, r2
 8004b1e:	461d      	mov	r5, r3
 8004b20:	4606      	mov	r6, r0
 8004b22:	b118      	cbz	r0, 8004b2c <_vfiprintf_r+0x18>
 8004b24:	6983      	ldr	r3, [r0, #24]
 8004b26:	b90b      	cbnz	r3, 8004b2c <_vfiprintf_r+0x18>
 8004b28:	f000 fc5a 	bl	80053e0 <__sinit>
 8004b2c:	4b7c      	ldr	r3, [pc, #496]	; (8004d20 <_vfiprintf_r+0x20c>)
 8004b2e:	429c      	cmp	r4, r3
 8004b30:	d158      	bne.n	8004be4 <_vfiprintf_r+0xd0>
 8004b32:	6874      	ldr	r4, [r6, #4]
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	0718      	lsls	r0, r3, #28
 8004b38:	d55e      	bpl.n	8004bf8 <_vfiprintf_r+0xe4>
 8004b3a:	6923      	ldr	r3, [r4, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d05b      	beq.n	8004bf8 <_vfiprintf_r+0xe4>
 8004b40:	2300      	movs	r3, #0
 8004b42:	9309      	str	r3, [sp, #36]	; 0x24
 8004b44:	2320      	movs	r3, #32
 8004b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b4a:	2330      	movs	r3, #48	; 0x30
 8004b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b50:	9503      	str	r5, [sp, #12]
 8004b52:	f04f 0b01 	mov.w	fp, #1
 8004b56:	46b8      	mov	r8, r7
 8004b58:	4645      	mov	r5, r8
 8004b5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b5e:	b10b      	cbz	r3, 8004b64 <_vfiprintf_r+0x50>
 8004b60:	2b25      	cmp	r3, #37	; 0x25
 8004b62:	d154      	bne.n	8004c0e <_vfiprintf_r+0xfa>
 8004b64:	ebb8 0a07 	subs.w	sl, r8, r7
 8004b68:	d00b      	beq.n	8004b82 <_vfiprintf_r+0x6e>
 8004b6a:	4653      	mov	r3, sl
 8004b6c:	463a      	mov	r2, r7
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4630      	mov	r0, r6
 8004b72:	f7ff ffbc 	bl	8004aee <__sfputs_r>
 8004b76:	3001      	adds	r0, #1
 8004b78:	f000 80c2 	beq.w	8004d00 <_vfiprintf_r+0x1ec>
 8004b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7e:	4453      	add	r3, sl
 8004b80:	9309      	str	r3, [sp, #36]	; 0x24
 8004b82:	f898 3000 	ldrb.w	r3, [r8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80ba 	beq.w	8004d00 <_vfiprintf_r+0x1ec>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b96:	9304      	str	r3, [sp, #16]
 8004b98:	9307      	str	r3, [sp, #28]
 8004b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004ba0:	46a8      	mov	r8, r5
 8004ba2:	2205      	movs	r2, #5
 8004ba4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004ba8:	485e      	ldr	r0, [pc, #376]	; (8004d24 <_vfiprintf_r+0x210>)
 8004baa:	f7fb fb11 	bl	80001d0 <memchr>
 8004bae:	9b04      	ldr	r3, [sp, #16]
 8004bb0:	bb78      	cbnz	r0, 8004c12 <_vfiprintf_r+0xfe>
 8004bb2:	06d9      	lsls	r1, r3, #27
 8004bb4:	bf44      	itt	mi
 8004bb6:	2220      	movmi	r2, #32
 8004bb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bbc:	071a      	lsls	r2, r3, #28
 8004bbe:	bf44      	itt	mi
 8004bc0:	222b      	movmi	r2, #43	; 0x2b
 8004bc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bc6:	782a      	ldrb	r2, [r5, #0]
 8004bc8:	2a2a      	cmp	r2, #42	; 0x2a
 8004bca:	d02a      	beq.n	8004c22 <_vfiprintf_r+0x10e>
 8004bcc:	9a07      	ldr	r2, [sp, #28]
 8004bce:	46a8      	mov	r8, r5
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	250a      	movs	r5, #10
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bda:	3b30      	subs	r3, #48	; 0x30
 8004bdc:	2b09      	cmp	r3, #9
 8004bde:	d969      	bls.n	8004cb4 <_vfiprintf_r+0x1a0>
 8004be0:	b360      	cbz	r0, 8004c3c <_vfiprintf_r+0x128>
 8004be2:	e024      	b.n	8004c2e <_vfiprintf_r+0x11a>
 8004be4:	4b50      	ldr	r3, [pc, #320]	; (8004d28 <_vfiprintf_r+0x214>)
 8004be6:	429c      	cmp	r4, r3
 8004be8:	d101      	bne.n	8004bee <_vfiprintf_r+0xda>
 8004bea:	68b4      	ldr	r4, [r6, #8]
 8004bec:	e7a2      	b.n	8004b34 <_vfiprintf_r+0x20>
 8004bee:	4b4f      	ldr	r3, [pc, #316]	; (8004d2c <_vfiprintf_r+0x218>)
 8004bf0:	429c      	cmp	r4, r3
 8004bf2:	bf08      	it	eq
 8004bf4:	68f4      	ldreq	r4, [r6, #12]
 8004bf6:	e79d      	b.n	8004b34 <_vfiprintf_r+0x20>
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f000 fa8a 	bl	8005114 <__swsetup_r>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d09d      	beq.n	8004b40 <_vfiprintf_r+0x2c>
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	b01d      	add	sp, #116	; 0x74
 8004c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c0e:	46a8      	mov	r8, r5
 8004c10:	e7a2      	b.n	8004b58 <_vfiprintf_r+0x44>
 8004c12:	4a44      	ldr	r2, [pc, #272]	; (8004d24 <_vfiprintf_r+0x210>)
 8004c14:	1a80      	subs	r0, r0, r2
 8004c16:	fa0b f000 	lsl.w	r0, fp, r0
 8004c1a:	4318      	orrs	r0, r3
 8004c1c:	9004      	str	r0, [sp, #16]
 8004c1e:	4645      	mov	r5, r8
 8004c20:	e7be      	b.n	8004ba0 <_vfiprintf_r+0x8c>
 8004c22:	9a03      	ldr	r2, [sp, #12]
 8004c24:	1d11      	adds	r1, r2, #4
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	9103      	str	r1, [sp, #12]
 8004c2a:	2a00      	cmp	r2, #0
 8004c2c:	db01      	blt.n	8004c32 <_vfiprintf_r+0x11e>
 8004c2e:	9207      	str	r2, [sp, #28]
 8004c30:	e004      	b.n	8004c3c <_vfiprintf_r+0x128>
 8004c32:	4252      	negs	r2, r2
 8004c34:	f043 0302 	orr.w	r3, r3, #2
 8004c38:	9207      	str	r2, [sp, #28]
 8004c3a:	9304      	str	r3, [sp, #16]
 8004c3c:	f898 3000 	ldrb.w	r3, [r8]
 8004c40:	2b2e      	cmp	r3, #46	; 0x2e
 8004c42:	d10e      	bne.n	8004c62 <_vfiprintf_r+0x14e>
 8004c44:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004c48:	2b2a      	cmp	r3, #42	; 0x2a
 8004c4a:	d138      	bne.n	8004cbe <_vfiprintf_r+0x1aa>
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	1d1a      	adds	r2, r3, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	9203      	str	r2, [sp, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bfb8      	it	lt
 8004c58:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c5c:	f108 0802 	add.w	r8, r8, #2
 8004c60:	9305      	str	r3, [sp, #20]
 8004c62:	4d33      	ldr	r5, [pc, #204]	; (8004d30 <_vfiprintf_r+0x21c>)
 8004c64:	f898 1000 	ldrb.w	r1, [r8]
 8004c68:	2203      	movs	r2, #3
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f7fb fab0 	bl	80001d0 <memchr>
 8004c70:	b140      	cbz	r0, 8004c84 <_vfiprintf_r+0x170>
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	1b40      	subs	r0, r0, r5
 8004c76:	fa03 f000 	lsl.w	r0, r3, r0
 8004c7a:	9b04      	ldr	r3, [sp, #16]
 8004c7c:	4303      	orrs	r3, r0
 8004c7e:	f108 0801 	add.w	r8, r8, #1
 8004c82:	9304      	str	r3, [sp, #16]
 8004c84:	f898 1000 	ldrb.w	r1, [r8]
 8004c88:	482a      	ldr	r0, [pc, #168]	; (8004d34 <_vfiprintf_r+0x220>)
 8004c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c8e:	2206      	movs	r2, #6
 8004c90:	f108 0701 	add.w	r7, r8, #1
 8004c94:	f7fb fa9c 	bl	80001d0 <memchr>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d037      	beq.n	8004d0c <_vfiprintf_r+0x1f8>
 8004c9c:	4b26      	ldr	r3, [pc, #152]	; (8004d38 <_vfiprintf_r+0x224>)
 8004c9e:	bb1b      	cbnz	r3, 8004ce8 <_vfiprintf_r+0x1d4>
 8004ca0:	9b03      	ldr	r3, [sp, #12]
 8004ca2:	3307      	adds	r3, #7
 8004ca4:	f023 0307 	bic.w	r3, r3, #7
 8004ca8:	3308      	adds	r3, #8
 8004caa:	9303      	str	r3, [sp, #12]
 8004cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cae:	444b      	add	r3, r9
 8004cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb2:	e750      	b.n	8004b56 <_vfiprintf_r+0x42>
 8004cb4:	fb05 3202 	mla	r2, r5, r2, r3
 8004cb8:	2001      	movs	r0, #1
 8004cba:	4688      	mov	r8, r1
 8004cbc:	e78a      	b.n	8004bd4 <_vfiprintf_r+0xc0>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f108 0801 	add.w	r8, r8, #1
 8004cc4:	9305      	str	r3, [sp, #20]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	250a      	movs	r5, #10
 8004cca:	4640      	mov	r0, r8
 8004ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd0:	3a30      	subs	r2, #48	; 0x30
 8004cd2:	2a09      	cmp	r2, #9
 8004cd4:	d903      	bls.n	8004cde <_vfiprintf_r+0x1ca>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0c3      	beq.n	8004c62 <_vfiprintf_r+0x14e>
 8004cda:	9105      	str	r1, [sp, #20]
 8004cdc:	e7c1      	b.n	8004c62 <_vfiprintf_r+0x14e>
 8004cde:	fb05 2101 	mla	r1, r5, r1, r2
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	e7f0      	b.n	8004cca <_vfiprintf_r+0x1b6>
 8004ce8:	ab03      	add	r3, sp, #12
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	4622      	mov	r2, r4
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <_vfiprintf_r+0x228>)
 8004cf0:	a904      	add	r1, sp, #16
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f3af 8000 	nop.w
 8004cf8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004cfc:	4681      	mov	r9, r0
 8004cfe:	d1d5      	bne.n	8004cac <_vfiprintf_r+0x198>
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	065b      	lsls	r3, r3, #25
 8004d04:	f53f af7e 	bmi.w	8004c04 <_vfiprintf_r+0xf0>
 8004d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d0a:	e77d      	b.n	8004c08 <_vfiprintf_r+0xf4>
 8004d0c:	ab03      	add	r3, sp, #12
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	4622      	mov	r2, r4
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <_vfiprintf_r+0x228>)
 8004d14:	a904      	add	r1, sp, #16
 8004d16:	4630      	mov	r0, r6
 8004d18:	f000 f888 	bl	8004e2c <_printf_i>
 8004d1c:	e7ec      	b.n	8004cf8 <_vfiprintf_r+0x1e4>
 8004d1e:	bf00      	nop
 8004d20:	080059fc 	.word	0x080059fc
 8004d24:	080059a8 	.word	0x080059a8
 8004d28:	08005a1c 	.word	0x08005a1c
 8004d2c:	080059dc 	.word	0x080059dc
 8004d30:	080059ae 	.word	0x080059ae
 8004d34:	080059b2 	.word	0x080059b2
 8004d38:	00000000 	.word	0x00000000
 8004d3c:	08004aef 	.word	0x08004aef

08004d40 <_printf_common>:
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	4691      	mov	r9, r2
 8004d46:	461f      	mov	r7, r3
 8004d48:	688a      	ldr	r2, [r1, #8]
 8004d4a:	690b      	ldr	r3, [r1, #16]
 8004d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d50:	4293      	cmp	r3, r2
 8004d52:	bfb8      	it	lt
 8004d54:	4613      	movlt	r3, r2
 8004d56:	f8c9 3000 	str.w	r3, [r9]
 8004d5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d5e:	4606      	mov	r6, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	b112      	cbz	r2, 8004d6a <_printf_common+0x2a>
 8004d64:	3301      	adds	r3, #1
 8004d66:	f8c9 3000 	str.w	r3, [r9]
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	0699      	lsls	r1, r3, #26
 8004d6e:	bf42      	ittt	mi
 8004d70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d74:	3302      	addmi	r3, #2
 8004d76:	f8c9 3000 	strmi.w	r3, [r9]
 8004d7a:	6825      	ldr	r5, [r4, #0]
 8004d7c:	f015 0506 	ands.w	r5, r5, #6
 8004d80:	d107      	bne.n	8004d92 <_printf_common+0x52>
 8004d82:	f104 0a19 	add.w	sl, r4, #25
 8004d86:	68e3      	ldr	r3, [r4, #12]
 8004d88:	f8d9 2000 	ldr.w	r2, [r9]
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	42ab      	cmp	r3, r5
 8004d90:	dc28      	bgt.n	8004de4 <_printf_common+0xa4>
 8004d92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d96:	6822      	ldr	r2, [r4, #0]
 8004d98:	3300      	adds	r3, #0
 8004d9a:	bf18      	it	ne
 8004d9c:	2301      	movne	r3, #1
 8004d9e:	0692      	lsls	r2, r2, #26
 8004da0:	d42d      	bmi.n	8004dfe <_printf_common+0xbe>
 8004da2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004da6:	4639      	mov	r1, r7
 8004da8:	4630      	mov	r0, r6
 8004daa:	47c0      	blx	r8
 8004dac:	3001      	adds	r0, #1
 8004dae:	d020      	beq.n	8004df2 <_printf_common+0xb2>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	68e5      	ldr	r5, [r4, #12]
 8004db4:	f8d9 2000 	ldr.w	r2, [r9]
 8004db8:	f003 0306 	and.w	r3, r3, #6
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	bf08      	it	eq
 8004dc0:	1aad      	subeq	r5, r5, r2
 8004dc2:	68a3      	ldr	r3, [r4, #8]
 8004dc4:	6922      	ldr	r2, [r4, #16]
 8004dc6:	bf0c      	ite	eq
 8004dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dcc:	2500      	movne	r5, #0
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	bfc4      	itt	gt
 8004dd2:	1a9b      	subgt	r3, r3, r2
 8004dd4:	18ed      	addgt	r5, r5, r3
 8004dd6:	f04f 0900 	mov.w	r9, #0
 8004dda:	341a      	adds	r4, #26
 8004ddc:	454d      	cmp	r5, r9
 8004dde:	d11a      	bne.n	8004e16 <_printf_common+0xd6>
 8004de0:	2000      	movs	r0, #0
 8004de2:	e008      	b.n	8004df6 <_printf_common+0xb6>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4652      	mov	r2, sl
 8004de8:	4639      	mov	r1, r7
 8004dea:	4630      	mov	r0, r6
 8004dec:	47c0      	blx	r8
 8004dee:	3001      	adds	r0, #1
 8004df0:	d103      	bne.n	8004dfa <_printf_common+0xba>
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfa:	3501      	adds	r5, #1
 8004dfc:	e7c3      	b.n	8004d86 <_printf_common+0x46>
 8004dfe:	18e1      	adds	r1, r4, r3
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	2030      	movs	r0, #48	; 0x30
 8004e04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e08:	4422      	add	r2, r4
 8004e0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e12:	3302      	adds	r3, #2
 8004e14:	e7c5      	b.n	8004da2 <_printf_common+0x62>
 8004e16:	2301      	movs	r3, #1
 8004e18:	4622      	mov	r2, r4
 8004e1a:	4639      	mov	r1, r7
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	47c0      	blx	r8
 8004e20:	3001      	adds	r0, #1
 8004e22:	d0e6      	beq.n	8004df2 <_printf_common+0xb2>
 8004e24:	f109 0901 	add.w	r9, r9, #1
 8004e28:	e7d8      	b.n	8004ddc <_printf_common+0x9c>
	...

08004e2c <_printf_i>:
 8004e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e34:	460c      	mov	r4, r1
 8004e36:	7e09      	ldrb	r1, [r1, #24]
 8004e38:	b085      	sub	sp, #20
 8004e3a:	296e      	cmp	r1, #110	; 0x6e
 8004e3c:	4617      	mov	r7, r2
 8004e3e:	4606      	mov	r6, r0
 8004e40:	4698      	mov	r8, r3
 8004e42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e44:	f000 80b3 	beq.w	8004fae <_printf_i+0x182>
 8004e48:	d822      	bhi.n	8004e90 <_printf_i+0x64>
 8004e4a:	2963      	cmp	r1, #99	; 0x63
 8004e4c:	d036      	beq.n	8004ebc <_printf_i+0x90>
 8004e4e:	d80a      	bhi.n	8004e66 <_printf_i+0x3a>
 8004e50:	2900      	cmp	r1, #0
 8004e52:	f000 80b9 	beq.w	8004fc8 <_printf_i+0x19c>
 8004e56:	2958      	cmp	r1, #88	; 0x58
 8004e58:	f000 8083 	beq.w	8004f62 <_printf_i+0x136>
 8004e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e64:	e032      	b.n	8004ecc <_printf_i+0xa0>
 8004e66:	2964      	cmp	r1, #100	; 0x64
 8004e68:	d001      	beq.n	8004e6e <_printf_i+0x42>
 8004e6a:	2969      	cmp	r1, #105	; 0x69
 8004e6c:	d1f6      	bne.n	8004e5c <_printf_i+0x30>
 8004e6e:	6820      	ldr	r0, [r4, #0]
 8004e70:	6813      	ldr	r3, [r2, #0]
 8004e72:	0605      	lsls	r5, r0, #24
 8004e74:	f103 0104 	add.w	r1, r3, #4
 8004e78:	d52a      	bpl.n	8004ed0 <_printf_i+0xa4>
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6011      	str	r1, [r2, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da03      	bge.n	8004e8a <_printf_i+0x5e>
 8004e82:	222d      	movs	r2, #45	; 0x2d
 8004e84:	425b      	negs	r3, r3
 8004e86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e8a:	486f      	ldr	r0, [pc, #444]	; (8005048 <_printf_i+0x21c>)
 8004e8c:	220a      	movs	r2, #10
 8004e8e:	e039      	b.n	8004f04 <_printf_i+0xd8>
 8004e90:	2973      	cmp	r1, #115	; 0x73
 8004e92:	f000 809d 	beq.w	8004fd0 <_printf_i+0x1a4>
 8004e96:	d808      	bhi.n	8004eaa <_printf_i+0x7e>
 8004e98:	296f      	cmp	r1, #111	; 0x6f
 8004e9a:	d020      	beq.n	8004ede <_printf_i+0xb2>
 8004e9c:	2970      	cmp	r1, #112	; 0x70
 8004e9e:	d1dd      	bne.n	8004e5c <_printf_i+0x30>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	f043 0320 	orr.w	r3, r3, #32
 8004ea6:	6023      	str	r3, [r4, #0]
 8004ea8:	e003      	b.n	8004eb2 <_printf_i+0x86>
 8004eaa:	2975      	cmp	r1, #117	; 0x75
 8004eac:	d017      	beq.n	8004ede <_printf_i+0xb2>
 8004eae:	2978      	cmp	r1, #120	; 0x78
 8004eb0:	d1d4      	bne.n	8004e5c <_printf_i+0x30>
 8004eb2:	2378      	movs	r3, #120	; 0x78
 8004eb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004eb8:	4864      	ldr	r0, [pc, #400]	; (800504c <_printf_i+0x220>)
 8004eba:	e055      	b.n	8004f68 <_printf_i+0x13c>
 8004ebc:	6813      	ldr	r3, [r2, #0]
 8004ebe:	1d19      	adds	r1, r3, #4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6011      	str	r1, [r2, #0]
 8004ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e08c      	b.n	8004fea <_printf_i+0x1be>
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6011      	str	r1, [r2, #0]
 8004ed4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ed8:	bf18      	it	ne
 8004eda:	b21b      	sxthne	r3, r3
 8004edc:	e7cf      	b.n	8004e7e <_printf_i+0x52>
 8004ede:	6813      	ldr	r3, [r2, #0]
 8004ee0:	6825      	ldr	r5, [r4, #0]
 8004ee2:	1d18      	adds	r0, r3, #4
 8004ee4:	6010      	str	r0, [r2, #0]
 8004ee6:	0628      	lsls	r0, r5, #24
 8004ee8:	d501      	bpl.n	8004eee <_printf_i+0xc2>
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	e002      	b.n	8004ef4 <_printf_i+0xc8>
 8004eee:	0668      	lsls	r0, r5, #25
 8004ef0:	d5fb      	bpl.n	8004eea <_printf_i+0xbe>
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	4854      	ldr	r0, [pc, #336]	; (8005048 <_printf_i+0x21c>)
 8004ef6:	296f      	cmp	r1, #111	; 0x6f
 8004ef8:	bf14      	ite	ne
 8004efa:	220a      	movne	r2, #10
 8004efc:	2208      	moveq	r2, #8
 8004efe:	2100      	movs	r1, #0
 8004f00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f04:	6865      	ldr	r5, [r4, #4]
 8004f06:	60a5      	str	r5, [r4, #8]
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	f2c0 8095 	blt.w	8005038 <_printf_i+0x20c>
 8004f0e:	6821      	ldr	r1, [r4, #0]
 8004f10:	f021 0104 	bic.w	r1, r1, #4
 8004f14:	6021      	str	r1, [r4, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d13d      	bne.n	8004f96 <_printf_i+0x16a>
 8004f1a:	2d00      	cmp	r5, #0
 8004f1c:	f040 808e 	bne.w	800503c <_printf_i+0x210>
 8004f20:	4665      	mov	r5, ip
 8004f22:	2a08      	cmp	r2, #8
 8004f24:	d10b      	bne.n	8004f3e <_printf_i+0x112>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	07db      	lsls	r3, r3, #31
 8004f2a:	d508      	bpl.n	8004f3e <_printf_i+0x112>
 8004f2c:	6923      	ldr	r3, [r4, #16]
 8004f2e:	6862      	ldr	r2, [r4, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	bfde      	ittt	le
 8004f34:	2330      	movle	r3, #48	; 0x30
 8004f36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f3e:	ebac 0305 	sub.w	r3, ip, r5
 8004f42:	6123      	str	r3, [r4, #16]
 8004f44:	f8cd 8000 	str.w	r8, [sp]
 8004f48:	463b      	mov	r3, r7
 8004f4a:	aa03      	add	r2, sp, #12
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7ff fef6 	bl	8004d40 <_printf_common>
 8004f54:	3001      	adds	r0, #1
 8004f56:	d14d      	bne.n	8004ff4 <_printf_i+0x1c8>
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	b005      	add	sp, #20
 8004f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f62:	4839      	ldr	r0, [pc, #228]	; (8005048 <_printf_i+0x21c>)
 8004f64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f68:	6813      	ldr	r3, [r2, #0]
 8004f6a:	6821      	ldr	r1, [r4, #0]
 8004f6c:	1d1d      	adds	r5, r3, #4
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6015      	str	r5, [r2, #0]
 8004f72:	060a      	lsls	r2, r1, #24
 8004f74:	d50b      	bpl.n	8004f8e <_printf_i+0x162>
 8004f76:	07ca      	lsls	r2, r1, #31
 8004f78:	bf44      	itt	mi
 8004f7a:	f041 0120 	orrmi.w	r1, r1, #32
 8004f7e:	6021      	strmi	r1, [r4, #0]
 8004f80:	b91b      	cbnz	r3, 8004f8a <_printf_i+0x15e>
 8004f82:	6822      	ldr	r2, [r4, #0]
 8004f84:	f022 0220 	bic.w	r2, r2, #32
 8004f88:	6022      	str	r2, [r4, #0]
 8004f8a:	2210      	movs	r2, #16
 8004f8c:	e7b7      	b.n	8004efe <_printf_i+0xd2>
 8004f8e:	064d      	lsls	r5, r1, #25
 8004f90:	bf48      	it	mi
 8004f92:	b29b      	uxthmi	r3, r3
 8004f94:	e7ef      	b.n	8004f76 <_printf_i+0x14a>
 8004f96:	4665      	mov	r5, ip
 8004f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f9c:	fb02 3311 	mls	r3, r2, r1, r3
 8004fa0:	5cc3      	ldrb	r3, [r0, r3]
 8004fa2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	2900      	cmp	r1, #0
 8004faa:	d1f5      	bne.n	8004f98 <_printf_i+0x16c>
 8004fac:	e7b9      	b.n	8004f22 <_printf_i+0xf6>
 8004fae:	6813      	ldr	r3, [r2, #0]
 8004fb0:	6825      	ldr	r5, [r4, #0]
 8004fb2:	6961      	ldr	r1, [r4, #20]
 8004fb4:	1d18      	adds	r0, r3, #4
 8004fb6:	6010      	str	r0, [r2, #0]
 8004fb8:	0628      	lsls	r0, r5, #24
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	d501      	bpl.n	8004fc2 <_printf_i+0x196>
 8004fbe:	6019      	str	r1, [r3, #0]
 8004fc0:	e002      	b.n	8004fc8 <_printf_i+0x19c>
 8004fc2:	066a      	lsls	r2, r5, #25
 8004fc4:	d5fb      	bpl.n	8004fbe <_printf_i+0x192>
 8004fc6:	8019      	strh	r1, [r3, #0]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	4665      	mov	r5, ip
 8004fce:	e7b9      	b.n	8004f44 <_printf_i+0x118>
 8004fd0:	6813      	ldr	r3, [r2, #0]
 8004fd2:	1d19      	adds	r1, r3, #4
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	681d      	ldr	r5, [r3, #0]
 8004fd8:	6862      	ldr	r2, [r4, #4]
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f7fb f8f7 	bl	80001d0 <memchr>
 8004fe2:	b108      	cbz	r0, 8004fe8 <_printf_i+0x1bc>
 8004fe4:	1b40      	subs	r0, r0, r5
 8004fe6:	6060      	str	r0, [r4, #4]
 8004fe8:	6863      	ldr	r3, [r4, #4]
 8004fea:	6123      	str	r3, [r4, #16]
 8004fec:	2300      	movs	r3, #0
 8004fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff2:	e7a7      	b.n	8004f44 <_printf_i+0x118>
 8004ff4:	6923      	ldr	r3, [r4, #16]
 8004ff6:	462a      	mov	r2, r5
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	47c0      	blx	r8
 8004ffe:	3001      	adds	r0, #1
 8005000:	d0aa      	beq.n	8004f58 <_printf_i+0x12c>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	079b      	lsls	r3, r3, #30
 8005006:	d413      	bmi.n	8005030 <_printf_i+0x204>
 8005008:	68e0      	ldr	r0, [r4, #12]
 800500a:	9b03      	ldr	r3, [sp, #12]
 800500c:	4298      	cmp	r0, r3
 800500e:	bfb8      	it	lt
 8005010:	4618      	movlt	r0, r3
 8005012:	e7a3      	b.n	8004f5c <_printf_i+0x130>
 8005014:	2301      	movs	r3, #1
 8005016:	464a      	mov	r2, r9
 8005018:	4639      	mov	r1, r7
 800501a:	4630      	mov	r0, r6
 800501c:	47c0      	blx	r8
 800501e:	3001      	adds	r0, #1
 8005020:	d09a      	beq.n	8004f58 <_printf_i+0x12c>
 8005022:	3501      	adds	r5, #1
 8005024:	68e3      	ldr	r3, [r4, #12]
 8005026:	9a03      	ldr	r2, [sp, #12]
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	42ab      	cmp	r3, r5
 800502c:	dcf2      	bgt.n	8005014 <_printf_i+0x1e8>
 800502e:	e7eb      	b.n	8005008 <_printf_i+0x1dc>
 8005030:	2500      	movs	r5, #0
 8005032:	f104 0919 	add.w	r9, r4, #25
 8005036:	e7f5      	b.n	8005024 <_printf_i+0x1f8>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1ac      	bne.n	8004f96 <_printf_i+0x16a>
 800503c:	7803      	ldrb	r3, [r0, #0]
 800503e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005042:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005046:	e76c      	b.n	8004f22 <_printf_i+0xf6>
 8005048:	080059b9 	.word	0x080059b9
 800504c:	080059ca 	.word	0x080059ca

08005050 <_sbrk_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4c06      	ldr	r4, [pc, #24]	; (800506c <_sbrk_r+0x1c>)
 8005054:	2300      	movs	r3, #0
 8005056:	4605      	mov	r5, r0
 8005058:	4608      	mov	r0, r1
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	f7fb fe56 	bl	8000d0c <_sbrk>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d102      	bne.n	800506a <_sbrk_r+0x1a>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	b103      	cbz	r3, 800506a <_sbrk_r+0x1a>
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	200005e4 	.word	0x200005e4

08005070 <__swbuf_r>:
 8005070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005072:	460e      	mov	r6, r1
 8005074:	4614      	mov	r4, r2
 8005076:	4605      	mov	r5, r0
 8005078:	b118      	cbz	r0, 8005082 <__swbuf_r+0x12>
 800507a:	6983      	ldr	r3, [r0, #24]
 800507c:	b90b      	cbnz	r3, 8005082 <__swbuf_r+0x12>
 800507e:	f000 f9af 	bl	80053e0 <__sinit>
 8005082:	4b21      	ldr	r3, [pc, #132]	; (8005108 <__swbuf_r+0x98>)
 8005084:	429c      	cmp	r4, r3
 8005086:	d12a      	bne.n	80050de <__swbuf_r+0x6e>
 8005088:	686c      	ldr	r4, [r5, #4]
 800508a:	69a3      	ldr	r3, [r4, #24]
 800508c:	60a3      	str	r3, [r4, #8]
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	071a      	lsls	r2, r3, #28
 8005092:	d52e      	bpl.n	80050f2 <__swbuf_r+0x82>
 8005094:	6923      	ldr	r3, [r4, #16]
 8005096:	b363      	cbz	r3, 80050f2 <__swbuf_r+0x82>
 8005098:	6923      	ldr	r3, [r4, #16]
 800509a:	6820      	ldr	r0, [r4, #0]
 800509c:	1ac0      	subs	r0, r0, r3
 800509e:	6963      	ldr	r3, [r4, #20]
 80050a0:	b2f6      	uxtb	r6, r6
 80050a2:	4283      	cmp	r3, r0
 80050a4:	4637      	mov	r7, r6
 80050a6:	dc04      	bgt.n	80050b2 <__swbuf_r+0x42>
 80050a8:	4621      	mov	r1, r4
 80050aa:	4628      	mov	r0, r5
 80050ac:	f000 f92e 	bl	800530c <_fflush_r>
 80050b0:	bb28      	cbnz	r0, 80050fe <__swbuf_r+0x8e>
 80050b2:	68a3      	ldr	r3, [r4, #8]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	60a3      	str	r3, [r4, #8]
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	6022      	str	r2, [r4, #0]
 80050be:	701e      	strb	r6, [r3, #0]
 80050c0:	6963      	ldr	r3, [r4, #20]
 80050c2:	3001      	adds	r0, #1
 80050c4:	4283      	cmp	r3, r0
 80050c6:	d004      	beq.n	80050d2 <__swbuf_r+0x62>
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	07db      	lsls	r3, r3, #31
 80050cc:	d519      	bpl.n	8005102 <__swbuf_r+0x92>
 80050ce:	2e0a      	cmp	r6, #10
 80050d0:	d117      	bne.n	8005102 <__swbuf_r+0x92>
 80050d2:	4621      	mov	r1, r4
 80050d4:	4628      	mov	r0, r5
 80050d6:	f000 f919 	bl	800530c <_fflush_r>
 80050da:	b190      	cbz	r0, 8005102 <__swbuf_r+0x92>
 80050dc:	e00f      	b.n	80050fe <__swbuf_r+0x8e>
 80050de:	4b0b      	ldr	r3, [pc, #44]	; (800510c <__swbuf_r+0x9c>)
 80050e0:	429c      	cmp	r4, r3
 80050e2:	d101      	bne.n	80050e8 <__swbuf_r+0x78>
 80050e4:	68ac      	ldr	r4, [r5, #8]
 80050e6:	e7d0      	b.n	800508a <__swbuf_r+0x1a>
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <__swbuf_r+0xa0>)
 80050ea:	429c      	cmp	r4, r3
 80050ec:	bf08      	it	eq
 80050ee:	68ec      	ldreq	r4, [r5, #12]
 80050f0:	e7cb      	b.n	800508a <__swbuf_r+0x1a>
 80050f2:	4621      	mov	r1, r4
 80050f4:	4628      	mov	r0, r5
 80050f6:	f000 f80d 	bl	8005114 <__swsetup_r>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d0cc      	beq.n	8005098 <__swbuf_r+0x28>
 80050fe:	f04f 37ff 	mov.w	r7, #4294967295
 8005102:	4638      	mov	r0, r7
 8005104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005106:	bf00      	nop
 8005108:	080059fc 	.word	0x080059fc
 800510c:	08005a1c 	.word	0x08005a1c
 8005110:	080059dc 	.word	0x080059dc

08005114 <__swsetup_r>:
 8005114:	4b32      	ldr	r3, [pc, #200]	; (80051e0 <__swsetup_r+0xcc>)
 8005116:	b570      	push	{r4, r5, r6, lr}
 8005118:	681d      	ldr	r5, [r3, #0]
 800511a:	4606      	mov	r6, r0
 800511c:	460c      	mov	r4, r1
 800511e:	b125      	cbz	r5, 800512a <__swsetup_r+0x16>
 8005120:	69ab      	ldr	r3, [r5, #24]
 8005122:	b913      	cbnz	r3, 800512a <__swsetup_r+0x16>
 8005124:	4628      	mov	r0, r5
 8005126:	f000 f95b 	bl	80053e0 <__sinit>
 800512a:	4b2e      	ldr	r3, [pc, #184]	; (80051e4 <__swsetup_r+0xd0>)
 800512c:	429c      	cmp	r4, r3
 800512e:	d10f      	bne.n	8005150 <__swsetup_r+0x3c>
 8005130:	686c      	ldr	r4, [r5, #4]
 8005132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005136:	b29a      	uxth	r2, r3
 8005138:	0715      	lsls	r5, r2, #28
 800513a:	d42c      	bmi.n	8005196 <__swsetup_r+0x82>
 800513c:	06d0      	lsls	r0, r2, #27
 800513e:	d411      	bmi.n	8005164 <__swsetup_r+0x50>
 8005140:	2209      	movs	r2, #9
 8005142:	6032      	str	r2, [r6, #0]
 8005144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005148:	81a3      	strh	r3, [r4, #12]
 800514a:	f04f 30ff 	mov.w	r0, #4294967295
 800514e:	e03e      	b.n	80051ce <__swsetup_r+0xba>
 8005150:	4b25      	ldr	r3, [pc, #148]	; (80051e8 <__swsetup_r+0xd4>)
 8005152:	429c      	cmp	r4, r3
 8005154:	d101      	bne.n	800515a <__swsetup_r+0x46>
 8005156:	68ac      	ldr	r4, [r5, #8]
 8005158:	e7eb      	b.n	8005132 <__swsetup_r+0x1e>
 800515a:	4b24      	ldr	r3, [pc, #144]	; (80051ec <__swsetup_r+0xd8>)
 800515c:	429c      	cmp	r4, r3
 800515e:	bf08      	it	eq
 8005160:	68ec      	ldreq	r4, [r5, #12]
 8005162:	e7e6      	b.n	8005132 <__swsetup_r+0x1e>
 8005164:	0751      	lsls	r1, r2, #29
 8005166:	d512      	bpl.n	800518e <__swsetup_r+0x7a>
 8005168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800516a:	b141      	cbz	r1, 800517e <__swsetup_r+0x6a>
 800516c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005170:	4299      	cmp	r1, r3
 8005172:	d002      	beq.n	800517a <__swsetup_r+0x66>
 8005174:	4630      	mov	r0, r6
 8005176:	f7ff fbfb 	bl	8004970 <_free_r>
 800517a:	2300      	movs	r3, #0
 800517c:	6363      	str	r3, [r4, #52]	; 0x34
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005184:	81a3      	strh	r3, [r4, #12]
 8005186:	2300      	movs	r3, #0
 8005188:	6063      	str	r3, [r4, #4]
 800518a:	6923      	ldr	r3, [r4, #16]
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	89a3      	ldrh	r3, [r4, #12]
 8005190:	f043 0308 	orr.w	r3, r3, #8
 8005194:	81a3      	strh	r3, [r4, #12]
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	b94b      	cbnz	r3, 80051ae <__swsetup_r+0x9a>
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a4:	d003      	beq.n	80051ae <__swsetup_r+0x9a>
 80051a6:	4621      	mov	r1, r4
 80051a8:	4630      	mov	r0, r6
 80051aa:	f000 f9c7 	bl	800553c <__smakebuf_r>
 80051ae:	89a2      	ldrh	r2, [r4, #12]
 80051b0:	f012 0301 	ands.w	r3, r2, #1
 80051b4:	d00c      	beq.n	80051d0 <__swsetup_r+0xbc>
 80051b6:	2300      	movs	r3, #0
 80051b8:	60a3      	str	r3, [r4, #8]
 80051ba:	6963      	ldr	r3, [r4, #20]
 80051bc:	425b      	negs	r3, r3
 80051be:	61a3      	str	r3, [r4, #24]
 80051c0:	6923      	ldr	r3, [r4, #16]
 80051c2:	b953      	cbnz	r3, 80051da <__swsetup_r+0xc6>
 80051c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80051cc:	d1ba      	bne.n	8005144 <__swsetup_r+0x30>
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	0792      	lsls	r2, r2, #30
 80051d2:	bf58      	it	pl
 80051d4:	6963      	ldrpl	r3, [r4, #20]
 80051d6:	60a3      	str	r3, [r4, #8]
 80051d8:	e7f2      	b.n	80051c0 <__swsetup_r+0xac>
 80051da:	2000      	movs	r0, #0
 80051dc:	e7f7      	b.n	80051ce <__swsetup_r+0xba>
 80051de:	bf00      	nop
 80051e0:	2000000c 	.word	0x2000000c
 80051e4:	080059fc 	.word	0x080059fc
 80051e8:	08005a1c 	.word	0x08005a1c
 80051ec:	080059dc 	.word	0x080059dc

080051f0 <abort>:
 80051f0:	b508      	push	{r3, lr}
 80051f2:	2006      	movs	r0, #6
 80051f4:	f000 fa0c 	bl	8005610 <raise>
 80051f8:	2001      	movs	r0, #1
 80051fa:	f7fb fd0f 	bl	8000c1c <_exit>
	...

08005200 <__sflush_r>:
 8005200:	898a      	ldrh	r2, [r1, #12]
 8005202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005206:	4605      	mov	r5, r0
 8005208:	0710      	lsls	r0, r2, #28
 800520a:	460c      	mov	r4, r1
 800520c:	d458      	bmi.n	80052c0 <__sflush_r+0xc0>
 800520e:	684b      	ldr	r3, [r1, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	dc05      	bgt.n	8005220 <__sflush_r+0x20>
 8005214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	dc02      	bgt.n	8005220 <__sflush_r+0x20>
 800521a:	2000      	movs	r0, #0
 800521c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005222:	2e00      	cmp	r6, #0
 8005224:	d0f9      	beq.n	800521a <__sflush_r+0x1a>
 8005226:	2300      	movs	r3, #0
 8005228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800522c:	682f      	ldr	r7, [r5, #0]
 800522e:	6a21      	ldr	r1, [r4, #32]
 8005230:	602b      	str	r3, [r5, #0]
 8005232:	d032      	beq.n	800529a <__sflush_r+0x9a>
 8005234:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	075a      	lsls	r2, r3, #29
 800523a:	d505      	bpl.n	8005248 <__sflush_r+0x48>
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	1ac0      	subs	r0, r0, r3
 8005240:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005242:	b10b      	cbz	r3, 8005248 <__sflush_r+0x48>
 8005244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005246:	1ac0      	subs	r0, r0, r3
 8005248:	2300      	movs	r3, #0
 800524a:	4602      	mov	r2, r0
 800524c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800524e:	6a21      	ldr	r1, [r4, #32]
 8005250:	4628      	mov	r0, r5
 8005252:	47b0      	blx	r6
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	d106      	bne.n	8005268 <__sflush_r+0x68>
 800525a:	6829      	ldr	r1, [r5, #0]
 800525c:	291d      	cmp	r1, #29
 800525e:	d848      	bhi.n	80052f2 <__sflush_r+0xf2>
 8005260:	4a29      	ldr	r2, [pc, #164]	; (8005308 <__sflush_r+0x108>)
 8005262:	40ca      	lsrs	r2, r1
 8005264:	07d6      	lsls	r6, r2, #31
 8005266:	d544      	bpl.n	80052f2 <__sflush_r+0xf2>
 8005268:	2200      	movs	r2, #0
 800526a:	6062      	str	r2, [r4, #4]
 800526c:	04d9      	lsls	r1, r3, #19
 800526e:	6922      	ldr	r2, [r4, #16]
 8005270:	6022      	str	r2, [r4, #0]
 8005272:	d504      	bpl.n	800527e <__sflush_r+0x7e>
 8005274:	1c42      	adds	r2, r0, #1
 8005276:	d101      	bne.n	800527c <__sflush_r+0x7c>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	b903      	cbnz	r3, 800527e <__sflush_r+0x7e>
 800527c:	6560      	str	r0, [r4, #84]	; 0x54
 800527e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005280:	602f      	str	r7, [r5, #0]
 8005282:	2900      	cmp	r1, #0
 8005284:	d0c9      	beq.n	800521a <__sflush_r+0x1a>
 8005286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800528a:	4299      	cmp	r1, r3
 800528c:	d002      	beq.n	8005294 <__sflush_r+0x94>
 800528e:	4628      	mov	r0, r5
 8005290:	f7ff fb6e 	bl	8004970 <_free_r>
 8005294:	2000      	movs	r0, #0
 8005296:	6360      	str	r0, [r4, #52]	; 0x34
 8005298:	e7c0      	b.n	800521c <__sflush_r+0x1c>
 800529a:	2301      	movs	r3, #1
 800529c:	4628      	mov	r0, r5
 800529e:	47b0      	blx	r6
 80052a0:	1c41      	adds	r1, r0, #1
 80052a2:	d1c8      	bne.n	8005236 <__sflush_r+0x36>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0c5      	beq.n	8005236 <__sflush_r+0x36>
 80052aa:	2b1d      	cmp	r3, #29
 80052ac:	d001      	beq.n	80052b2 <__sflush_r+0xb2>
 80052ae:	2b16      	cmp	r3, #22
 80052b0:	d101      	bne.n	80052b6 <__sflush_r+0xb6>
 80052b2:	602f      	str	r7, [r5, #0]
 80052b4:	e7b1      	b.n	800521a <__sflush_r+0x1a>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	e7ad      	b.n	800521c <__sflush_r+0x1c>
 80052c0:	690f      	ldr	r7, [r1, #16]
 80052c2:	2f00      	cmp	r7, #0
 80052c4:	d0a9      	beq.n	800521a <__sflush_r+0x1a>
 80052c6:	0793      	lsls	r3, r2, #30
 80052c8:	680e      	ldr	r6, [r1, #0]
 80052ca:	bf08      	it	eq
 80052cc:	694b      	ldreq	r3, [r1, #20]
 80052ce:	600f      	str	r7, [r1, #0]
 80052d0:	bf18      	it	ne
 80052d2:	2300      	movne	r3, #0
 80052d4:	eba6 0807 	sub.w	r8, r6, r7
 80052d8:	608b      	str	r3, [r1, #8]
 80052da:	f1b8 0f00 	cmp.w	r8, #0
 80052de:	dd9c      	ble.n	800521a <__sflush_r+0x1a>
 80052e0:	4643      	mov	r3, r8
 80052e2:	463a      	mov	r2, r7
 80052e4:	6a21      	ldr	r1, [r4, #32]
 80052e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b0      	blx	r6
 80052ec:	2800      	cmp	r0, #0
 80052ee:	dc06      	bgt.n	80052fe <__sflush_r+0xfe>
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	e78e      	b.n	800521c <__sflush_r+0x1c>
 80052fe:	4407      	add	r7, r0
 8005300:	eba8 0800 	sub.w	r8, r8, r0
 8005304:	e7e9      	b.n	80052da <__sflush_r+0xda>
 8005306:	bf00      	nop
 8005308:	20400001 	.word	0x20400001

0800530c <_fflush_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	4605      	mov	r5, r0
 8005312:	460c      	mov	r4, r1
 8005314:	b1db      	cbz	r3, 800534e <_fflush_r+0x42>
 8005316:	b118      	cbz	r0, 8005320 <_fflush_r+0x14>
 8005318:	6983      	ldr	r3, [r0, #24]
 800531a:	b90b      	cbnz	r3, 8005320 <_fflush_r+0x14>
 800531c:	f000 f860 	bl	80053e0 <__sinit>
 8005320:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <_fflush_r+0x48>)
 8005322:	429c      	cmp	r4, r3
 8005324:	d109      	bne.n	800533a <_fflush_r+0x2e>
 8005326:	686c      	ldr	r4, [r5, #4]
 8005328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800532c:	b17b      	cbz	r3, 800534e <_fflush_r+0x42>
 800532e:	4621      	mov	r1, r4
 8005330:	4628      	mov	r0, r5
 8005332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005336:	f7ff bf63 	b.w	8005200 <__sflush_r>
 800533a:	4b07      	ldr	r3, [pc, #28]	; (8005358 <_fflush_r+0x4c>)
 800533c:	429c      	cmp	r4, r3
 800533e:	d101      	bne.n	8005344 <_fflush_r+0x38>
 8005340:	68ac      	ldr	r4, [r5, #8]
 8005342:	e7f1      	b.n	8005328 <_fflush_r+0x1c>
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <_fflush_r+0x50>)
 8005346:	429c      	cmp	r4, r3
 8005348:	bf08      	it	eq
 800534a:	68ec      	ldreq	r4, [r5, #12]
 800534c:	e7ec      	b.n	8005328 <_fflush_r+0x1c>
 800534e:	2000      	movs	r0, #0
 8005350:	bd38      	pop	{r3, r4, r5, pc}
 8005352:	bf00      	nop
 8005354:	080059fc 	.word	0x080059fc
 8005358:	08005a1c 	.word	0x08005a1c
 800535c:	080059dc 	.word	0x080059dc

08005360 <std>:
 8005360:	2300      	movs	r3, #0
 8005362:	b510      	push	{r4, lr}
 8005364:	4604      	mov	r4, r0
 8005366:	e9c0 3300 	strd	r3, r3, [r0]
 800536a:	6083      	str	r3, [r0, #8]
 800536c:	8181      	strh	r1, [r0, #12]
 800536e:	6643      	str	r3, [r0, #100]	; 0x64
 8005370:	81c2      	strh	r2, [r0, #14]
 8005372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005376:	6183      	str	r3, [r0, #24]
 8005378:	4619      	mov	r1, r3
 800537a:	2208      	movs	r2, #8
 800537c:	305c      	adds	r0, #92	; 0x5c
 800537e:	f7ff faef 	bl	8004960 <memset>
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <std+0x38>)
 8005384:	6263      	str	r3, [r4, #36]	; 0x24
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <std+0x3c>)
 8005388:	62a3      	str	r3, [r4, #40]	; 0x28
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <std+0x40>)
 800538c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <std+0x44>)
 8005390:	6224      	str	r4, [r4, #32]
 8005392:	6323      	str	r3, [r4, #48]	; 0x30
 8005394:	bd10      	pop	{r4, pc}
 8005396:	bf00      	nop
 8005398:	08005649 	.word	0x08005649
 800539c:	0800566b 	.word	0x0800566b
 80053a0:	080056a3 	.word	0x080056a3
 80053a4:	080056c7 	.word	0x080056c7

080053a8 <_cleanup_r>:
 80053a8:	4901      	ldr	r1, [pc, #4]	; (80053b0 <_cleanup_r+0x8>)
 80053aa:	f000 b885 	b.w	80054b8 <_fwalk_reent>
 80053ae:	bf00      	nop
 80053b0:	0800530d 	.word	0x0800530d

080053b4 <__sfmoreglue>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	1e4a      	subs	r2, r1, #1
 80053b8:	2568      	movs	r5, #104	; 0x68
 80053ba:	4355      	muls	r5, r2
 80053bc:	460e      	mov	r6, r1
 80053be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053c2:	f7ff fb23 	bl	8004a0c <_malloc_r>
 80053c6:	4604      	mov	r4, r0
 80053c8:	b140      	cbz	r0, 80053dc <__sfmoreglue+0x28>
 80053ca:	2100      	movs	r1, #0
 80053cc:	e9c0 1600 	strd	r1, r6, [r0]
 80053d0:	300c      	adds	r0, #12
 80053d2:	60a0      	str	r0, [r4, #8]
 80053d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053d8:	f7ff fac2 	bl	8004960 <memset>
 80053dc:	4620      	mov	r0, r4
 80053de:	bd70      	pop	{r4, r5, r6, pc}

080053e0 <__sinit>:
 80053e0:	6983      	ldr	r3, [r0, #24]
 80053e2:	b510      	push	{r4, lr}
 80053e4:	4604      	mov	r4, r0
 80053e6:	bb33      	cbnz	r3, 8005436 <__sinit+0x56>
 80053e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80053ec:	6503      	str	r3, [r0, #80]	; 0x50
 80053ee:	4b12      	ldr	r3, [pc, #72]	; (8005438 <__sinit+0x58>)
 80053f0:	4a12      	ldr	r2, [pc, #72]	; (800543c <__sinit+0x5c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6282      	str	r2, [r0, #40]	; 0x28
 80053f6:	4298      	cmp	r0, r3
 80053f8:	bf04      	itt	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	6183      	streq	r3, [r0, #24]
 80053fe:	f000 f81f 	bl	8005440 <__sfp>
 8005402:	6060      	str	r0, [r4, #4]
 8005404:	4620      	mov	r0, r4
 8005406:	f000 f81b 	bl	8005440 <__sfp>
 800540a:	60a0      	str	r0, [r4, #8]
 800540c:	4620      	mov	r0, r4
 800540e:	f000 f817 	bl	8005440 <__sfp>
 8005412:	2200      	movs	r2, #0
 8005414:	60e0      	str	r0, [r4, #12]
 8005416:	2104      	movs	r1, #4
 8005418:	6860      	ldr	r0, [r4, #4]
 800541a:	f7ff ffa1 	bl	8005360 <std>
 800541e:	2201      	movs	r2, #1
 8005420:	2109      	movs	r1, #9
 8005422:	68a0      	ldr	r0, [r4, #8]
 8005424:	f7ff ff9c 	bl	8005360 <std>
 8005428:	2202      	movs	r2, #2
 800542a:	2112      	movs	r1, #18
 800542c:	68e0      	ldr	r0, [r4, #12]
 800542e:	f7ff ff97 	bl	8005360 <std>
 8005432:	2301      	movs	r3, #1
 8005434:	61a3      	str	r3, [r4, #24]
 8005436:	bd10      	pop	{r4, pc}
 8005438:	080059a4 	.word	0x080059a4
 800543c:	080053a9 	.word	0x080053a9

08005440 <__sfp>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <__sfp+0x70>)
 8005444:	681e      	ldr	r6, [r3, #0]
 8005446:	69b3      	ldr	r3, [r6, #24]
 8005448:	4607      	mov	r7, r0
 800544a:	b913      	cbnz	r3, 8005452 <__sfp+0x12>
 800544c:	4630      	mov	r0, r6
 800544e:	f7ff ffc7 	bl	80053e0 <__sinit>
 8005452:	3648      	adds	r6, #72	; 0x48
 8005454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005458:	3b01      	subs	r3, #1
 800545a:	d503      	bpl.n	8005464 <__sfp+0x24>
 800545c:	6833      	ldr	r3, [r6, #0]
 800545e:	b133      	cbz	r3, 800546e <__sfp+0x2e>
 8005460:	6836      	ldr	r6, [r6, #0]
 8005462:	e7f7      	b.n	8005454 <__sfp+0x14>
 8005464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005468:	b16d      	cbz	r5, 8005486 <__sfp+0x46>
 800546a:	3468      	adds	r4, #104	; 0x68
 800546c:	e7f4      	b.n	8005458 <__sfp+0x18>
 800546e:	2104      	movs	r1, #4
 8005470:	4638      	mov	r0, r7
 8005472:	f7ff ff9f 	bl	80053b4 <__sfmoreglue>
 8005476:	6030      	str	r0, [r6, #0]
 8005478:	2800      	cmp	r0, #0
 800547a:	d1f1      	bne.n	8005460 <__sfp+0x20>
 800547c:	230c      	movs	r3, #12
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4604      	mov	r4, r0
 8005482:	4620      	mov	r0, r4
 8005484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005486:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <__sfp+0x74>)
 8005488:	6665      	str	r5, [r4, #100]	; 0x64
 800548a:	e9c4 5500 	strd	r5, r5, [r4]
 800548e:	60a5      	str	r5, [r4, #8]
 8005490:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005494:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005498:	2208      	movs	r2, #8
 800549a:	4629      	mov	r1, r5
 800549c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054a0:	f7ff fa5e 	bl	8004960 <memset>
 80054a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054ac:	e7e9      	b.n	8005482 <__sfp+0x42>
 80054ae:	bf00      	nop
 80054b0:	080059a4 	.word	0x080059a4
 80054b4:	ffff0001 	.word	0xffff0001

080054b8 <_fwalk_reent>:
 80054b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	4680      	mov	r8, r0
 80054be:	4689      	mov	r9, r1
 80054c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054c4:	2600      	movs	r6, #0
 80054c6:	b914      	cbnz	r4, 80054ce <_fwalk_reent+0x16>
 80054c8:	4630      	mov	r0, r6
 80054ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80054d2:	3f01      	subs	r7, #1
 80054d4:	d501      	bpl.n	80054da <_fwalk_reent+0x22>
 80054d6:	6824      	ldr	r4, [r4, #0]
 80054d8:	e7f5      	b.n	80054c6 <_fwalk_reent+0xe>
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d907      	bls.n	80054f0 <_fwalk_reent+0x38>
 80054e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054e4:	3301      	adds	r3, #1
 80054e6:	d003      	beq.n	80054f0 <_fwalk_reent+0x38>
 80054e8:	4629      	mov	r1, r5
 80054ea:	4640      	mov	r0, r8
 80054ec:	47c8      	blx	r9
 80054ee:	4306      	orrs	r6, r0
 80054f0:	3568      	adds	r5, #104	; 0x68
 80054f2:	e7ee      	b.n	80054d2 <_fwalk_reent+0x1a>

080054f4 <__swhatbuf_r>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	460e      	mov	r6, r1
 80054f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fc:	2900      	cmp	r1, #0
 80054fe:	b096      	sub	sp, #88	; 0x58
 8005500:	4614      	mov	r4, r2
 8005502:	461d      	mov	r5, r3
 8005504:	da07      	bge.n	8005516 <__swhatbuf_r+0x22>
 8005506:	2300      	movs	r3, #0
 8005508:	602b      	str	r3, [r5, #0]
 800550a:	89b3      	ldrh	r3, [r6, #12]
 800550c:	061a      	lsls	r2, r3, #24
 800550e:	d410      	bmi.n	8005532 <__swhatbuf_r+0x3e>
 8005510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005514:	e00e      	b.n	8005534 <__swhatbuf_r+0x40>
 8005516:	466a      	mov	r2, sp
 8005518:	f000 f8fc 	bl	8005714 <_fstat_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	dbf2      	blt.n	8005506 <__swhatbuf_r+0x12>
 8005520:	9a01      	ldr	r2, [sp, #4]
 8005522:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005526:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800552a:	425a      	negs	r2, r3
 800552c:	415a      	adcs	r2, r3
 800552e:	602a      	str	r2, [r5, #0]
 8005530:	e7ee      	b.n	8005510 <__swhatbuf_r+0x1c>
 8005532:	2340      	movs	r3, #64	; 0x40
 8005534:	2000      	movs	r0, #0
 8005536:	6023      	str	r3, [r4, #0]
 8005538:	b016      	add	sp, #88	; 0x58
 800553a:	bd70      	pop	{r4, r5, r6, pc}

0800553c <__smakebuf_r>:
 800553c:	898b      	ldrh	r3, [r1, #12]
 800553e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005540:	079d      	lsls	r5, r3, #30
 8005542:	4606      	mov	r6, r0
 8005544:	460c      	mov	r4, r1
 8005546:	d507      	bpl.n	8005558 <__smakebuf_r+0x1c>
 8005548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	6123      	str	r3, [r4, #16]
 8005550:	2301      	movs	r3, #1
 8005552:	6163      	str	r3, [r4, #20]
 8005554:	b002      	add	sp, #8
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	ab01      	add	r3, sp, #4
 800555a:	466a      	mov	r2, sp
 800555c:	f7ff ffca 	bl	80054f4 <__swhatbuf_r>
 8005560:	9900      	ldr	r1, [sp, #0]
 8005562:	4605      	mov	r5, r0
 8005564:	4630      	mov	r0, r6
 8005566:	f7ff fa51 	bl	8004a0c <_malloc_r>
 800556a:	b948      	cbnz	r0, 8005580 <__smakebuf_r+0x44>
 800556c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005570:	059a      	lsls	r2, r3, #22
 8005572:	d4ef      	bmi.n	8005554 <__smakebuf_r+0x18>
 8005574:	f023 0303 	bic.w	r3, r3, #3
 8005578:	f043 0302 	orr.w	r3, r3, #2
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	e7e3      	b.n	8005548 <__smakebuf_r+0xc>
 8005580:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <__smakebuf_r+0x7c>)
 8005582:	62b3      	str	r3, [r6, #40]	; 0x28
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	6020      	str	r0, [r4, #0]
 8005588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558c:	81a3      	strh	r3, [r4, #12]
 800558e:	9b00      	ldr	r3, [sp, #0]
 8005590:	6163      	str	r3, [r4, #20]
 8005592:	9b01      	ldr	r3, [sp, #4]
 8005594:	6120      	str	r0, [r4, #16]
 8005596:	b15b      	cbz	r3, 80055b0 <__smakebuf_r+0x74>
 8005598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800559c:	4630      	mov	r0, r6
 800559e:	f000 f8cb 	bl	8005738 <_isatty_r>
 80055a2:	b128      	cbz	r0, 80055b0 <__smakebuf_r+0x74>
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	f023 0303 	bic.w	r3, r3, #3
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	431d      	orrs	r5, r3
 80055b4:	81a5      	strh	r5, [r4, #12]
 80055b6:	e7cd      	b.n	8005554 <__smakebuf_r+0x18>
 80055b8:	080053a9 	.word	0x080053a9

080055bc <__malloc_lock>:
 80055bc:	4770      	bx	lr

080055be <__malloc_unlock>:
 80055be:	4770      	bx	lr

080055c0 <_raise_r>:
 80055c0:	291f      	cmp	r1, #31
 80055c2:	b538      	push	{r3, r4, r5, lr}
 80055c4:	4604      	mov	r4, r0
 80055c6:	460d      	mov	r5, r1
 80055c8:	d904      	bls.n	80055d4 <_raise_r+0x14>
 80055ca:	2316      	movs	r3, #22
 80055cc:	6003      	str	r3, [r0, #0]
 80055ce:	f04f 30ff 	mov.w	r0, #4294967295
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80055d6:	b112      	cbz	r2, 80055de <_raise_r+0x1e>
 80055d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80055dc:	b94b      	cbnz	r3, 80055f2 <_raise_r+0x32>
 80055de:	4620      	mov	r0, r4
 80055e0:	f000 f830 	bl	8005644 <_getpid_r>
 80055e4:	462a      	mov	r2, r5
 80055e6:	4601      	mov	r1, r0
 80055e8:	4620      	mov	r0, r4
 80055ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055ee:	f000 b817 	b.w	8005620 <_kill_r>
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d00a      	beq.n	800560c <_raise_r+0x4c>
 80055f6:	1c59      	adds	r1, r3, #1
 80055f8:	d103      	bne.n	8005602 <_raise_r+0x42>
 80055fa:	2316      	movs	r3, #22
 80055fc:	6003      	str	r3, [r0, #0]
 80055fe:	2001      	movs	r0, #1
 8005600:	e7e7      	b.n	80055d2 <_raise_r+0x12>
 8005602:	2400      	movs	r4, #0
 8005604:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005608:	4628      	mov	r0, r5
 800560a:	4798      	blx	r3
 800560c:	2000      	movs	r0, #0
 800560e:	e7e0      	b.n	80055d2 <_raise_r+0x12>

08005610 <raise>:
 8005610:	4b02      	ldr	r3, [pc, #8]	; (800561c <raise+0xc>)
 8005612:	4601      	mov	r1, r0
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	f7ff bfd3 	b.w	80055c0 <_raise_r>
 800561a:	bf00      	nop
 800561c:	2000000c 	.word	0x2000000c

08005620 <_kill_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4c07      	ldr	r4, [pc, #28]	; (8005640 <_kill_r+0x20>)
 8005624:	2300      	movs	r3, #0
 8005626:	4605      	mov	r5, r0
 8005628:	4608      	mov	r0, r1
 800562a:	4611      	mov	r1, r2
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	f7fb fae5 	bl	8000bfc <_kill>
 8005632:	1c43      	adds	r3, r0, #1
 8005634:	d102      	bne.n	800563c <_kill_r+0x1c>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	b103      	cbz	r3, 800563c <_kill_r+0x1c>
 800563a:	602b      	str	r3, [r5, #0]
 800563c:	bd38      	pop	{r3, r4, r5, pc}
 800563e:	bf00      	nop
 8005640:	200005e4 	.word	0x200005e4

08005644 <_getpid_r>:
 8005644:	f7fb bad2 	b.w	8000bec <_getpid>

08005648 <__sread>:
 8005648:	b510      	push	{r4, lr}
 800564a:	460c      	mov	r4, r1
 800564c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005650:	f000 f894 	bl	800577c <_read_r>
 8005654:	2800      	cmp	r0, #0
 8005656:	bfab      	itete	ge
 8005658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800565a:	89a3      	ldrhlt	r3, [r4, #12]
 800565c:	181b      	addge	r3, r3, r0
 800565e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005662:	bfac      	ite	ge
 8005664:	6563      	strge	r3, [r4, #84]	; 0x54
 8005666:	81a3      	strhlt	r3, [r4, #12]
 8005668:	bd10      	pop	{r4, pc}

0800566a <__swrite>:
 800566a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800566e:	461f      	mov	r7, r3
 8005670:	898b      	ldrh	r3, [r1, #12]
 8005672:	05db      	lsls	r3, r3, #23
 8005674:	4605      	mov	r5, r0
 8005676:	460c      	mov	r4, r1
 8005678:	4616      	mov	r6, r2
 800567a:	d505      	bpl.n	8005688 <__swrite+0x1e>
 800567c:	2302      	movs	r3, #2
 800567e:	2200      	movs	r2, #0
 8005680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005684:	f000 f868 	bl	8005758 <_lseek_r>
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800568e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005692:	81a3      	strh	r3, [r4, #12]
 8005694:	4632      	mov	r2, r6
 8005696:	463b      	mov	r3, r7
 8005698:	4628      	mov	r0, r5
 800569a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800569e:	f000 b817 	b.w	80056d0 <_write_r>

080056a2 <__sseek>:
 80056a2:	b510      	push	{r4, lr}
 80056a4:	460c      	mov	r4, r1
 80056a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056aa:	f000 f855 	bl	8005758 <_lseek_r>
 80056ae:	1c43      	adds	r3, r0, #1
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	bf15      	itete	ne
 80056b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80056b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056be:	81a3      	strheq	r3, [r4, #12]
 80056c0:	bf18      	it	ne
 80056c2:	81a3      	strhne	r3, [r4, #12]
 80056c4:	bd10      	pop	{r4, pc}

080056c6 <__sclose>:
 80056c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ca:	f000 b813 	b.w	80056f4 <_close_r>
	...

080056d0 <_write_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4c07      	ldr	r4, [pc, #28]	; (80056f0 <_write_r+0x20>)
 80056d4:	4605      	mov	r5, r0
 80056d6:	4608      	mov	r0, r1
 80056d8:	4611      	mov	r1, r2
 80056da:	2200      	movs	r2, #0
 80056dc:	6022      	str	r2, [r4, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	f7fb fac3 	bl	8000c6a <_write>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d102      	bne.n	80056ee <_write_r+0x1e>
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	b103      	cbz	r3, 80056ee <_write_r+0x1e>
 80056ec:	602b      	str	r3, [r5, #0]
 80056ee:	bd38      	pop	{r3, r4, r5, pc}
 80056f0:	200005e4 	.word	0x200005e4

080056f4 <_close_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4c06      	ldr	r4, [pc, #24]	; (8005710 <_close_r+0x1c>)
 80056f8:	2300      	movs	r3, #0
 80056fa:	4605      	mov	r5, r0
 80056fc:	4608      	mov	r0, r1
 80056fe:	6023      	str	r3, [r4, #0]
 8005700:	f7fb facf 	bl	8000ca2 <_close>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d102      	bne.n	800570e <_close_r+0x1a>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	b103      	cbz	r3, 800570e <_close_r+0x1a>
 800570c:	602b      	str	r3, [r5, #0]
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	200005e4 	.word	0x200005e4

08005714 <_fstat_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4c07      	ldr	r4, [pc, #28]	; (8005734 <_fstat_r+0x20>)
 8005718:	2300      	movs	r3, #0
 800571a:	4605      	mov	r5, r0
 800571c:	4608      	mov	r0, r1
 800571e:	4611      	mov	r1, r2
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	f7fb faca 	bl	8000cba <_fstat>
 8005726:	1c43      	adds	r3, r0, #1
 8005728:	d102      	bne.n	8005730 <_fstat_r+0x1c>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	b103      	cbz	r3, 8005730 <_fstat_r+0x1c>
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	bd38      	pop	{r3, r4, r5, pc}
 8005732:	bf00      	nop
 8005734:	200005e4 	.word	0x200005e4

08005738 <_isatty_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4c06      	ldr	r4, [pc, #24]	; (8005754 <_isatty_r+0x1c>)
 800573c:	2300      	movs	r3, #0
 800573e:	4605      	mov	r5, r0
 8005740:	4608      	mov	r0, r1
 8005742:	6023      	str	r3, [r4, #0]
 8005744:	f7fb fac9 	bl	8000cda <_isatty>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_isatty_r+0x1a>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	b103      	cbz	r3, 8005752 <_isatty_r+0x1a>
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	200005e4 	.word	0x200005e4

08005758 <_lseek_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4c07      	ldr	r4, [pc, #28]	; (8005778 <_lseek_r+0x20>)
 800575c:	4605      	mov	r5, r0
 800575e:	4608      	mov	r0, r1
 8005760:	4611      	mov	r1, r2
 8005762:	2200      	movs	r2, #0
 8005764:	6022      	str	r2, [r4, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	f7fb fac2 	bl	8000cf0 <_lseek>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_lseek_r+0x1e>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	b103      	cbz	r3, 8005776 <_lseek_r+0x1e>
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	200005e4 	.word	0x200005e4

0800577c <_read_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4c07      	ldr	r4, [pc, #28]	; (800579c <_read_r+0x20>)
 8005780:	4605      	mov	r5, r0
 8005782:	4608      	mov	r0, r1
 8005784:	4611      	mov	r1, r2
 8005786:	2200      	movs	r2, #0
 8005788:	6022      	str	r2, [r4, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	f7fb fa50 	bl	8000c30 <_read>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d102      	bne.n	800579a <_read_r+0x1e>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	b103      	cbz	r3, 800579a <_read_r+0x1e>
 8005798:	602b      	str	r3, [r5, #0]
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	200005e4 	.word	0x200005e4

080057a0 <_init>:
 80057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a2:	bf00      	nop
 80057a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a6:	bc08      	pop	{r3}
 80057a8:	469e      	mov	lr, r3
 80057aa:	4770      	bx	lr

080057ac <_fini>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	bf00      	nop
 80057b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b2:	bc08      	pop	{r3}
 80057b4:	469e      	mov	lr, r3
 80057b6:	4770      	bx	lr
