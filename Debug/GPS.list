
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d30  08003d30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d38  08003d38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08003d4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003d4c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f438  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d9c  00000000  00000000  0002f474  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  00031210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  000320f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002632c  00000000  00000000  00032ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bdba  00000000  00000000  00059214  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000efd34  00000000  00000000  00064fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154d02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea0  00000000  00000000  00154d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cd0 	.word	0x08003cd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003cd0 	.word	0x08003cd0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 faff 	bl	8000ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f809 	bl	80004e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f91c 	bl	8000710 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004d8:	f000 f86c 	bl	80005b4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004dc:	f000 f8b8 	bl	8000650 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8e6 	bl	80006b0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x1c>

080004e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b0b8      	sub	sp, #224	; 0xe0
 80004ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004f0:	2244      	movs	r2, #68	; 0x44
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 fbe3 	bl	8003cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2288      	movs	r2, #136	; 0x88
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f003 fbd5 	bl	8003cc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000516:	2310      	movs	r3, #16
 8000518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800051c:	2301      	movs	r3, #1
 800051e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052e:	2300      	movs	r3, #0
 8000530:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fed7 	bl	80012ec <HAL_RCC_OscConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000544:	f000 f93c 	bl	80007c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	230f      	movs	r3, #15
 800054a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800054e:	2300      	movs	r3, #0
 8000550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000566:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f001 faa3 	bl	8001ab8 <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000578:	f000 f922 	bl	80007c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800057c:	2303      	movs	r3, #3
 800057e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000580:	2300      	movs	r3, #0
 8000582:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000584:	2300      	movs	r3, #0
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fc98 	bl	8001ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000596:	f000 f913 	bl	80007c0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059e:	f000 fe4f 	bl	8001240 <HAL_PWREx_ControlVoltageScaling>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005a8:	f000 f90a 	bl	80007c0 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	37e0      	adds	r7, #224	; 0xe0
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_TIM2_Init+0x98>)
 80005d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_TIM2_Init+0x98>)
 80005dc:	220f      	movs	r2, #15
 80005de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_TIM2_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_TIM2_Init+0x98>)
 80005e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_TIM2_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_TIM2_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <MX_TIM2_Init+0x98>)
 80005fc:	f002 f910 	bl	8002820 <HAL_TIM_Base_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000606:	f000 f8db 	bl	80007c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_TIM2_Init+0x98>)
 8000618:	f002 fa78 	bl	8002b0c <HAL_TIM_ConfigClockSource>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000622:	f000 f8cd 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4619      	mov	r1, r3
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_TIM2_Init+0x98>)
 8000634:	f002 fc8a 	bl	8002f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800063e:	f000 f8bf 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3720      	adds	r7, #32
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000a8 	.word	0x200000a8

08000650 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_USART1_UART_Init+0x58>)
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <MX_USART1_UART_Init+0x5c>)
 8000658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_USART1_UART_Init+0x58>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_USART1_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_USART1_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_USART1_UART_Init+0x58>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_USART1_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_USART1_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART1_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_USART1_UART_Init+0x58>)
 8000694:	f002 fd00 	bl	8003098 <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800069e:	f000 f88f 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000028 	.word	0x20000028
 80006ac:	40013800 	.word	0x40013800

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_USART2_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006f4:	f002 fcd0 	bl	8003098 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f85f 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000f4 	.word	0x200000f4
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <MX_GPIO_Init+0xa4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <MX_GPIO_Init+0xa4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <MX_GPIO_Init+0xa4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_GPIO_Init+0xa4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_GPIO_Init+0xa4>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_GPIO_Init+0xa4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2120      	movs	r1, #32
 800075a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075e:	f000 fd25 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_GPIO_Init+0xa8>)
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_GPIO_Init+0xac>)
 8000778:	f000 fb70 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800077c:	2320      	movs	r3, #32
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 fb61 	bl	8000e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fae5 	bl	8000d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a4:	2028      	movs	r0, #40	; 0x28
 80007a6:	f000 fafe 	bl	8000da6 <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	10110000 	.word	0x10110000
 80007bc:	48000800 	.word	0x48000800

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <HAL_MspInit+0x44>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <HAL_MspInit+0x44>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6613      	str	r3, [r2, #96]	; 0x60
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_MspInit+0x44>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x44>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x44>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6593      	str	r3, [r2, #88]	; 0x58
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x44>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000828:	d113      	bne.n	8000852 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_TIM_Base_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <HAL_TIM_Base_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6593      	str	r3, [r2, #88]	; 0x58
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_TIM_Base_MspInit+0x44>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	201c      	movs	r0, #28
 8000848:	f000 fa91 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800084c:	201c      	movs	r0, #28
 800084e:	f000 faaa 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a37      	ldr	r2, [pc, #220]	; (800095c <HAL_UART_MspInit+0xfc>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d132      	bne.n	80008e8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000882:	4b37      	ldr	r3, [pc, #220]	; (8000960 <HAL_UART_MspInit+0x100>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	4a36      	ldr	r2, [pc, #216]	; (8000960 <HAL_UART_MspInit+0x100>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6613      	str	r3, [r2, #96]	; 0x60
 800088e:	4b34      	ldr	r3, [pc, #208]	; (8000960 <HAL_UART_MspInit+0x100>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b31      	ldr	r3, [pc, #196]	; (8000960 <HAL_UART_MspInit+0x100>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a30      	ldr	r2, [pc, #192]	; (8000960 <HAL_UART_MspInit+0x100>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <HAL_UART_MspInit+0x100>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1_TX_Pin|U1_RX_Pin;
 80008b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008c4:	2307      	movs	r3, #7
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f000 fac3 	bl	8000e5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2025      	movs	r0, #37	; 0x25
 80008dc:	f000 fa47 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008e0:	2025      	movs	r0, #37	; 0x25
 80008e2:	f000 fa60 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e6:	e035      	b.n	8000954 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1d      	ldr	r2, [pc, #116]	; (8000964 <HAL_UART_MspInit+0x104>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d130      	bne.n	8000954 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_UART_MspInit+0x100>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <HAL_UART_MspInit+0x100>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	6593      	str	r3, [r2, #88]	; 0x58
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <HAL_UART_MspInit+0x100>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_UART_MspInit+0x100>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <HAL_UART_MspInit+0x100>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_UART_MspInit+0x100>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U2_TX_Pin|U2_RX_Pin;
 8000922:	230c      	movs	r3, #12
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000932:	2307      	movs	r3, #7
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f000 fa8c 	bl	8000e5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2026      	movs	r0, #38	; 0x26
 800094a:	f000 fa10 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800094e:	2026      	movs	r0, #38	; 0x26
 8000950:	f000 fa29 	bl	8000da6 <HAL_NVIC_EnableIRQ>
}
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40013800 	.word	0x40013800
 8000960:	40021000 	.word	0x40021000
 8000964:	40004400 	.word	0x40004400

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f8dc 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM2_IRQHandler+0x10>)
 80009ca:	f001 ff80 	bl	80028ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000a8 	.word	0x200000a8

080009d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <USART1_IRQHandler+0x10>)
 80009de:	f002 fba9 	bl	8003134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000028 	.word	0x20000028

080009ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <USART2_IRQHandler+0x10>)
 80009f2:	f002 fb9f 	bl	8003134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000f4 	.word	0x200000f4

08000a00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a08:	f000 fbe8 	bl	80011dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <SystemInit+0x64>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <SystemInit+0x64>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <SystemInit+0x68>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <SystemInit+0x68>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <SystemInit+0x68>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <SystemInit+0x68>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <SystemInit+0x68>)
 8000a3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <SystemInit+0x68>)
 8000a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <SystemInit+0x68>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <SystemInit+0x68>)
 8000a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <SystemInit+0x68>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <SystemInit+0x64>)
 8000a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a66:	609a      	str	r2, [r3, #8]
#endif
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00
 8000a78:	40021000 	.word	0x40021000

08000a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a80:	f7ff ffc6 	bl	8000a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a86:	e003      	b.n	8000a90 <LoopCopyDataInit>

08000a88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a8e:	3104      	adds	r1, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a98:	d3f6      	bcc.n	8000a88 <CopyDataInit>
	ldr	r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a9c:	e002      	b.n	8000aa4 <LoopFillZerobss>

08000a9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000aa0:	f842 3b04 	str.w	r3, [r2], #4

08000aa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <LoopForever+0x16>)
	cmp	r2, r3
 8000aa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000aa8:	d3f9      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f003 f8e5 	bl	8003c78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aae:	f7ff fd0b 	bl	80004c8 <main>

08000ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ab8:	08003d40 	.word	0x08003d40
	ldr	r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ac0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ac4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ac8:	20000178 	.word	0x20000178

08000acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_2_IRQHandler>

08000ace <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f93d 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f80e 	bl	8000b00 <HAL_InitTick>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	e001      	b.n	8000af4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af0:	f7ff fe6e 	bl	80007d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_InitTick+0x6c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d023      	beq.n	8000b5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <HAL_InitTick+0x70>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <HAL_InitTick+0x6c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f949 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10f      	bne.n	8000b56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d809      	bhi.n	8000b50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b44:	f000 f913 	bl	8000d6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b48:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_InitTick+0x74>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e007      	b.n	8000b60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	e004      	b.n	8000b60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	e001      	b.n	8000b60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000174 	.word	0x20000174

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000174 	.word	0x20000174

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff29 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff3e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff31 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa2 	bl	8000d14 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d005      	beq.n	8000dfe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2204      	movs	r2, #4
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e029      	b.n	8000e52 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 020e 	bic.w	r2, r2, #14
 8000e0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0201 	bic.w	r2, r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f003 021c 	and.w	r2, r3, #28
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	4798      	blx	r3
    }
  }
  return status;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	e17f      	b.n	800116c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 8171 	beq.w	8001166 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d00b      	beq.n	8000ea4 <HAL_GPIO_Init+0x48>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e98:	2b11      	cmp	r3, #17
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d130      	bne.n	8000f06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eda:	2201      	movs	r2, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	f003 0201 	and.w	r2, r3, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d118      	bne.n	8000f44 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	f003 0201 	and.w	r2, r3, #1
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x128>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b12      	cmp	r3, #18
 8000f82:	d123      	bne.n	8000fcc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	6939      	ldr	r1, [r7, #16]
 8000fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0203 	and.w	r2, r3, #3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80ac 	beq.w	8001166 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b5e      	ldr	r3, [pc, #376]	; (8001188 <HAL_GPIO_Init+0x32c>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	4a5d      	ldr	r2, [pc, #372]	; (8001188 <HAL_GPIO_Init+0x32c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6613      	str	r3, [r2, #96]	; 0x60
 800101a:	4b5b      	ldr	r3, [pc, #364]	; (8001188 <HAL_GPIO_Init+0x32c>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001026:	4a59      	ldr	r2, [pc, #356]	; (800118c <HAL_GPIO_Init+0x330>)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001050:	d025      	beq.n	800109e <HAL_GPIO_Init+0x242>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <HAL_GPIO_Init+0x334>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d01f      	beq.n	800109a <HAL_GPIO_Init+0x23e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x338>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x23a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x33c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x236>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4b      	ldr	r2, [pc, #300]	; (800119c <HAL_GPIO_Init+0x340>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x232>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4a      	ldr	r2, [pc, #296]	; (80011a0 <HAL_GPIO_Init+0x344>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x22e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a49      	ldr	r2, [pc, #292]	; (80011a4 <HAL_GPIO_Init+0x348>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x22a>
 8001082:	2306      	movs	r3, #6
 8001084:	e00c      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 8001086:	2307      	movs	r3, #7
 8001088:	e00a      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 800108a:	2305      	movs	r3, #5
 800108c:	e008      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 800108e:	2304      	movs	r3, #4
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 8001092:	2303      	movs	r3, #3
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 800109e:	2300      	movs	r3, #0
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	f002 0203 	and.w	r2, r2, #3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4093      	lsls	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010b0:	4936      	ldr	r1, [pc, #216]	; (800118c <HAL_GPIO_Init+0x330>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HAL_GPIO_Init+0x34c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e2:	4a31      	ldr	r2, [pc, #196]	; (80011a8 <HAL_GPIO_Init+0x34c>)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <HAL_GPIO_Init+0x34c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800110c:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <HAL_GPIO_Init+0x34c>)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <HAL_GPIO_Init+0x34c>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <HAL_GPIO_Init+0x34c>)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_GPIO_Init+0x34c>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001160:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <HAL_GPIO_Init+0x34c>)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa22 f303 	lsr.w	r3, r2, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	f47f ae78 	bne.w	8000e6c <HAL_GPIO_Init+0x10>
  }
}
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	40021000 	.word	0x40021000
 800118c:	40010000 	.word	0x40010000
 8001190:	48000400 	.word	0x48000400
 8001194:	48000800 	.word	0x48000800
 8001198:	48000c00 	.word	0x48000c00
 800119c:	48001000 	.word	0x48001000
 80011a0:	48001400 	.word	0x48001400
 80011a4:	48001800 	.word	0x48001800
 80011a8:	40010400 	.word	0x40010400

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e8:	695a      	ldr	r2, [r3, #20]
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f806 	bl	800120c <HAL_GPIO_EXTI_Callback>
  }
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_PWREx_GetVoltageRange+0x18>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40007000 	.word	0x40007000

08001240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800124e:	d130      	bne.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800125c:	d038      	beq.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2232      	movs	r2, #50	; 0x32
 8001274:	fb02 f303 	mul.w	r3, r2, r3
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9b      	lsrs	r3, r3, #18
 8001280:	3301      	adds	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001284:	e002      	b.n	800128c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3b01      	subs	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001298:	d102      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f2      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ac:	d110      	bne.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e00f      	b.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012be:	d007      	beq.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c8:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40007000 	.word	0x40007000
 80012e4:	20000000 	.word	0x20000000
 80012e8:	431bde83 	.word	0x431bde83

080012ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e3d4      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fe:	4ba1      	ldr	r3, [pc, #644]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001308:	4b9e      	ldr	r3, [pc, #632]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80e4 	beq.w	80014e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_RCC_OscConfig+0x4a>
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	f040 808b 	bne.w	8001444 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b01      	cmp	r3, #1
 8001332:	f040 8087 	bne.w	8001444 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001336:	4b93      	ldr	r3, [pc, #588]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x62>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e3ac      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	4b8c      	ldr	r3, [pc, #560]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <HAL_RCC_OscConfig+0x7c>
 800135e:	4b89      	ldr	r3, [pc, #548]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001366:	e005      	b.n	8001374 <HAL_RCC_OscConfig+0x88>
 8001368:	4b86      	ldr	r3, [pc, #536]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800136a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001374:	4293      	cmp	r3, r2
 8001376:	d223      	bcs.n	80013c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fd3f 	bl	8001e00 <RCC_SetFlashLatencyFromMSIRange>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e38d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b7d      	ldr	r3, [pc, #500]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a7c      	ldr	r2, [pc, #496]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b7a      	ldr	r3, [pc, #488]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4977      	ldr	r1, [pc, #476]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b76      	ldr	r3, [pc, #472]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	4972      	ldr	r1, [pc, #456]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
 80013be:	e025      	b.n	800140c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c0:	4b70      	ldr	r3, [pc, #448]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a6f      	ldr	r2, [pc, #444]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b6d      	ldr	r3, [pc, #436]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	496a      	ldr	r1, [pc, #424]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013de:	4b69      	ldr	r3, [pc, #420]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	4965      	ldr	r1, [pc, #404]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fcff 	bl	8001e00 <RCC_SetFlashLatencyFromMSIRange>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e34d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800140c:	f000 fc36 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001410:	4601      	mov	r1, r0
 8001412:	4b5c      	ldr	r3, [pc, #368]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	4a5a      	ldr	r2, [pc, #360]	; (8001588 <HAL_RCC_OscConfig+0x29c>)
 800141e:	5cd3      	ldrb	r3, [r2, r3]
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	fa21 f303 	lsr.w	r3, r1, r3
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_RCC_OscConfig+0x2a0>)
 800142a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800142c:	4b58      	ldr	r3, [pc, #352]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fb65 	bl	8000b00 <HAL_InitTick>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d052      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	e331      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d032      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800144c:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001458:	f7ff fba2 	bl	8000ba0 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001460:	f7ff fb9e 	bl	8000ba0 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e31a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001472:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147e:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a40      	ldr	r2, [pc, #256]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	493b      	ldr	r1, [pc, #236]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	4936      	ldr	r1, [pc, #216]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
 80014b0:	e01a      	b.n	80014e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a33      	ldr	r2, [pc, #204]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014be:	f7ff fb6f 	bl	8000ba0 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c6:	f7ff fb6b 	bl	8000ba0 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e2e7      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x1da>
 80014e4:	e000      	b.n	80014e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d074      	beq.n	80015de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x21a>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d10e      	bne.n	800151e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d10b      	bne.n	800151e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d064      	beq.n	80015dc <HAL_RCC_OscConfig+0x2f0>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d160      	bne.n	80015dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e2c4      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x24a>
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a15      	ldr	r2, [pc, #84]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800152e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e01d      	b.n	8001572 <HAL_RCC_OscConfig+0x286>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153e:	d10c      	bne.n	800155a <HAL_RCC_OscConfig+0x26e>
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e00b      	b.n	8001572 <HAL_RCC_OscConfig+0x286>
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_RCC_OscConfig+0x298>)
 800156c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001570:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fb11 	bl	8000ba0 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001580:	e011      	b.n	80015a6 <HAL_RCC_OscConfig+0x2ba>
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	08003ce8 	.word	0x08003ce8
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fb04 	bl	8000ba0 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e280      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a6:	4baf      	ldr	r3, [pc, #700]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x2a8>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff faf4 	bl	8000ba0 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff faf0 	bl	8000ba0 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e26c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ce:	4ba5      	ldr	r3, [pc, #660]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x2d0>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d060      	beq.n	80016ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x310>
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d119      	bne.n	800162a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d116      	bne.n	800162a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fc:	4b99      	ldr	r3, [pc, #612]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x328>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e249      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b93      	ldr	r3, [pc, #588]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	4990      	ldr	r1, [pc, #576]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001628:	e040      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d023      	beq.n	800167a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001632:	4b8c      	ldr	r3, [pc, #560]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a8b      	ldr	r2, [pc, #556]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff faaf 	bl	8000ba0 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff faab 	bl	8000ba0 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e227      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001658:	4b82      	ldr	r3, [pc, #520]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b7f      	ldr	r3, [pc, #508]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	497c      	ldr	r1, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e018      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b7a      	ldr	r3, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a79      	ldr	r2, [pc, #484]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7ff fa8b 	bl	8000ba0 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168e:	f7ff fa87 	bl	8000ba0 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e203      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a0:	4b70      	ldr	r3, [pc, #448]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d03c      	beq.n	8001732 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01c      	beq.n	80016fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c6:	4a67      	ldr	r2, [pc, #412]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fa66 	bl	8000ba0 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff fa62 	bl	8000ba0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1de      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ea:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80016ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ef      	beq.n	80016d8 <HAL_RCC_OscConfig+0x3ec>
 80016f8:	e01b      	b.n	8001732 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fa:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fa49 	bl	8000ba0 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff fa45 	bl	8000ba0 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1c1      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001724:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ef      	bne.n	8001712 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80a6 	beq.w	800188c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001744:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10d      	bne.n	800176c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	4b44      	ldr	r3, [pc, #272]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	4a43      	ldr	r2, [pc, #268]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175a:	6593      	str	r3, [r2, #88]	; 0x58
 800175c:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001768:	2301      	movs	r3, #1
 800176a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176c:	4b3e      	ldr	r3, [pc, #248]	; (8001868 <HAL_RCC_OscConfig+0x57c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d118      	bne.n	80017aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001778:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_RCC_OscConfig+0x57c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a3a      	ldr	r2, [pc, #232]	; (8001868 <HAL_RCC_OscConfig+0x57c>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001784:	f7ff fa0c 	bl	8000ba0 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178c:	f7ff fa08 	bl	8000ba0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e184      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179e:	4b32      	ldr	r3, [pc, #200]	; (8001868 <HAL_RCC_OscConfig+0x57c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4d8>
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b8:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c2:	e024      	b.n	800180e <HAL_RCC_OscConfig+0x522>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d110      	bne.n	80017ee <HAL_RCC_OscConfig+0x502>
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d2:	4a24      	ldr	r2, [pc, #144]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ec:	e00f      	b.n	800180e <HAL_RCC_OscConfig+0x522>
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f4:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001806:	f023 0304 	bic.w	r3, r3, #4
 800180a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d016      	beq.n	8001844 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff f9c3 	bl	8000ba0 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff f9bf 	bl	8000ba0 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	; 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e139      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_OscConfig+0x578>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0ed      	beq.n	800181e <HAL_RCC_OscConfig+0x532>
 8001842:	e01a      	b.n	800187a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff f9ac 	bl	8000ba0 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800184a:	e00f      	b.n	800186c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff f9a8 	bl	8000ba0 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d906      	bls.n	800186c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e122      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800186c:	4b90      	ldr	r3, [pc, #576]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1e8      	bne.n	800184c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800187a:	7ffb      	ldrb	r3, [r7, #31]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4b8b      	ldr	r3, [pc, #556]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	4a8a      	ldr	r2, [pc, #552]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 8108 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	2b02      	cmp	r3, #2
 800189c:	f040 80d0 	bne.w	8001a40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018a0:	4b83      	ldr	r3, [pc, #524]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d130      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	3b01      	subs	r3, #1
 80018c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d127      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d11f      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e0:	2a07      	cmp	r2, #7
 80018e2:	bf14      	ite	ne
 80018e4:	2201      	movne	r2, #1
 80018e6:	2200      	moveq	r2, #0
 80018e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d113      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	3b01      	subs	r3, #1
 80018fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d109      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d06e      	beq.n	80019f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d069      	beq.n	80019f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800191c:	4b64      	ldr	r3, [pc, #400]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001928:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b7      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001938:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a5c      	ldr	r2, [pc, #368]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800193e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001942:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001944:	f7ff f92c 	bl	8000ba0 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f928 	bl	8000ba0 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0a4      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195e:	4b54      	ldr	r3, [pc, #336]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196a:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	4b51      	ldr	r3, [pc, #324]	; (8001ab4 <HAL_RCC_OscConfig+0x7c8>)
 8001970:	4013      	ands	r3, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800197a:	3a01      	subs	r2, #1
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001984:	0212      	lsls	r2, r2, #8
 8001986:	4311      	orrs	r1, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800198c:	0852      	lsrs	r2, r2, #1
 800198e:	3a01      	subs	r2, #1
 8001990:	0552      	lsls	r2, r2, #21
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001998:	0852      	lsrs	r2, r2, #1
 800199a:	3a01      	subs	r2, #1
 800199c:	0652      	lsls	r2, r2, #25
 800199e:	4311      	orrs	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a4:	0912      	lsrs	r2, r2, #4
 80019a6:	0452      	lsls	r2, r2, #17
 80019a8:	430a      	orrs	r2, r1
 80019aa:	4941      	ldr	r1, [pc, #260]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019b0:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3e      	ldr	r2, [pc, #248]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019bc:	4b3c      	ldr	r3, [pc, #240]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a3b      	ldr	r2, [pc, #236]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c8:	f7ff f8ea 	bl	8000ba0 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f8e6 	bl	8000ba0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e062      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ee:	e05a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e059      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d152      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a18:	f7ff f8c2 	bl	8000ba0 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f8be 	bl	8000ba0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e03a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x734>
 8001a3e:	e032      	b.n	8001aa6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d02d      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a64:	f023 0303 	bic.w	r3, r3, #3
 8001a68:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f891 	bl	8000ba0 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff f88d 	bl	8000ba0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e009      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_OscConfig+0x7c4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x796>
 8001aa0:	e001      	b.n	8001aa6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	f99d808c 	.word	0xf99d808c

08001ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0c8      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d910      	bls.n	8001afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 0207 	bic.w	r2, r3, #7
 8001ae2:	4961      	ldr	r1, [pc, #388]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0b0      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d04c      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b10:	4b56      	ldr	r3, [pc, #344]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d121      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e09e      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d115      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e092      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b40:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e086      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b50:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e07e      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b60:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 0203 	bic.w	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	493f      	ldr	r1, [pc, #252]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b72:	f7ff f815 	bl	8000ba0 <HAL_GetTick>
 8001b76:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7a:	f7ff f811 	bl	8000ba0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e066      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 020c 	and.w	r2, r3, #12
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d1eb      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	492c      	ldr	r1, [pc, #176]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d210      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 0207 	bic.w	r2, r3, #7
 8001bd6:	4924      	ldr	r1, [pc, #144]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x1b0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e036      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4918      	ldr	r1, [pc, #96]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4910      	ldr	r1, [pc, #64]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c2e:	f000 f825 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c32:	4601      	mov	r1, r0
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_RCC_ClockConfig+0x1b4>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	fa21 f303 	lsr.w	r3, r1, r3
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe ff54 	bl	8000b00 <HAL_InitTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08003ce8 	.word	0x08003ce8
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d121      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d11e      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cb0:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e005      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cd8:	4a2a      	ldr	r2, [pc, #168]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d102      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cf4:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	e004      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d133      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d002      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa4>
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0xaa>
 8001d1e:	e005      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d22:	617b      	str	r3, [r7, #20]
      break;
 8001d24:	e005      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d28:	617b      	str	r3, [r7, #20]
      break;
 8001d2a:	e002      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	617b      	str	r3, [r7, #20]
      break;
 8001d30:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	fb02 f203 	mul.w	r2, r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0e5b      	lsrs	r3, r3, #25
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d72:	69bb      	ldr	r3, [r7, #24]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3724      	adds	r7, #36	; 0x24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40021000 	.word	0x40021000
 8001d84:	08003d00 	.word	0x08003d00
 8001d88:	00f42400 	.word	0x00f42400
 8001d8c:	007a1200 	.word	0x007a1200

08001d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000000 	.word	0x20000000

08001da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dac:	f7ff fff0 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001db0:	4601      	mov	r1, r0
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dbe:	5cd3      	ldrb	r3, [r2, r3]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08003cf8 	.word	0x08003cf8

08001dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd8:	f7ff ffda 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001ddc:	4601      	mov	r1, r0
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0adb      	lsrs	r3, r3, #11
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	08003cf8 	.word	0x08003cf8

08001e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e18:	f7ff fa04 	bl	8001224 <HAL_PWREx_GetVoltageRange>
 8001e1c:	6178      	str	r0, [r7, #20]
 8001e1e:	e014      	b.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	4a24      	ldr	r2, [pc, #144]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2c:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e38:	f7ff f9f4 	bl	8001224 <HAL_PWREx_GetVoltageRange>
 8001e3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e50:	d10b      	bne.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d919      	bls.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2ba0      	cmp	r3, #160	; 0xa0
 8001e5c:	d902      	bls.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e5e:	2302      	movs	r3, #2
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	e013      	b.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e64:	2301      	movs	r3, #1
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e010      	b.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b80      	cmp	r3, #128	; 0x80
 8001e6e:	d902      	bls.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e70:	2303      	movs	r3, #3
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	e00a      	b.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b80      	cmp	r3, #128	; 0x80
 8001e7a:	d102      	bne.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e004      	b.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b70      	cmp	r3, #112	; 0x70
 8001e86:	d101      	bne.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e88:	2301      	movs	r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 0207 	bic.w	r2, r3, #7
 8001e94:	4909      	ldr	r1, [pc, #36]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40022000 	.word	0x40022000

08001ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ec8:	2300      	movs	r3, #0
 8001eca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ecc:	2300      	movs	r3, #0
 8001ece:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d03f      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee4:	d01c      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eea:	d802      	bhi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001ef0:	e01f      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ef6:	d003      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ef8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001efc:	d01c      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001efe:	e018      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f00:	4b85      	ldr	r3, [pc, #532]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a84      	ldr	r2, [pc, #528]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f0c:	e015      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fab9 	bl	800248c <RCCEx_PLLSAI1_Config>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1e:	e00c      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3320      	adds	r3, #32
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fba0 	bl	800266c <RCCEx_PLLSAI2_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f30:	e003      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	74fb      	strb	r3, [r7, #19]
      break;
 8001f36:	e000      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f3a:	7cfb      	ldrb	r3, [r7, #19]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f40:	4b75      	ldr	r3, [pc, #468]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f4e:	4972      	ldr	r1, [pc, #456]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f56:	e001      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d03f      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f70:	d01c      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001f72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f76:	d802      	bhi.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00e      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001f7c:	e01f      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f82:	d003      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001f84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f88:	d01c      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001f8a:	e018      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f8c:	4b62      	ldr	r3, [pc, #392]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a61      	ldr	r2, [pc, #388]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f98:	e015      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fa73 	bl	800248c <RCCEx_PLLSAI1_Config>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001faa:	e00c      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3320      	adds	r3, #32
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fb5a 	bl	800266c <RCCEx_PLLSAI2_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fbc:	e003      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fc6:	7cfb      	ldrb	r3, [r7, #19]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fcc:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fda:	494f      	ldr	r1, [pc, #316]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fe2:	e001      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80a0 	beq.w	8002136 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800200a:	2300      	movs	r3, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	4a40      	ldr	r2, [pc, #256]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201a:	6593      	str	r3, [r2, #88]	; 0x58
 800201c:	4b3e      	ldr	r3, [pc, #248]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002028:	2301      	movs	r3, #1
 800202a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800202c:	4b3b      	ldr	r3, [pc, #236]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a3a      	ldr	r2, [pc, #232]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002038:	f7fe fdb2 	bl	8000ba0 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800203e:	e009      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002040:	f7fe fdae 	bl	8000ba0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d902      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	74fb      	strb	r3, [r7, #19]
        break;
 8002052:	e005      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002054:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d15c      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002070:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01f      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	d019      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a20      	ldr	r2, [pc, #128]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7fe fd6d 	bl	8000ba0 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c8:	e00b      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7fe fd69 	bl	8000ba0 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d902      	bls.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	74fb      	strb	r3, [r7, #19]
            break;
 80020e0:	e006      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ec      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002106:	4904      	ldr	r1, [pc, #16]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800210e:	e009      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	74bb      	strb	r3, [r7, #18]
 8002114:	e006      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002124:	7c7b      	ldrb	r3, [r7, #17]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d105      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212a:	4b9e      	ldr	r3, [pc, #632]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	4a9d      	ldr	r2, [pc, #628]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002142:	4b98      	ldr	r3, [pc, #608]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	f023 0203 	bic.w	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002150:	4994      	ldr	r1, [pc, #592]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002164:	4b8f      	ldr	r3, [pc, #572]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f023 020c 	bic.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	498c      	ldr	r1, [pc, #560]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002186:	4b87      	ldr	r3, [pc, #540]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4983      	ldr	r1, [pc, #524]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021a8:	4b7e      	ldr	r3, [pc, #504]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	497b      	ldr	r1, [pc, #492]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ca:	4b76      	ldr	r3, [pc, #472]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	4972      	ldr	r1, [pc, #456]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ec:	4b6d      	ldr	r3, [pc, #436]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	496a      	ldr	r1, [pc, #424]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220e:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	4961      	ldr	r1, [pc, #388]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002230:	4b5c      	ldr	r3, [pc, #368]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223e:	4959      	ldr	r1, [pc, #356]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002252:	4b54      	ldr	r3, [pc, #336]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002260:	4950      	ldr	r1, [pc, #320]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002274:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	4948      	ldr	r1, [pc, #288]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002296:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	493f      	ldr	r1, [pc, #252]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d028      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022c6:	4937      	ldr	r1, [pc, #220]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d8:	4b32      	ldr	r3, [pc, #200]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a31      	ldr	r2, [pc, #196]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e2:	60d3      	str	r3, [r2, #12]
 80022e4:	e011      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022ee:	d10c      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3304      	adds	r3, #4
 80022f4:	2101      	movs	r1, #1
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f8c8 	bl	800248c <RCCEx_PLLSAI1_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d028      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002316:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	491f      	ldr	r1, [pc, #124]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002334:	d106      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4a1a      	ldr	r2, [pc, #104]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800233c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002340:	60d3      	str	r3, [r2, #12]
 8002342:	e011      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800234c:	d10c      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f899 	bl	800248c <RCCEx_PLLSAI1_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02b      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002392:	d109      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a02      	ldr	r2, [pc, #8]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800239a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800239e:	60d3      	str	r3, [r2, #12]
 80023a0:	e014      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2101      	movs	r1, #1
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f867 	bl	800248c <RCCEx_PLLSAI1_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02f      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023e6:	4928      	ldr	r1, [pc, #160]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023f6:	d10d      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	2102      	movs	r1, #2
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f844 	bl	800248c <RCCEx_PLLSAI1_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d014      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	74bb      	strb	r3, [r7, #18]
 8002412:	e011      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800241c:	d10c      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3320      	adds	r3, #32
 8002422:	2102      	movs	r1, #2
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f921 	bl	800266c <RCCEx_PLLSAI2_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002452:	490d      	ldr	r1, [pc, #52]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002476:	4904      	ldr	r1, [pc, #16]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800247e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000

0800248c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800249a:	4b73      	ldr	r3, [pc, #460]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d018      	beq.n	80024d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024a6:	4b70      	ldr	r3, [pc, #448]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0203 	and.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d10d      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
       ||
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024be:	4b6a      	ldr	r3, [pc, #424]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
       ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d044      	beq.n	800255c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	e041      	b.n	800255c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d00c      	beq.n	80024fa <RCCEx_PLLSAI1_Config+0x6e>
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d013      	beq.n	800250c <RCCEx_PLLSAI1_Config+0x80>
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d120      	bne.n	800252a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024e8:	4b5f      	ldr	r3, [pc, #380]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d11d      	bne.n	8002530 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f8:	e01a      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024fa:	4b5b      	ldr	r3, [pc, #364]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	2b00      	cmp	r3, #0
 8002504:	d116      	bne.n	8002534 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250a:	e013      	b.n	8002534 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800250c:	4b56      	ldr	r3, [pc, #344]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10f      	bne.n	8002538 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002528:	e006      	b.n	8002538 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
      break;
 800252e:	e004      	b.n	800253a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002530:	bf00      	nop
 8002532:	e002      	b.n	800253a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002534:	bf00      	nop
 8002536:	e000      	b.n	800253a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002538:	bf00      	nop
    }

    if(status == HAL_OK)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10d      	bne.n	800255c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002540:	4b49      	ldr	r3, [pc, #292]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	3b01      	subs	r3, #1
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	430b      	orrs	r3, r1
 8002556:	4944      	ldr	r1, [pc, #272]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d17d      	bne.n	800265e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a40      	ldr	r2, [pc, #256]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002568:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800256c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256e:	f7fe fb17 	bl	8000ba0 <HAL_GetTick>
 8002572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002574:	e009      	b.n	800258a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002576:	f7fe fb13 	bl	8000ba0 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d902      	bls.n	800258a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	73fb      	strb	r3, [r7, #15]
        break;
 8002588:	e005      	b.n	8002596 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ef      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d160      	bne.n	800265e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d111      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6892      	ldr	r2, [r2, #8]
 80025b2:	0211      	lsls	r1, r2, #8
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68d2      	ldr	r2, [r2, #12]
 80025b8:	0912      	lsrs	r2, r2, #4
 80025ba:	0452      	lsls	r2, r2, #17
 80025bc:	430a      	orrs	r2, r1
 80025be:	492a      	ldr	r1, [pc, #168]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	610b      	str	r3, [r1, #16]
 80025c4:	e027      	b.n	8002616 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d112      	bne.n	80025f2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6892      	ldr	r2, [r2, #8]
 80025dc:	0211      	lsls	r1, r2, #8
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6912      	ldr	r2, [r2, #16]
 80025e2:	0852      	lsrs	r2, r2, #1
 80025e4:	3a01      	subs	r2, #1
 80025e6:	0552      	lsls	r2, r2, #21
 80025e8:	430a      	orrs	r2, r1
 80025ea:	491f      	ldr	r1, [pc, #124]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	610b      	str	r3, [r1, #16]
 80025f0:	e011      	b.n	8002616 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6892      	ldr	r2, [r2, #8]
 8002602:	0211      	lsls	r1, r2, #8
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6952      	ldr	r2, [r2, #20]
 8002608:	0852      	lsrs	r2, r2, #1
 800260a:	3a01      	subs	r2, #1
 800260c:	0652      	lsls	r2, r2, #25
 800260e:	430a      	orrs	r2, r1
 8002610:	4915      	ldr	r1, [pc, #84]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a13      	ldr	r2, [pc, #76]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800261c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002620:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fabd 	bl	8000ba0 <HAL_GetTick>
 8002626:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002628:	e009      	b.n	800263e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800262a:	f7fe fab9 	bl	8000ba0 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d902      	bls.n	800263e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	73fb      	strb	r3, [r7, #15]
          break;
 800263c:	e005      	b.n	800264a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0ef      	beq.n	800262a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000

0800266c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800267a:	4b68      	ldr	r3, [pc, #416]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d018      	beq.n	80026b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002686:	4b65      	ldr	r3, [pc, #404]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0203 	and.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d10d      	bne.n	80026b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
       ||
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800269e:	4b5f      	ldr	r3, [pc, #380]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
       ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d044      	beq.n	800273c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	e041      	b.n	800273c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d00c      	beq.n	80026da <RCCEx_PLLSAI2_Config+0x6e>
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d013      	beq.n	80026ec <RCCEx_PLLSAI2_Config+0x80>
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d120      	bne.n	800270a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026c8:	4b54      	ldr	r3, [pc, #336]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11d      	bne.n	8002710 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d8:	e01a      	b.n	8002710 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026da:	4b50      	ldr	r3, [pc, #320]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d116      	bne.n	8002714 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ea:	e013      	b.n	8002714 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ec:	4b4b      	ldr	r3, [pc, #300]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10f      	bne.n	8002718 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026f8:	4b48      	ldr	r3, [pc, #288]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002708:	e006      	b.n	8002718 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
      break;
 800270e:	e004      	b.n	800271a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002710:	bf00      	nop
 8002712:	e002      	b.n	800271a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002714:	bf00      	nop
 8002716:	e000      	b.n	800271a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002718:	bf00      	nop
    }

    if(status == HAL_OK)
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10d      	bne.n	800273c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002720:	4b3e      	ldr	r3, [pc, #248]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6819      	ldr	r1, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	3b01      	subs	r3, #1
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	430b      	orrs	r3, r1
 8002736:	4939      	ldr	r1, [pc, #228]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002738:	4313      	orrs	r3, r2
 800273a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d167      	bne.n	8002812 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a35      	ldr	r2, [pc, #212]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274e:	f7fe fa27 	bl	8000ba0 <HAL_GetTick>
 8002752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002754:	e009      	b.n	800276a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002756:	f7fe fa23 	bl	8000ba0 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d902      	bls.n	800276a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	73fb      	strb	r3, [r7, #15]
        break;
 8002768:	e005      	b.n	8002776 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800276a:	4b2c      	ldr	r3, [pc, #176]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ef      	bne.n	8002756 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d14a      	bne.n	8002812 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d111      	bne.n	80027a6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800278a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6892      	ldr	r2, [r2, #8]
 8002792:	0211      	lsls	r1, r2, #8
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	68d2      	ldr	r2, [r2, #12]
 8002798:	0912      	lsrs	r2, r2, #4
 800279a:	0452      	lsls	r2, r2, #17
 800279c:	430a      	orrs	r2, r1
 800279e:	491f      	ldr	r1, [pc, #124]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	614b      	str	r3, [r1, #20]
 80027a4:	e011      	b.n	80027ca <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6892      	ldr	r2, [r2, #8]
 80027b6:	0211      	lsls	r1, r2, #8
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6912      	ldr	r2, [r2, #16]
 80027bc:	0852      	lsrs	r2, r2, #1
 80027be:	3a01      	subs	r2, #1
 80027c0:	0652      	lsls	r2, r2, #25
 80027c2:	430a      	orrs	r2, r1
 80027c4:	4915      	ldr	r1, [pc, #84]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a13      	ldr	r2, [pc, #76]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7fe f9e3 	bl	8000ba0 <HAL_GetTick>
 80027da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027dc:	e009      	b.n	80027f2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027de:	f7fe f9df 	bl	8000ba0 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d902      	bls.n	80027f2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	73fb      	strb	r3, [r7, #15]
          break;
 80027f0:	e005      	b.n	80027fe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ef      	beq.n	80027de <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d106      	bne.n	8002812 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	4903      	ldr	r1, [pc, #12]	; (800281c <RCCEx_PLLSAI2_Config+0x1b0>)
 800280e:	4313      	orrs	r3, r2
 8002810:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000

08002820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e049      	b.n	80028c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fd ffe6 	bl	8000818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3304      	adds	r3, #4
 800285c:	4619      	mov	r1, r3
 800285e:	4610      	mov	r0, r2
 8002860:	f000 fa40 	bl	8002ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d122      	bne.n	800292a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d11b      	bne.n	800292a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f06f 0202 	mvn.w	r2, #2
 80028fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f9c8 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 8002916:	e005      	b.n	8002924 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f9ba 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f9cb 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d122      	bne.n	800297e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d11b      	bne.n	800297e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f06f 0204 	mvn.w	r2, #4
 800294e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f99e 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 800296a:	e005      	b.n	8002978 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f990 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f9a1 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d122      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b08      	cmp	r3, #8
 8002998:	d11b      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f06f 0208 	mvn.w	r2, #8
 80029a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2204      	movs	r2, #4
 80029a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f974 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 80029be:	e005      	b.n	80029cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f966 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f977 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d122      	bne.n	8002a26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d11b      	bne.n	8002a26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f06f 0210 	mvn.w	r2, #16
 80029f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2208      	movs	r2, #8
 80029fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f94a 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 8002a12:	e005      	b.n	8002a20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f93c 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f94d 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d10e      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f06f 0201 	mvn.w	r2, #1
 8002a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f916 	bl	8002c7e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d10e      	bne.n	8002a7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	2b80      	cmp	r3, #128	; 0x80
 8002a6c:	d107      	bne.n	8002a7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 faf9 	bl	8003070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a98:	2b80      	cmp	r3, #128	; 0x80
 8002a9a:	d107      	bne.n	8002aac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 faec 	bl	8003084 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d107      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8fb 	bl	8002cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d10e      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d107      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0220 	mvn.w	r2, #32
 8002afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 faac 	bl	800305c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_TIM_ConfigClockSource+0x18>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e0a8      	b.n	8002c76 <HAL_TIM_ConfigClockSource+0x16a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b40      	cmp	r3, #64	; 0x40
 8002b5e:	d067      	beq.n	8002c30 <HAL_TIM_ConfigClockSource+0x124>
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d80b      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x70>
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d073      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0x144>
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d802      	bhi.n	8002b72 <HAL_TIM_ConfigClockSource+0x66>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d06f      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b70:	e078      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d06c      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0x144>
 8002b76:	2b30      	cmp	r3, #48	; 0x30
 8002b78:	d06a      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002b7a:	e073      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002b7c:	2b70      	cmp	r3, #112	; 0x70
 8002b7e:	d00d      	beq.n	8002b9c <HAL_TIM_ConfigClockSource+0x90>
 8002b80:	2b70      	cmp	r3, #112	; 0x70
 8002b82:	d804      	bhi.n	8002b8e <HAL_TIM_ConfigClockSource+0x82>
 8002b84:	2b50      	cmp	r3, #80	; 0x50
 8002b86:	d033      	beq.n	8002bf0 <HAL_TIM_ConfigClockSource+0xe4>
 8002b88:	2b60      	cmp	r3, #96	; 0x60
 8002b8a:	d041      	beq.n	8002c10 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002b8c:	e06a      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b92:	d066      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0x156>
 8002b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b98:	d017      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002b9a:	e063      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6899      	ldr	r1, [r3, #8]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f000 f9ae 	bl	8002f0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	609a      	str	r2, [r3, #8]
      break;
 8002bc8:	e04c      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f000 f997 	bl	8002f0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bec:	609a      	str	r2, [r3, #8]
      break;
 8002bee:	e039      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f000 f90b 	bl	8002e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2150      	movs	r1, #80	; 0x50
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f964 	bl	8002ed6 <TIM_ITRx_SetConfig>
      break;
 8002c0e:	e029      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f000 f92a 	bl	8002e76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2160      	movs	r1, #96	; 0x60
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 f954 	bl	8002ed6 <TIM_ITRx_SetConfig>
      break;
 8002c2e:	e019      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	f000 f8eb 	bl	8002e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2140      	movs	r1, #64	; 0x40
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f944 	bl	8002ed6 <TIM_ITRx_SetConfig>
      break;
 8002c4e:	e009      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f000 f93b 	bl	8002ed6 <TIM_ITRx_SetConfig>
        break;
 8002c60:	e000      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a40      	ldr	r2, [pc, #256]	; (8002df8 <TIM_Base_SetConfig+0x114>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d02:	d00f      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3d      	ldr	r2, [pc, #244]	; (8002dfc <TIM_Base_SetConfig+0x118>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a3c      	ldr	r2, [pc, #240]	; (8002e00 <TIM_Base_SetConfig+0x11c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a3b      	ldr	r2, [pc, #236]	; (8002e04 <TIM_Base_SetConfig+0x120>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a3a      	ldr	r2, [pc, #232]	; (8002e08 <TIM_Base_SetConfig+0x124>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d108      	bne.n	8002d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2f      	ldr	r2, [pc, #188]	; (8002df8 <TIM_Base_SetConfig+0x114>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d01b      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2c      	ldr	r2, [pc, #176]	; (8002dfc <TIM_Base_SetConfig+0x118>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d017      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2b      	ldr	r2, [pc, #172]	; (8002e00 <TIM_Base_SetConfig+0x11c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a2a      	ldr	r2, [pc, #168]	; (8002e04 <TIM_Base_SetConfig+0x120>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00f      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <TIM_Base_SetConfig+0x124>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a28      	ldr	r2, [pc, #160]	; (8002e0c <TIM_Base_SetConfig+0x128>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d007      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <TIM_Base_SetConfig+0x12c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a26      	ldr	r2, [pc, #152]	; (8002e14 <TIM_Base_SetConfig+0x130>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <TIM_Base_SetConfig+0x114>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00f      	beq.n	8002ddc <TIM_Base_SetConfig+0xf8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <TIM_Base_SetConfig+0x124>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00b      	beq.n	8002ddc <TIM_Base_SetConfig+0xf8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a11      	ldr	r2, [pc, #68]	; (8002e0c <TIM_Base_SetConfig+0x128>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d007      	beq.n	8002ddc <TIM_Base_SetConfig+0xf8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <TIM_Base_SetConfig+0x12c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <TIM_Base_SetConfig+0xf8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a0f      	ldr	r2, [pc, #60]	; (8002e14 <TIM_Base_SetConfig+0x130>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d103      	bne.n	8002de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	615a      	str	r2, [r3, #20]
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40013400 	.word	0x40013400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40014400 	.word	0x40014400
 8002e14:	40014800 	.word	0x40014800

08002e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f023 0201 	bic.w	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f023 030a 	bic.w	r3, r3, #10
 8002e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b087      	sub	sp, #28
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f023 0210 	bic.w	r2, r3, #16
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	031b      	lsls	r3, r3, #12
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	621a      	str	r2, [r3, #32]
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f043 0307 	orr.w	r3, r3, #7
 8002ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	609a      	str	r2, [r3, #8]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	021a      	lsls	r2, r3, #8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	bf00      	nop
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e068      	b.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2e      	ldr	r2, [pc, #184]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a2d      	ldr	r2, [pc, #180]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01d      	beq.n	800300a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd6:	d018      	beq.n	800300a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1b      	ldr	r2, [pc, #108]	; (800304c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00e      	beq.n	800300a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a18      	ldr	r2, [pc, #96]	; (8003054 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d009      	beq.n	800300a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a13      	ldr	r2, [pc, #76]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d004      	beq.n	800300a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10c      	bne.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	4313      	orrs	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40013400 	.word	0x40013400
 800304c:	40000400 	.word	0x40000400
 8003050:	40000800 	.word	0x40000800
 8003054:	40000c00 	.word	0x40000c00
 8003058:	40014000 	.word	0x40014000

0800305c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e040      	b.n	800312c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fbd0 	bl	8000860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	; 0x24
 80030c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f988 	bl	80033ec <UART_SetConfig>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e022      	b.n	800312c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fc06 	bl	8003900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fc8d 	bl	8003a44 <UART_CheckIdleState>
 800312a:	4603      	mov	r3, r0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	f640 030f 	movw	r3, #2063	; 0x80f
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d113      	bne.n	800318c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00e      	beq.n	800318c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d009      	beq.n	800318c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8114 	beq.w	80033aa <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
      }
      return;
 800318a:	e10e      	b.n	80033aa <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80d6 	beq.w	8003340 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4b86      	ldr	r3, [pc, #536]	; (80033bc <HAL_UART_IRQHandler+0x288>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80cb 	beq.w	8003340 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00e      	beq.n	80031d2 <HAL_UART_IRQHandler+0x9e>
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2201      	movs	r2, #1
 80031c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00e      	beq.n	80031fa <HAL_UART_IRQHandler+0xc6>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2202      	movs	r2, #2
 80031ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031f2:	f043 0204 	orr.w	r2, r3, #4
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <HAL_UART_IRQHandler+0xee>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2204      	movs	r2, #4
 8003214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321a:	f043 0202 	orr.w	r2, r3, #2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d013      	beq.n	8003254 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2208      	movs	r2, #8
 8003246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324c:	f043 0208 	orr.w	r2, r3, #8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00f      	beq.n	800327e <HAL_UART_IRQHandler+0x14a>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003276:	f043 0220 	orr.w	r2, r3, #32
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8093 	beq.w	80033ae <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00c      	beq.n	80032ac <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d004      	beq.n	80032ca <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d031      	beq.n	800332e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fc7a 	bl	8003bc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d123      	bne.n	8003326 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d013      	beq.n	800331e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fa:	4a31      	ldr	r2, [pc, #196]	; (80033c0 <HAL_UART_IRQHandler+0x28c>)
 80032fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd fd69 	bl	8000dda <HAL_DMA_Abort_IT>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003318:	4610      	mov	r0, r2
 800331a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	e00e      	b.n	800333c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f85a 	bl	80033d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	e00a      	b.n	800333c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f856 	bl	80033d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332c:	e006      	b.n	800333c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f852 	bl	80033d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800333a:	e038      	b.n	80033ae <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	bf00      	nop
    return;
 800333e:	e036      	b.n	80033ae <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <HAL_UART_IRQHandler+0x232>
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800335c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fc7f 	bl	8003c62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003364:	e026      	b.n	80033b4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00d      	beq.n	800338c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800337e:	2b00      	cmp	r3, #0
 8003380:	d017      	beq.n	80033b2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
    }
    return;
 800338a:	e012      	b.n	80033b2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00e      	beq.n	80033b4 <HAL_UART_IRQHandler+0x280>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fc45 	bl	8003c30 <UART_EndTransmit_IT>
    return;
 80033a6:	bf00      	nop
 80033a8:	e004      	b.n	80033b4 <HAL_UART_IRQHandler+0x280>
      return;
 80033aa:	bf00      	nop
 80033ac:	e002      	b.n	80033b4 <HAL_UART_IRQHandler+0x280>
    return;
 80033ae:	bf00      	nop
 80033b0:	e000      	b.n	80033b4 <HAL_UART_IRQHandler+0x280>
    return;
 80033b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	04000120 	.word	0x04000120
 80033c0:	08003c05 	.word	0x08003c05

080033c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80033f0:	b088      	sub	sp, #32
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4bac      	ldr	r3, [pc, #688]	; (80036cc <UART_SetConfig+0x2e0>)
 800341a:	4013      	ands	r3, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	69f9      	ldr	r1, [r7, #28]
 8003422:	430b      	orrs	r3, r1
 8003424:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4aa2      	ldr	r2, [pc, #648]	; (80036d0 <UART_SetConfig+0x2e4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	4313      	orrs	r3, r2
 8003454:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	430a      	orrs	r2, r1
 8003468:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a99      	ldr	r2, [pc, #612]	; (80036d4 <UART_SetConfig+0x2e8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d121      	bne.n	80034b8 <UART_SetConfig+0xcc>
 8003474:	4b98      	ldr	r3, [pc, #608]	; (80036d8 <UART_SetConfig+0x2ec>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b03      	cmp	r3, #3
 8003480:	d816      	bhi.n	80034b0 <UART_SetConfig+0xc4>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <UART_SetConfig+0x9c>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003499 	.word	0x08003499
 800348c:	080034a5 	.word	0x080034a5
 8003490:	0800349f 	.word	0x0800349f
 8003494:	080034ab 	.word	0x080034ab
 8003498:	2301      	movs	r3, #1
 800349a:	76fb      	strb	r3, [r7, #27]
 800349c:	e0e8      	b.n	8003670 <UART_SetConfig+0x284>
 800349e:	2302      	movs	r3, #2
 80034a0:	76fb      	strb	r3, [r7, #27]
 80034a2:	e0e5      	b.n	8003670 <UART_SetConfig+0x284>
 80034a4:	2304      	movs	r3, #4
 80034a6:	76fb      	strb	r3, [r7, #27]
 80034a8:	e0e2      	b.n	8003670 <UART_SetConfig+0x284>
 80034aa:	2308      	movs	r3, #8
 80034ac:	76fb      	strb	r3, [r7, #27]
 80034ae:	e0df      	b.n	8003670 <UART_SetConfig+0x284>
 80034b0:	2310      	movs	r3, #16
 80034b2:	76fb      	strb	r3, [r7, #27]
 80034b4:	bf00      	nop
 80034b6:	e0db      	b.n	8003670 <UART_SetConfig+0x284>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a87      	ldr	r2, [pc, #540]	; (80036dc <UART_SetConfig+0x2f0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d134      	bne.n	800352c <UART_SetConfig+0x140>
 80034c2:	4b85      	ldr	r3, [pc, #532]	; (80036d8 <UART_SetConfig+0x2ec>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d829      	bhi.n	8003524 <UART_SetConfig+0x138>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <UART_SetConfig+0xec>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	0800350d 	.word	0x0800350d
 80034dc:	08003525 	.word	0x08003525
 80034e0:	08003525 	.word	0x08003525
 80034e4:	08003525 	.word	0x08003525
 80034e8:	08003519 	.word	0x08003519
 80034ec:	08003525 	.word	0x08003525
 80034f0:	08003525 	.word	0x08003525
 80034f4:	08003525 	.word	0x08003525
 80034f8:	08003513 	.word	0x08003513
 80034fc:	08003525 	.word	0x08003525
 8003500:	08003525 	.word	0x08003525
 8003504:	08003525 	.word	0x08003525
 8003508:	0800351f 	.word	0x0800351f
 800350c:	2300      	movs	r3, #0
 800350e:	76fb      	strb	r3, [r7, #27]
 8003510:	e0ae      	b.n	8003670 <UART_SetConfig+0x284>
 8003512:	2302      	movs	r3, #2
 8003514:	76fb      	strb	r3, [r7, #27]
 8003516:	e0ab      	b.n	8003670 <UART_SetConfig+0x284>
 8003518:	2304      	movs	r3, #4
 800351a:	76fb      	strb	r3, [r7, #27]
 800351c:	e0a8      	b.n	8003670 <UART_SetConfig+0x284>
 800351e:	2308      	movs	r3, #8
 8003520:	76fb      	strb	r3, [r7, #27]
 8003522:	e0a5      	b.n	8003670 <UART_SetConfig+0x284>
 8003524:	2310      	movs	r3, #16
 8003526:	76fb      	strb	r3, [r7, #27]
 8003528:	bf00      	nop
 800352a:	e0a1      	b.n	8003670 <UART_SetConfig+0x284>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a6b      	ldr	r2, [pc, #428]	; (80036e0 <UART_SetConfig+0x2f4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d120      	bne.n	8003578 <UART_SetConfig+0x18c>
 8003536:	4b68      	ldr	r3, [pc, #416]	; (80036d8 <UART_SetConfig+0x2ec>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003540:	2b10      	cmp	r3, #16
 8003542:	d00f      	beq.n	8003564 <UART_SetConfig+0x178>
 8003544:	2b10      	cmp	r3, #16
 8003546:	d802      	bhi.n	800354e <UART_SetConfig+0x162>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <UART_SetConfig+0x16c>
 800354c:	e010      	b.n	8003570 <UART_SetConfig+0x184>
 800354e:	2b20      	cmp	r3, #32
 8003550:	d005      	beq.n	800355e <UART_SetConfig+0x172>
 8003552:	2b30      	cmp	r3, #48	; 0x30
 8003554:	d009      	beq.n	800356a <UART_SetConfig+0x17e>
 8003556:	e00b      	b.n	8003570 <UART_SetConfig+0x184>
 8003558:	2300      	movs	r3, #0
 800355a:	76fb      	strb	r3, [r7, #27]
 800355c:	e088      	b.n	8003670 <UART_SetConfig+0x284>
 800355e:	2302      	movs	r3, #2
 8003560:	76fb      	strb	r3, [r7, #27]
 8003562:	e085      	b.n	8003670 <UART_SetConfig+0x284>
 8003564:	2304      	movs	r3, #4
 8003566:	76fb      	strb	r3, [r7, #27]
 8003568:	e082      	b.n	8003670 <UART_SetConfig+0x284>
 800356a:	2308      	movs	r3, #8
 800356c:	76fb      	strb	r3, [r7, #27]
 800356e:	e07f      	b.n	8003670 <UART_SetConfig+0x284>
 8003570:	2310      	movs	r3, #16
 8003572:	76fb      	strb	r3, [r7, #27]
 8003574:	bf00      	nop
 8003576:	e07b      	b.n	8003670 <UART_SetConfig+0x284>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a59      	ldr	r2, [pc, #356]	; (80036e4 <UART_SetConfig+0x2f8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d120      	bne.n	80035c4 <UART_SetConfig+0x1d8>
 8003582:	4b55      	ldr	r3, [pc, #340]	; (80036d8 <UART_SetConfig+0x2ec>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d00f      	beq.n	80035b0 <UART_SetConfig+0x1c4>
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d802      	bhi.n	800359a <UART_SetConfig+0x1ae>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <UART_SetConfig+0x1b8>
 8003598:	e010      	b.n	80035bc <UART_SetConfig+0x1d0>
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d005      	beq.n	80035aa <UART_SetConfig+0x1be>
 800359e:	2bc0      	cmp	r3, #192	; 0xc0
 80035a0:	d009      	beq.n	80035b6 <UART_SetConfig+0x1ca>
 80035a2:	e00b      	b.n	80035bc <UART_SetConfig+0x1d0>
 80035a4:	2300      	movs	r3, #0
 80035a6:	76fb      	strb	r3, [r7, #27]
 80035a8:	e062      	b.n	8003670 <UART_SetConfig+0x284>
 80035aa:	2302      	movs	r3, #2
 80035ac:	76fb      	strb	r3, [r7, #27]
 80035ae:	e05f      	b.n	8003670 <UART_SetConfig+0x284>
 80035b0:	2304      	movs	r3, #4
 80035b2:	76fb      	strb	r3, [r7, #27]
 80035b4:	e05c      	b.n	8003670 <UART_SetConfig+0x284>
 80035b6:	2308      	movs	r3, #8
 80035b8:	76fb      	strb	r3, [r7, #27]
 80035ba:	e059      	b.n	8003670 <UART_SetConfig+0x284>
 80035bc:	2310      	movs	r3, #16
 80035be:	76fb      	strb	r3, [r7, #27]
 80035c0:	bf00      	nop
 80035c2:	e055      	b.n	8003670 <UART_SetConfig+0x284>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a47      	ldr	r2, [pc, #284]	; (80036e8 <UART_SetConfig+0x2fc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d124      	bne.n	8003618 <UART_SetConfig+0x22c>
 80035ce:	4b42      	ldr	r3, [pc, #264]	; (80036d8 <UART_SetConfig+0x2ec>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035dc:	d012      	beq.n	8003604 <UART_SetConfig+0x218>
 80035de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e2:	d802      	bhi.n	80035ea <UART_SetConfig+0x1fe>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <UART_SetConfig+0x20c>
 80035e8:	e012      	b.n	8003610 <UART_SetConfig+0x224>
 80035ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ee:	d006      	beq.n	80035fe <UART_SetConfig+0x212>
 80035f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035f4:	d009      	beq.n	800360a <UART_SetConfig+0x21e>
 80035f6:	e00b      	b.n	8003610 <UART_SetConfig+0x224>
 80035f8:	2300      	movs	r3, #0
 80035fa:	76fb      	strb	r3, [r7, #27]
 80035fc:	e038      	b.n	8003670 <UART_SetConfig+0x284>
 80035fe:	2302      	movs	r3, #2
 8003600:	76fb      	strb	r3, [r7, #27]
 8003602:	e035      	b.n	8003670 <UART_SetConfig+0x284>
 8003604:	2304      	movs	r3, #4
 8003606:	76fb      	strb	r3, [r7, #27]
 8003608:	e032      	b.n	8003670 <UART_SetConfig+0x284>
 800360a:	2308      	movs	r3, #8
 800360c:	76fb      	strb	r3, [r7, #27]
 800360e:	e02f      	b.n	8003670 <UART_SetConfig+0x284>
 8003610:	2310      	movs	r3, #16
 8003612:	76fb      	strb	r3, [r7, #27]
 8003614:	bf00      	nop
 8003616:	e02b      	b.n	8003670 <UART_SetConfig+0x284>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2c      	ldr	r2, [pc, #176]	; (80036d0 <UART_SetConfig+0x2e4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d124      	bne.n	800366c <UART_SetConfig+0x280>
 8003622:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <UART_SetConfig+0x2ec>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800362c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003630:	d012      	beq.n	8003658 <UART_SetConfig+0x26c>
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d802      	bhi.n	800363e <UART_SetConfig+0x252>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <UART_SetConfig+0x260>
 800363c:	e012      	b.n	8003664 <UART_SetConfig+0x278>
 800363e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003642:	d006      	beq.n	8003652 <UART_SetConfig+0x266>
 8003644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003648:	d009      	beq.n	800365e <UART_SetConfig+0x272>
 800364a:	e00b      	b.n	8003664 <UART_SetConfig+0x278>
 800364c:	2300      	movs	r3, #0
 800364e:	76fb      	strb	r3, [r7, #27]
 8003650:	e00e      	b.n	8003670 <UART_SetConfig+0x284>
 8003652:	2302      	movs	r3, #2
 8003654:	76fb      	strb	r3, [r7, #27]
 8003656:	e00b      	b.n	8003670 <UART_SetConfig+0x284>
 8003658:	2304      	movs	r3, #4
 800365a:	76fb      	strb	r3, [r7, #27]
 800365c:	e008      	b.n	8003670 <UART_SetConfig+0x284>
 800365e:	2308      	movs	r3, #8
 8003660:	76fb      	strb	r3, [r7, #27]
 8003662:	e005      	b.n	8003670 <UART_SetConfig+0x284>
 8003664:	2310      	movs	r3, #16
 8003666:	76fb      	strb	r3, [r7, #27]
 8003668:	bf00      	nop
 800366a:	e001      	b.n	8003670 <UART_SetConfig+0x284>
 800366c:	2310      	movs	r3, #16
 800366e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <UART_SetConfig+0x2e4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	f040 8087 	bne.w	800378a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800367c:	7efb      	ldrb	r3, [r7, #27]
 800367e:	2b08      	cmp	r3, #8
 8003680:	d836      	bhi.n	80036f0 <UART_SetConfig+0x304>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <UART_SetConfig+0x29c>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	080036ad 	.word	0x080036ad
 800368c:	080036f1 	.word	0x080036f1
 8003690:	080036b5 	.word	0x080036b5
 8003694:	080036f1 	.word	0x080036f1
 8003698:	080036bb 	.word	0x080036bb
 800369c:	080036f1 	.word	0x080036f1
 80036a0:	080036f1 	.word	0x080036f1
 80036a4:	080036f1 	.word	0x080036f1
 80036a8:	080036c3 	.word	0x080036c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ac:	f7fe fb7c 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 80036b0:	6178      	str	r0, [r7, #20]
        break;
 80036b2:	e022      	b.n	80036fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <UART_SetConfig+0x300>)
 80036b6:	617b      	str	r3, [r7, #20]
        break;
 80036b8:	e01f      	b.n	80036fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ba:	f7fe fadf 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 80036be:	6178      	str	r0, [r7, #20]
        break;
 80036c0:	e01b      	b.n	80036fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036c6:	617b      	str	r3, [r7, #20]
        break;
 80036c8:	e017      	b.n	80036fa <UART_SetConfig+0x30e>
 80036ca:	bf00      	nop
 80036cc:	efff69f3 	.word	0xefff69f3
 80036d0:	40008000 	.word	0x40008000
 80036d4:	40013800 	.word	0x40013800
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40004400 	.word	0x40004400
 80036e0:	40004800 	.word	0x40004800
 80036e4:	40004c00 	.word	0x40004c00
 80036e8:	40005000 	.word	0x40005000
 80036ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	76bb      	strb	r3, [r7, #26]
        break;
 80036f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80f1 	beq.w	80038e4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	429a      	cmp	r2, r3
 8003710:	d305      	bcc.n	800371e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	429a      	cmp	r2, r3
 800371c:	d902      	bls.n	8003724 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	76bb      	strb	r3, [r7, #26]
 8003722:	e0df      	b.n	80038e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	4619      	mov	r1, r3
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	f04f 0400 	mov.w	r4, #0
 8003734:	0214      	lsls	r4, r2, #8
 8003736:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800373a:	020b      	lsls	r3, r1, #8
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6852      	ldr	r2, [r2, #4]
 8003740:	0852      	lsrs	r2, r2, #1
 8003742:	4611      	mov	r1, r2
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	eb13 0b01 	adds.w	fp, r3, r1
 800374c:	eb44 0c02 	adc.w	ip, r4, r2
 8003750:	4658      	mov	r0, fp
 8003752:	4661      	mov	r1, ip
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	461a      	mov	r2, r3
 800375e:	4623      	mov	r3, r4
 8003760:	f7fc fd32 	bl	80001c8 <__aeabi_uldivmod>
 8003764:	4603      	mov	r3, r0
 8003766:	460c      	mov	r4, r1
 8003768:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003770:	d308      	bcc.n	8003784 <UART_SetConfig+0x398>
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003778:	d204      	bcs.n	8003784 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	e0af      	b.n	80038e4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	76bb      	strb	r3, [r7, #26]
 8003788:	e0ac      	b.n	80038e4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003792:	d15b      	bne.n	800384c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003794:	7efb      	ldrb	r3, [r7, #27]
 8003796:	2b08      	cmp	r3, #8
 8003798:	d827      	bhi.n	80037ea <UART_SetConfig+0x3fe>
 800379a:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <UART_SetConfig+0x3b4>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	080037c5 	.word	0x080037c5
 80037a4:	080037cd 	.word	0x080037cd
 80037a8:	080037d5 	.word	0x080037d5
 80037ac:	080037eb 	.word	0x080037eb
 80037b0:	080037db 	.word	0x080037db
 80037b4:	080037eb 	.word	0x080037eb
 80037b8:	080037eb 	.word	0x080037eb
 80037bc:	080037eb 	.word	0x080037eb
 80037c0:	080037e3 	.word	0x080037e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037c4:	f7fe faf0 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 80037c8:	6178      	str	r0, [r7, #20]
        break;
 80037ca:	e013      	b.n	80037f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037cc:	f7fe fb02 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 80037d0:	6178      	str	r0, [r7, #20]
        break;
 80037d2:	e00f      	b.n	80037f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d4:	4b49      	ldr	r3, [pc, #292]	; (80038fc <UART_SetConfig+0x510>)
 80037d6:	617b      	str	r3, [r7, #20]
        break;
 80037d8:	e00c      	b.n	80037f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037da:	f7fe fa4f 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 80037de:	6178      	str	r0, [r7, #20]
        break;
 80037e0:	e008      	b.n	80037f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e6:	617b      	str	r3, [r7, #20]
        break;
 80037e8:	e004      	b.n	80037f4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	76bb      	strb	r3, [r7, #26]
        break;
 80037f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d074      	beq.n	80038e4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	005a      	lsls	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	085b      	lsrs	r3, r3, #1
 8003804:	441a      	add	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	b29b      	uxth	r3, r3
 8003810:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d916      	bls.n	8003846 <UART_SetConfig+0x45a>
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381e:	d212      	bcs.n	8003846 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	b29b      	uxth	r3, r3
 8003824:	f023 030f 	bic.w	r3, r3, #15
 8003828:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	b29b      	uxth	r3, r3
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	b29a      	uxth	r2, r3
 8003836:	89fb      	ldrh	r3, [r7, #14]
 8003838:	4313      	orrs	r3, r2
 800383a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	89fa      	ldrh	r2, [r7, #14]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	e04e      	b.n	80038e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	76bb      	strb	r3, [r7, #26]
 800384a:	e04b      	b.n	80038e4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800384c:	7efb      	ldrb	r3, [r7, #27]
 800384e:	2b08      	cmp	r3, #8
 8003850:	d827      	bhi.n	80038a2 <UART_SetConfig+0x4b6>
 8003852:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <UART_SetConfig+0x46c>)
 8003854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003858:	0800387d 	.word	0x0800387d
 800385c:	08003885 	.word	0x08003885
 8003860:	0800388d 	.word	0x0800388d
 8003864:	080038a3 	.word	0x080038a3
 8003868:	08003893 	.word	0x08003893
 800386c:	080038a3 	.word	0x080038a3
 8003870:	080038a3 	.word	0x080038a3
 8003874:	080038a3 	.word	0x080038a3
 8003878:	0800389b 	.word	0x0800389b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800387c:	f7fe fa94 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 8003880:	6178      	str	r0, [r7, #20]
        break;
 8003882:	e013      	b.n	80038ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003884:	f7fe faa6 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 8003888:	6178      	str	r0, [r7, #20]
        break;
 800388a:	e00f      	b.n	80038ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <UART_SetConfig+0x510>)
 800388e:	617b      	str	r3, [r7, #20]
        break;
 8003890:	e00c      	b.n	80038ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003892:	f7fe f9f3 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8003896:	6178      	str	r0, [r7, #20]
        break;
 8003898:	e008      	b.n	80038ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389e:	617b      	str	r3, [r7, #20]
        break;
 80038a0:	e004      	b.n	80038ac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	76bb      	strb	r3, [r7, #26]
        break;
 80038aa:	bf00      	nop
    }

    if (pclk != 0U)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d018      	beq.n	80038e4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	085a      	lsrs	r2, r3, #1
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	441a      	add	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	d908      	bls.n	80038e0 <UART_SetConfig+0x4f4>
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d4:	d204      	bcs.n	80038e0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	e001      	b.n	80038e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80038f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80038fc:	00f42400 	.word	0x00f42400

08003900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01a      	beq.n	8003a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fe:	d10a      	bne.n	8003a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	605a      	str	r2, [r3, #4]
  }
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003a52:	f7fd f8a5 	bl	8000ba0 <HAL_GetTick>
 8003a56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d10e      	bne.n	8003a84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f82a 	bl	8003ace <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e020      	b.n	8003ac6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d10e      	bne.n	8003ab0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f814 	bl	8003ace <UART_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e00a      	b.n	8003ac6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ade:	e05d      	b.n	8003b9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae6:	d059      	beq.n	8003b9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7fd f85a 	bl	8000ba0 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <UART_WaitOnFlagUntilTimeout+0x30>
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d11b      	bne.n	8003b36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b0c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e042      	b.n	8003bbc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d02b      	beq.n	8003b9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b52:	d123      	bne.n	8003b9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b6c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e00f      	b.n	8003bbc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d092      	beq.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff fbd8 	bl	80033d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c46:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff fbb5 	bl	80033c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <__libc_init_array>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	4e0d      	ldr	r6, [pc, #52]	; (8003cb0 <__libc_init_array+0x38>)
 8003c7c:	4c0d      	ldr	r4, [pc, #52]	; (8003cb4 <__libc_init_array+0x3c>)
 8003c7e:	1ba4      	subs	r4, r4, r6
 8003c80:	10a4      	asrs	r4, r4, #2
 8003c82:	2500      	movs	r5, #0
 8003c84:	42a5      	cmp	r5, r4
 8003c86:	d109      	bne.n	8003c9c <__libc_init_array+0x24>
 8003c88:	4e0b      	ldr	r6, [pc, #44]	; (8003cb8 <__libc_init_array+0x40>)
 8003c8a:	4c0c      	ldr	r4, [pc, #48]	; (8003cbc <__libc_init_array+0x44>)
 8003c8c:	f000 f820 	bl	8003cd0 <_init>
 8003c90:	1ba4      	subs	r4, r4, r6
 8003c92:	10a4      	asrs	r4, r4, #2
 8003c94:	2500      	movs	r5, #0
 8003c96:	42a5      	cmp	r5, r4
 8003c98:	d105      	bne.n	8003ca6 <__libc_init_array+0x2e>
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ca0:	4798      	blx	r3
 8003ca2:	3501      	adds	r5, #1
 8003ca4:	e7ee      	b.n	8003c84 <__libc_init_array+0xc>
 8003ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003caa:	4798      	blx	r3
 8003cac:	3501      	adds	r5, #1
 8003cae:	e7f2      	b.n	8003c96 <__libc_init_array+0x1e>
 8003cb0:	08003d38 	.word	0x08003d38
 8003cb4:	08003d38 	.word	0x08003d38
 8003cb8:	08003d38 	.word	0x08003d38
 8003cbc:	08003d3c 	.word	0x08003d3c

08003cc0 <memset>:
 8003cc0:	4402      	add	r2, r0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d100      	bne.n	8003cca <memset+0xa>
 8003cc8:	4770      	bx	lr
 8003cca:	f803 1b01 	strb.w	r1, [r3], #1
 8003cce:	e7f9      	b.n	8003cc4 <memset+0x4>

08003cd0 <_init>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr

08003cdc <_fini>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	bf00      	nop
 8003ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce2:	bc08      	pop	{r3}
 8003ce4:	469e      	mov	lr, r3
 8003ce6:	4770      	bx	lr
