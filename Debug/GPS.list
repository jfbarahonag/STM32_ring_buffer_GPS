
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08005564  08005564  00015564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005788  08005788  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005790  08005790  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000070  08005808  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08005808  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a0c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023eb  00000000  00000000  00031aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001040  00000000  00000000  00033e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f18  00000000  00000000  00034ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027d87  00000000  00000000  00035df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d0a2  00000000  00000000  0005db77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f520f  00000000  00000000  0006ac19  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015fe28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c30  00000000  00000000  0015fea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800554c 	.word	0x0800554c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800554c 	.word	0x0800554c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
/* INTERRUPT CALLBACKS */
uint8_t rx_data_byte;
uint8_t tx_data_byte;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, &rx_data_byte, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	490a      	ldr	r1, [pc, #40]	; (80005a4 <HAL_UART_RxCpltCallback+0x34>)
 800057c:	480a      	ldr	r0, [pc, #40]	; (80005a8 <HAL_UART_RxCpltCallback+0x38>)
 800057e:	f003 f98f 	bl	80038a0 <HAL_UART_Receive_IT>
	/* Tested OK */
	if (huart->Instance == USART2) {
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a09      	ldr	r2, [pc, #36]	; (80005ac <HAL_UART_RxCpltCallback+0x3c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d107      	bne.n	800059c <HAL_UART_RxCpltCallback+0x2c>
		ring_buf_put(ring_buffer_rx, rx_data_byte);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_UART_RxCpltCallback+0x40>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_UART_RxCpltCallback+0x34>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	4610      	mov	r0, r2
 8000598:	f000 fd50 	bl	800103c <ring_buf_put>
	}
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200005dc 	.word	0x200005dc
 80005a8:	2000055c 	.word	0x2000055c
 80005ac:	40004400 	.word	0x40004400
 80005b0:	20000508 	.word	0x20000508

080005b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	}
	*/

}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <HAL_TIM_PeriodElapsedCallback>:
uint16_t time_ms = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	/* Tested OK */
	/* HAL_TIM_Base_start_IT() must be called in main.c */

	if (htim->Instance == TIM2) {
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005d8:	d112      	bne.n	8000600 <HAL_TIM_PeriodElapsedCallback+0x38>
		time_ms++;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005e4:	801a      	strh	r2, [r3, #0]
		if (time_ms >= 1000) {
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ee:	d307      	bcc.n	8000600 <HAL_TIM_PeriodElapsedCallback+0x38>
			time_ms = 0;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005f6:	2120      	movs	r1, #32
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f001 f930 	bl	8001860 <HAL_GPIO_TogglePin>
		}
	}

}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000008c 	.word	0x2000008c

0800060c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	/* Tested OK */
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fd92 	bl	8001152 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f849 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f95d 	bl	80008f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000636:	f000 f8ad 	bl	8000794 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800063a:	f000 f8f9 	bl	8000830 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800063e:	f000 f927 	bl	8000890 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_rx = ring_buf_init(comm_rx_buffer, BUFFER_SIZE);
 8000642:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000646:	4817      	ldr	r0, [pc, #92]	; (80006a4 <main+0x80>)
 8000648:	f000 fbce 	bl	8000de8 <ring_buf_init>
 800064c:	4602      	mov	r2, r0
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <main+0x84>)
 8000650:	601a      	str	r2, [r3, #0]
  ring_buffer_tx = ring_buf_init(comm_tx_buffer, BUFFER_SIZE);
 8000652:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000656:	4815      	ldr	r0, [pc, #84]	; (80006ac <main+0x88>)
 8000658:	f000 fbc6 	bl	8000de8 <ring_buf_init>
 800065c:	4602      	mov	r2, r0
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <main+0x8c>)
 8000660:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 8000662:	4814      	ldr	r0, [pc, #80]	; (80006b4 <main+0x90>)
 8000664:	f002 fc84 	bl	8002f70 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data_byte, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	4913      	ldr	r1, [pc, #76]	; (80006b8 <main+0x94>)
 800066c:	4813      	ldr	r0, [pc, #76]	; (80006bc <main+0x98>)
 800066e:	f003 f917 	bl	80038a0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  size_t size_rx = ring_buf_size(ring_buffer_rx);
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <main+0x84>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fc44 	bl	8000f04 <ring_buf_size>
 800067c:	6078      	str	r0, [r7, #4]
	  if( size_rx != 0) {
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f6      	beq.n	8000672 <main+0x4e>
		  ring_buf_get(ring_buffer_rx, &rx_data_byte);
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <main+0x84>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	490b      	ldr	r1, [pc, #44]	; (80006b8 <main+0x94>)
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fcfe 	bl	800108c <ring_buf_get>
		  ring_buf_put(ring_buffer_tx, tx_data_byte);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <main+0x8c>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <main+0x9c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	4610      	mov	r0, r2
 800069c:	f000 fcce 	bl	800103c <ring_buf_put>
  {
 80006a0:	e7e7      	b.n	8000672 <main+0x4e>
 80006a2:	bf00      	nop
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	20000508 	.word	0x20000508
 80006ac:	20000310 	.word	0x20000310
 80006b0:	20000504 	.word	0x20000504
 80006b4:	20000510 	.word	0x20000510
 80006b8:	200005dc 	.word	0x200005dc
 80006bc:	2000055c 	.word	0x2000055c
 80006c0:	2000050c 	.word	0x2000050c

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0b8      	sub	sp, #224	; 0xe0
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ce:	2244      	movs	r2, #68	; 0x44
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 f81a 	bl	800470c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2288      	movs	r2, #136	; 0x88
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 f80c 	bl	800470c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006f4:	2310      	movs	r3, #16
 80006f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006fa:	2301      	movs	r3, #1
 80006fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f938 	bl	800198c <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000722:	f000 f93d 	bl	80009a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fd04 	bl	8002158 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000756:	f000 f923 	bl	80009a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800075a:	2303      	movs	r3, #3
 800075c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800075e:	2300      	movs	r3, #0
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000762:	2300      	movs	r3, #0
 8000764:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fef9 	bl	8002560 <HAL_RCCEx_PeriphCLKConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000774:	f000 f914 	bl	80009a0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000778:	f44f 7000 	mov.w	r0, #512	; 0x200
 800077c:	f001 f8b0 	bl	80018e0 <HAL_PWREx_ControlVoltageScaling>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000786:	f000 f90b 	bl	80009a0 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	37e0      	adds	r7, #224	; 0xe0
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_TIM2_Init+0x98>)
 80007b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_TIM2_Init+0x98>)
 80007bc:	220f      	movs	r2, #15
 80007be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_TIM2_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_TIM2_Init+0x98>)
 80007c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_TIM2_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_TIM2_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007da:	4814      	ldr	r0, [pc, #80]	; (800082c <MX_TIM2_Init+0x98>)
 80007dc:	f002 fb70 	bl	8002ec0 <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007e6:	f000 f8db 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_TIM2_Init+0x98>)
 80007f8:	f002 fd49 	bl	800328e <HAL_TIM_ConfigClockSource>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000802:	f000 f8cd 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_TIM2_Init+0x98>)
 8000814:	f002 ff50 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800081e:	f000 f8bf 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000510 	.word	0x20000510

08000830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <MX_USART1_UART_Init+0x5c>)
 8000838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000874:	f002 ffc6 	bl	8003804 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 f88f 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000290 	.word	0x20000290
 800088c:	40013800 	.word	0x40013800

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_USART2_UART_Init+0x5c>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008d4:	f002 ff96 	bl	8003804 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f85f 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000055c 	.word	0x2000055c
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b23      	ldr	r3, [pc, #140]	; (8000994 <MX_GPIO_Init+0xa4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a22      	ldr	r2, [pc, #136]	; (8000994 <MX_GPIO_Init+0xa4>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b20      	ldr	r3, [pc, #128]	; (8000994 <MX_GPIO_Init+0xa4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_GPIO_Init+0xa4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_GPIO_Init+0xa4>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_GPIO_Init+0xa4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2120      	movs	r1, #32
 800093a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093e:	f000 ff77 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_GPIO_Init+0xa8>)
 800094a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4619      	mov	r1, r3
 8000956:	4811      	ldr	r0, [pc, #68]	; (800099c <MX_GPIO_Init+0xac>)
 8000958:	f000 fdc2 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800095c:	2320      	movs	r3, #32
 800095e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f000 fdb3 	bl	80014e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2028      	movs	r0, #40	; 0x28
 8000980:	f000 fd37 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000984:	2028      	movs	r0, #40	; 0x28
 8000986:	f000 fd50 	bl	800142a <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3720      	adds	r7, #32
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000
 8000998:	10210000 	.word	0x10210000
 800099c:	48000800 	.word	0x48000800

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_MspInit+0x44>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6613      	str	r3, [r2, #96]	; 0x60
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x44>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6593      	str	r3, [r2, #88]	; 0x58
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x44>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a08:	d113      	bne.n	8000a32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_TIM_Base_MspInit+0x44>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <HAL_TIM_Base_MspInit+0x44>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6593      	str	r3, [r2, #88]	; 0x58
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_TIM_Base_MspInit+0x44>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	201c      	movs	r0, #28
 8000a28:	f000 fce3 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a2c:	201c      	movs	r0, #28
 8000a2e:	f000 fcfc 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a37      	ldr	r2, [pc, #220]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d132      	bne.n	8000ac8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a62:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	4a36      	ldr	r2, [pc, #216]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a30      	ldr	r2, [pc, #192]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1_TX_Pin|U1_RX_Pin;
 8000a92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f000 fd15 	bl	80014e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2025      	movs	r0, #37	; 0x25
 8000abc:	f000 fc99 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ac0:	2025      	movs	r0, #37	; 0x25
 8000ac2:	f000 fcb2 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac6:	e035      	b.n	8000b34 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <HAL_UART_MspInit+0x104>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d130      	bne.n	8000b34 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	4a1a      	ldr	r2, [pc, #104]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U2_TX_Pin|U2_RX_Pin;
 8000b02:	230c      	movs	r3, #12
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b12:	2307      	movs	r3, #7
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f000 fcde 	bl	80014e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2026      	movs	r0, #38	; 0x26
 8000b2a:	f000 fc62 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b2e:	2026      	movs	r0, #38	; 0x26
 8000b30:	f000 fc7b 	bl	800142a <HAL_NVIC_EnableIRQ>
}
 8000b34:	bf00      	nop
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40013800 	.word	0x40013800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40004400 	.word	0x40004400

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 fb2e 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM2_IRQHandler+0x10>)
 8000baa:	f002 fa51 	bl	8003050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000510 	.word	0x20000510

08000bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <USART1_IRQHandler+0x10>)
 8000bbe:	f002 ff01 	bl	80039c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000290 	.word	0x20000290

08000bcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART2_IRQHandler+0x10>)
 8000bd2:	f002 fef7 	bl	80039c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000055c 	.word	0x2000055c

08000be0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000be4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000be8:	f000 fe54 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_kill>:

int _kill(int pid, int sig)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c0a:	f003 fd3b 	bl	8004684 <__errno>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	2316      	movs	r3, #22
 8000c12:	6013      	str	r3, [r2, #0]
	return -1;
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_exit>:

void _exit (int status)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ffe7 	bl	8000c00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c32:	e7fe      	b.n	8000c32 <_exit+0x12>

08000c34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00a      	b.n	8000c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c46:	f3af 8000 	nop.w
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf0      	blt.n	8000c46 <_read+0x12>
	}

return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e009      	b.n	8000c94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	60ba      	str	r2, [r7, #8]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf1      	blt.n	8000c80 <_write+0x12>
	}
	return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_close>:

int _close(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	return -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cce:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_isatty>:

int _isatty(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f003 fca0 	bl	8004684 <__errno>
 8000d44:	4602      	mov	r2, r0
 8000d46:	230c      	movs	r3, #12
 8000d48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20018000 	.word	0x20018000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	20000090 	.word	0x20000090
 8000d78:	200005e8 	.word	0x200005e8

08000d7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <SystemInit+0x64>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <SystemInit+0x64>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <SystemInit+0x68>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <SystemInit+0x68>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <SystemInit+0x68>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <SystemInit+0x68>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <SystemInit+0x68>)
 8000da8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000db0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <SystemInit+0x68>)
 8000db4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000db8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <SystemInit+0x68>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <SystemInit+0x68>)
 8000dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <SystemInit+0x68>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SystemInit+0x64>)
 8000dce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dd2:	609a      	str	r2, [r3, #8]
#endif
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00
 8000de4:	40021000 	.word	0x40021000

08000de8 <ring_buf_init>:
	size_t max; //of the buffer
	bool full;
};

cbuf_handle_t ring_buf_init(uint8_t* buffer, size_t size)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
	assert(buffer && size);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <ring_buf_init+0x16>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d105      	bne.n	8000e0a <ring_buf_init+0x22>
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <ring_buf_init+0x74>)
 8000e00:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <ring_buf_init+0x78>)
 8000e02:	2117      	movs	r1, #23
 8000e04:	4817      	ldr	r0, [pc, #92]	; (8000e64 <ring_buf_init+0x7c>)
 8000e06:	f003 fc1f 	bl	8004648 <__assert_func>

	cbuf_handle_t cbuf = malloc(sizeof(ring_buf_t));
 8000e0a:	2014      	movs	r0, #20
 8000e0c:	f003 fc76 	bl	80046fc <malloc>
 8000e10:	4603      	mov	r3, r0
 8000e12:	60fb      	str	r3, [r7, #12]
	assert(cbuf);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d105      	bne.n	8000e26 <ring_buf_init+0x3e>
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <ring_buf_init+0x80>)
 8000e1c:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <ring_buf_init+0x78>)
 8000e1e:	211a      	movs	r1, #26
 8000e20:	4810      	ldr	r0, [pc, #64]	; (8000e64 <ring_buf_init+0x7c>)
 8000e22:	f003 fc11 	bl	8004648 <__assert_func>

	cbuf->buffer = buffer;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	601a      	str	r2, [r3, #0]
	cbuf->max = size;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	60da      	str	r2, [r3, #12]
	ring_buf_reset(cbuf);
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f000 f81c 	bl	8000e70 <ring_buf_reset>

	assert(ring_buf_empty(cbuf));
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f000 f839 	bl	8000eb0 <ring_buf_empty>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d105      	bne.n	8000e50 <ring_buf_init+0x68>
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <ring_buf_init+0x84>)
 8000e46:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <ring_buf_init+0x78>)
 8000e48:	2120      	movs	r1, #32
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <ring_buf_init+0x7c>)
 8000e4c:	f003 fbfc 	bl	8004648 <__assert_func>

	return cbuf;
 8000e50:	68fb      	ldr	r3, [r7, #12]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	08005564 	.word	0x08005564
 8000e60:	08005634 	.word	0x08005634
 8000e64:	08005574 	.word	0x08005574
 8000e68:	08005594 	.word	0x08005594
 8000e6c:	0800559c 	.word	0x0800559c

08000e70 <ring_buf_reset>:

void ring_buf_reset(cbuf_handle_t cbuf)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    assert(cbuf);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d105      	bne.n	8000e8a <ring_buf_reset+0x1a>
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <ring_buf_reset+0x34>)
 8000e80:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <ring_buf_reset+0x38>)
 8000e82:	2127      	movs	r1, #39	; 0x27
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <ring_buf_reset+0x3c>)
 8000e86:	f003 fbdf 	bl	8004648 <__assert_func>

    cbuf->head = 0;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
    cbuf->tail = 0;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
    cbuf->full = false;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	741a      	strb	r2, [r3, #16]
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	08005594 	.word	0x08005594
 8000ea8:	08005644 	.word	0x08005644
 8000eac:	08005574 	.word	0x08005574

08000eb0 <ring_buf_empty>:

    return cbuf->full;
}

bool ring_buf_empty(cbuf_handle_t cbuf)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d105      	bne.n	8000eca <ring_buf_empty+0x1a>
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <ring_buf_empty+0x48>)
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <ring_buf_empty+0x4c>)
 8000ec2:	213d      	movs	r1, #61	; 0x3d
 8000ec4:	480e      	ldr	r0, [pc, #56]	; (8000f00 <ring_buf_empty+0x50>)
 8000ec6:	f003 fbbf 	bl	8004648 <__assert_func>

    return (!cbuf->full && (cbuf->head == cbuf->tail));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7c1b      	ldrb	r3, [r3, #16]
 8000ece:	f083 0301 	eor.w	r3, r3, #1
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <ring_buf_empty+0x38>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d101      	bne.n	8000ee8 <ring_buf_empty+0x38>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e000      	b.n	8000eea <ring_buf_empty+0x3a>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	08005594 	.word	0x08005594
 8000efc:	08005654 	.word	0x08005654
 8000f00:	08005574 	.word	0x08005574

08000f04 <ring_buf_size>:

	return cbuf->max;
}

size_t ring_buf_size(cbuf_handle_t cbuf)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d105      	bne.n	8000f1e <ring_buf_size+0x1a>
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <ring_buf_size+0x64>)
 8000f14:	4a15      	ldr	r2, [pc, #84]	; (8000f6c <ring_buf_size+0x68>)
 8000f16:	214b      	movs	r1, #75	; 0x4b
 8000f18:	4815      	ldr	r0, [pc, #84]	; (8000f70 <ring_buf_size+0x6c>)
 8000f1a:	f003 fb95 	bl	8004648 <__assert_func>

	size_t size = cbuf->max;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	60fb      	str	r3, [r7, #12]

	if(!cbuf->full)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7c1b      	ldrb	r3, [r3, #16]
 8000f28:	f083 0301 	eor.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d015      	beq.n	8000f5e <ring_buf_size+0x5a>
	{
		if(cbuf->head >= cbuf->tail)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d306      	bcc.n	8000f4c <ring_buf_size+0x48>
		{
			size = (cbuf->head - cbuf->tail);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e008      	b.n	8000f5e <ring_buf_size+0x5a>
		}
		else
		{
			size = (cbuf->max + cbuf->head - cbuf->tail);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	441a      	add	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	60fb      	str	r3, [r7, #12]
		}
	}

	return size;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	08005594 	.word	0x08005594
 8000f6c:	08005664 	.word	0x08005664
 8000f70:	08005574 	.word	0x08005574

08000f74 <advance_pointer>:

static void advance_pointer(cbuf_handle_t cbuf)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <advance_pointer+0x1a>
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <advance_pointer+0x70>)
 8000f84:	4a18      	ldr	r2, [pc, #96]	; (8000fe8 <advance_pointer+0x74>)
 8000f86:	2160      	movs	r1, #96	; 0x60
 8000f88:	4818      	ldr	r0, [pc, #96]	; (8000fec <advance_pointer+0x78>)
 8000f8a:	f003 fb5d 	bl	8004648 <__assert_func>

	if(cbuf->full)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7c1b      	ldrb	r3, [r3, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <advance_pointer+0x3a>
   	{
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	68d2      	ldr	r2, [r2, #12]
 8000fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fa4:	fb02 f201 	mul.w	r2, r2, r1
 8000fa8:	1a9a      	subs	r2, r3, r2
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	609a      	str	r2, [r3, #8]
	}

	cbuf->head = (cbuf->head + 1) % cbuf->max;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68d2      	ldr	r2, [r2, #12]
 8000fb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fbc:	fb02 f201 	mul.w	r2, r2, r1
 8000fc0:	1a9a      	subs	r2, r3, r2
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	605a      	str	r2, [r3, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	bf0c      	ite	eq
 8000fd2:	2301      	moveq	r3, #1
 8000fd4:	2300      	movne	r3, #0
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	741a      	strb	r2, [r3, #16]
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	08005594 	.word	0x08005594
 8000fe8:	08005674 	.word	0x08005674
 8000fec:	08005574 	.word	0x08005574

08000ff0 <retreat_pointer>:

static void retreat_pointer(cbuf_handle_t cbuf)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d105      	bne.n	800100a <retreat_pointer+0x1a>
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <retreat_pointer+0x40>)
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <retreat_pointer+0x44>)
 8001002:	216d      	movs	r1, #109	; 0x6d
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <retreat_pointer+0x48>)
 8001006:	f003 fb1f 	bl	8004648 <__assert_func>

	cbuf->full = false;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	741a      	strb	r2, [r3, #16]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	3301      	adds	r3, #1
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68d2      	ldr	r2, [r2, #12]
 800101a:	fbb3 f1f2 	udiv	r1, r3, r2
 800101e:	fb02 f201 	mul.w	r2, r2, r1
 8001022:	1a9a      	subs	r2, r3, r2
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	609a      	str	r2, [r3, #8]
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	08005594 	.word	0x08005594
 8001034:	08005684 	.word	0x08005684
 8001038:	08005574 	.word	0x08005574

0800103c <ring_buf_put>:

void ring_buf_put(cbuf_handle_t cbuf, uint8_t data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	assert(cbuf && cbuf->buffer);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <ring_buf_put+0x1a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d105      	bne.n	8001062 <ring_buf_put+0x26>
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <ring_buf_put+0x44>)
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <ring_buf_put+0x48>)
 800105a:	2175      	movs	r1, #117	; 0x75
 800105c:	480a      	ldr	r0, [pc, #40]	; (8001088 <ring_buf_put+0x4c>)
 800105e:	f003 faf3 	bl	8004648 <__assert_func>

    cbuf->buffer[cbuf->head] = data;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4413      	add	r3, r2
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	701a      	strb	r2, [r3, #0]

    advance_pointer(cbuf);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff7f 	bl	8000f74 <advance_pointer>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	080055b4 	.word	0x080055b4
 8001084:	08005694 	.word	0x08005694
 8001088:	08005574 	.word	0x08005574

0800108c <ring_buf_get>:

int ring_buf_get(cbuf_handle_t cbuf, uint8_t * data)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
    assert(cbuf && data && cbuf->buffer);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <ring_buf_get+0x1e>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <ring_buf_get+0x1e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d105      	bne.n	80010b6 <ring_buf_get+0x2a>
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <ring_buf_get+0x68>)
 80010ac:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <ring_buf_get+0x6c>)
 80010ae:	217e      	movs	r1, #126	; 0x7e
 80010b0:	4812      	ldr	r0, [pc, #72]	; (80010fc <ring_buf_get+0x70>)
 80010b2:	f003 fac9 	bl	8004648 <__assert_func>

    int r = -1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ba:	60fb      	str	r3, [r7, #12]

    if(!ring_buf_empty(cbuf))
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff fef7 	bl	8000eb0 <ring_buf_empty>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f083 0301 	eor.w	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00c      	beq.n	80010e8 <ring_buf_get+0x5c>
    {
        *data = cbuf->buffer[cbuf->tail];
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	4413      	add	r3, r2
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	701a      	strb	r2, [r3, #0]
        retreat_pointer(cbuf);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff86 	bl	8000ff0 <retreat_pointer>

        r = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
    }

    return r;
 80010e8:	68fb      	ldr	r3, [r7, #12]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	080055cc 	.word	0x080055cc
 80010f8:	080056a4 	.word	0x080056a4
 80010fc:	08005574 	.word	0x08005574

08001100 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001138 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001104:	f7ff fe3a 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001108:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800110a:	e003      	b.n	8001114 <LoopCopyDataInit>

0800110c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800110e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001110:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001112:	3104      	adds	r1, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001114:	480a      	ldr	r0, [pc, #40]	; (8001140 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001118:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800111a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800111c:	d3f6      	bcc.n	800110c <CopyDataInit>
	ldr	r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001120:	e002      	b.n	8001128 <LoopFillZerobss>

08001122 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001122:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001124:	f842 3b04 	str.w	r3, [r2], #4

08001128 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <LoopForever+0x16>)
	cmp	r2, r3
 800112a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800112c:	d3f9      	bcc.n	8001122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f003 fac1 	bl	80046b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001132:	f7ff fa77 	bl	8000624 <main>

08001136 <LoopForever>:

LoopForever:
    b LoopForever
 8001136:	e7fe      	b.n	8001136 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001138:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800113c:	08005798 	.word	0x08005798
	ldr	r0, =_sdata
 8001140:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001144:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001148:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800114c:	200005e8 	.word	0x200005e8

08001150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_2_IRQHandler>

08001152 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f93d 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f80e 	bl	8001184 <HAL_InitTick>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	e001      	b.n	8001178 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001174:	f7ff fc1c 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001178:	79fb      	ldrb	r3, [r7, #7]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_InitTick+0x6c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d023      	beq.n	80011e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_InitTick+0x70>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_InitTick+0x6c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f949 	bl	8001446 <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10f      	bne.n	80011da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d809      	bhi.n	80011d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f000 f913 	bl	80013f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_InitTick+0x74>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e007      	b.n	80011e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e004      	b.n	80011e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e001      	b.n	80011e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	200005e0 	.word	0x200005e0

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200005e0 	.word	0x200005e0

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff29 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff3e 	bl	8001284 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff8e 	bl	8001330 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5d 	bl	80012dc <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff31 	bl	80012a0 <__NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffa2 	bl	8001398 <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d005      	beq.n	8001482 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2204      	movs	r2, #4
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e029      	b.n	80014d6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 020e 	bic.w	r2, r2, #14
 8001490:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0201 	bic.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f003 021c 	and.w	r2, r3, #28
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	4798      	blx	r3
    }
  }
  return status;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ee:	e17f      	b.n	80017f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8171 	beq.w	80017ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d00b      	beq.n	8001528 <HAL_GPIO_Init+0x48>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d007      	beq.n	8001528 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800151c:	2b11      	cmp	r3, #17
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b12      	cmp	r3, #18
 8001526:	d130      	bne.n	800158a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800155e:	2201      	movs	r2, #1
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	f003 0201 	and.w	r2, r3, #1
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b03      	cmp	r3, #3
 8001594:	d118      	bne.n	80015c8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	08db      	lsrs	r3, r3, #3
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x128>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b12      	cmp	r3, #18
 8001606:	d123      	bne.n	8001650 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	08da      	lsrs	r2, r3, #3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3208      	adds	r2, #8
 8001610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	08da      	lsrs	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3208      	adds	r2, #8
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0203 	and.w	r2, r3, #3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80ac 	beq.w	80017ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	4b5e      	ldr	r3, [pc, #376]	; (800180c <HAL_GPIO_Init+0x32c>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001696:	4a5d      	ldr	r2, [pc, #372]	; (800180c <HAL_GPIO_Init+0x32c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6613      	str	r3, [r2, #96]	; 0x60
 800169e:	4b5b      	ldr	r3, [pc, #364]	; (800180c <HAL_GPIO_Init+0x32c>)
 80016a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016aa:	4a59      	ldr	r2, [pc, #356]	; (8001810 <HAL_GPIO_Init+0x330>)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016d4:	d025      	beq.n	8001722 <HAL_GPIO_Init+0x242>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4e      	ldr	r2, [pc, #312]	; (8001814 <HAL_GPIO_Init+0x334>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01f      	beq.n	800171e <HAL_GPIO_Init+0x23e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4d      	ldr	r2, [pc, #308]	; (8001818 <HAL_GPIO_Init+0x338>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d019      	beq.n	800171a <HAL_GPIO_Init+0x23a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4c      	ldr	r2, [pc, #304]	; (800181c <HAL_GPIO_Init+0x33c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x236>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4b      	ldr	r2, [pc, #300]	; (8001820 <HAL_GPIO_Init+0x340>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x232>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4a      	ldr	r2, [pc, #296]	; (8001824 <HAL_GPIO_Init+0x344>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x22e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a49      	ldr	r2, [pc, #292]	; (8001828 <HAL_GPIO_Init+0x348>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x22a>
 8001706:	2306      	movs	r3, #6
 8001708:	e00c      	b.n	8001724 <HAL_GPIO_Init+0x244>
 800170a:	2307      	movs	r3, #7
 800170c:	e00a      	b.n	8001724 <HAL_GPIO_Init+0x244>
 800170e:	2305      	movs	r3, #5
 8001710:	e008      	b.n	8001724 <HAL_GPIO_Init+0x244>
 8001712:	2304      	movs	r3, #4
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x244>
 8001716:	2303      	movs	r3, #3
 8001718:	e004      	b.n	8001724 <HAL_GPIO_Init+0x244>
 800171a:	2302      	movs	r3, #2
 800171c:	e002      	b.n	8001724 <HAL_GPIO_Init+0x244>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_GPIO_Init+0x244>
 8001722:	2300      	movs	r3, #0
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	f002 0203 	and.w	r2, r2, #3
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	4093      	lsls	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001734:	4936      	ldr	r1, [pc, #216]	; (8001810 <HAL_GPIO_Init+0x330>)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001742:	4b3a      	ldr	r3, [pc, #232]	; (800182c <HAL_GPIO_Init+0x34c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001766:	4a31      	ldr	r2, [pc, #196]	; (800182c <HAL_GPIO_Init+0x34c>)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_GPIO_Init+0x34c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001790:	4a26      	ldr	r2, [pc, #152]	; (800182c <HAL_GPIO_Init+0x34c>)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_GPIO_Init+0x34c>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017ba:	4a1c      	ldr	r2, [pc, #112]	; (800182c <HAL_GPIO_Init+0x34c>)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_GPIO_Init+0x34c>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017e4:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_GPIO_Init+0x34c>)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa22 f303 	lsr.w	r3, r2, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f47f ae78 	bne.w	80014f0 <HAL_GPIO_Init+0x10>
  }
}
 8001800:	bf00      	nop
 8001802:	371c      	adds	r7, #28
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000
 8001814:	48000400 	.word	0x48000400
 8001818:	48000800 	.word	0x48000800
 800181c:	48000c00 	.word	0x48000c00
 8001820:	48001000 	.word	0x48001000
 8001824:	48001400 	.word	0x48001400
 8001828:	48001800 	.word	0x48001800
 800182c:	40010400 	.word	0x40010400

08001830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001840:	787b      	ldrb	r3, [r7, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800184c:	e002      	b.n	8001854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	041a      	lsls	r2, r3, #16
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43d9      	mvns	r1, r3
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	400b      	ands	r3, r1
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	619a      	str	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe feaa 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_PWREx_GetVoltageRange+0x18>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000

080018e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ee:	d130      	bne.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f0:	4b23      	ldr	r3, [pc, #140]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018fc:	d038      	beq.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001906:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2232      	movs	r2, #50	; 0x32
 8001914:	fb02 f303 	mul.w	r3, r2, r3
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0c9b      	lsrs	r3, r3, #18
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001924:	e002      	b.n	800192c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3b01      	subs	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001938:	d102      	bne.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f2      	bne.n	8001926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194c:	d110      	bne.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e00f      	b.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800195a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195e:	d007      	beq.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001968:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40007000 	.word	0x40007000
 8001984:	20000000 	.word	0x20000000
 8001988:	431bde83 	.word	0x431bde83

0800198c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e3d4      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199e:	4ba1      	ldr	r3, [pc, #644]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a8:	4b9e      	ldr	r3, [pc, #632]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80e4 	beq.w	8001b88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <HAL_RCC_OscConfig+0x4a>
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	f040 808b 	bne.w	8001ae4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	f040 8087 	bne.w	8001ae4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019d6:	4b93      	ldr	r3, [pc, #588]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e3ac      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1a      	ldr	r2, [r3, #32]
 80019f2:	4b8c      	ldr	r3, [pc, #560]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <HAL_RCC_OscConfig+0x7c>
 80019fe:	4b89      	ldr	r3, [pc, #548]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a06:	e005      	b.n	8001a14 <HAL_RCC_OscConfig+0x88>
 8001a08:	4b86      	ldr	r3, [pc, #536]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d223      	bcs.n	8001a60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fd3f 	bl	80024a0 <RCC_SetFlashLatencyFromMSIRange>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e38d      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2c:	4b7d      	ldr	r3, [pc, #500]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a7c      	ldr	r2, [pc, #496]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b7a      	ldr	r3, [pc, #488]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4977      	ldr	r1, [pc, #476]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4a:	4b76      	ldr	r3, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	4972      	ldr	r1, [pc, #456]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
 8001a5e:	e025      	b.n	8001aac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a60:	4b70      	ldr	r3, [pc, #448]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6f      	ldr	r2, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	496a      	ldr	r1, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7e:	4b69      	ldr	r3, [pc, #420]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	4965      	ldr	r1, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fcff 	bl	80024a0 <RCC_SetFlashLatencyFromMSIRange>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e34d      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aac:	f000 fc36 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8001ab0:	4601      	mov	r1, r0
 8001ab2:	4b5c      	ldr	r3, [pc, #368]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	4a5a      	ldr	r2, [pc, #360]	; (8001c28 <HAL_RCC_OscConfig+0x29c>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	fa21 f303 	lsr.w	r3, r1, r3
 8001ac8:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_RCC_OscConfig+0x2a0>)
 8001aca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001acc:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_RCC_OscConfig+0x2a4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fb57 	bl	8001184 <HAL_InitTick>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d052      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	e331      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d032      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aec:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fb94 	bl	8001224 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b00:	f7ff fb90 	bl	8001224 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e31a      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b12:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a40      	ldr	r2, [pc, #256]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	493b      	ldr	r1, [pc, #236]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	4936      	ldr	r1, [pc, #216]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
 8001b50:	e01a      	b.n	8001b88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a33      	ldr	r2, [pc, #204]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fb61 	bl	8001224 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b66:	f7ff fb5d 	bl	8001224 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e2e7      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b78:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x1da>
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d074      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x21a>
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d10e      	bne.n	8001bbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d10b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d064      	beq.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d160      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e2c4      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x24a>
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e01d      	b.n	8001c12 <HAL_RCC_OscConfig+0x286>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bde:	d10c      	bne.n	8001bfa <HAL_RCC_OscConfig+0x26e>
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e00b      	b.n	8001c12 <HAL_RCC_OscConfig+0x286>
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01c      	beq.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fb03 	bl	8001224 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c20:	e011      	b.n	8001c46 <HAL_RCC_OscConfig+0x2ba>
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	080055ec 	.word	0x080055ec
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff faf6 	bl	8001224 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e280      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c46:	4baf      	ldr	r3, [pc, #700]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2a8>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fae6 	bl	8001224 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fae2 	bl	8001224 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e26c      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6e:	4ba5      	ldr	r3, [pc, #660]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2d0>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d060      	beq.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_OscConfig+0x310>
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d119      	bne.n	8001cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d116      	bne.n	8001cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9c:	4b99      	ldr	r3, [pc, #612]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x328>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e249      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b93      	ldr	r3, [pc, #588]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	4990      	ldr	r1, [pc, #576]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc8:	e040      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d023      	beq.n	8001d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd2:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a8b      	ldr	r2, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff faa1 	bl	8001224 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fa9d 	bl	8001224 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e227      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf8:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b7f      	ldr	r3, [pc, #508]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	497c      	ldr	r1, [pc, #496]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	e018      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b7a      	ldr	r3, [pc, #488]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a79      	ldr	r2, [pc, #484]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff fa7d 	bl	8001224 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fa79 	bl	8001224 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e203      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d40:	4b70      	ldr	r3, [pc, #448]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d03c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d66:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff fa58 	bl	8001224 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff fa54 	bl	8001224 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1de      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d8a:	4b5e      	ldr	r3, [pc, #376]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ef      	beq.n	8001d78 <HAL_RCC_OscConfig+0x3ec>
 8001d98:	e01b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7ff fa3b 	bl	8001224 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff fa37 	bl	8001224 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e1c1      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ef      	bne.n	8001db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a6 	beq.w	8001f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001de4:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10d      	bne.n	8001e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	4a43      	ldr	r2, [pc, #268]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfc:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0c:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d118      	bne.n	8001e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e18:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a3a      	ldr	r2, [pc, #232]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e24:	f7ff f9fe 	bl	8001224 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7ff f9fa 	bl	8001224 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e184      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3e:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4d8>
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e58:	4a2a      	ldr	r2, [pc, #168]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e62:	e024      	b.n	8001eae <HAL_RCC_OscConfig+0x522>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d110      	bne.n	8001e8e <HAL_RCC_OscConfig+0x502>
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8c:	e00f      	b.n	8001eae <HAL_RCC_OscConfig+0x522>
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0304 	bic.w	r3, r3, #4
 8001eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d016      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb6:	f7ff f9b5 	bl	8001224 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7ff f9b1 	bl	8001224 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e139      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0ed      	beq.n	8001ebe <HAL_RCC_OscConfig+0x532>
 8001ee2:	e01a      	b.n	8001f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f99e 	bl	8001224 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eea:	e00f      	b.n	8001f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7ff f99a 	bl	8001224 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d906      	bls.n	8001f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e122      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f0c:	4b90      	ldr	r3, [pc, #576]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1e8      	bne.n	8001eec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	4a8a      	ldr	r2, [pc, #552]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 8108 	beq.w	8002146 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	f040 80d0 	bne.w	80020e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f40:	4b83      	ldr	r3, [pc, #524]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d130      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d127      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d11f      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f80:	2a07      	cmp	r2, #7
 8001f82:	bf14      	ite	ne
 8001f84:	2201      	movne	r2, #1
 8001f86:	2200      	moveq	r2, #0
 8001f88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d113      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d109      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d06e      	beq.n	8002094 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	d069      	beq.n	8002090 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fbc:	4b64      	ldr	r3, [pc, #400]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fc8:	4b61      	ldr	r3, [pc, #388]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b7      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a5c      	ldr	r2, [pc, #368]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fe4:	f7ff f91e 	bl	8001224 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff f91a 	bl	8001224 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0a4      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffe:	4b54      	ldr	r3, [pc, #336]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200a:	4b51      	ldr	r3, [pc, #324]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_RCC_OscConfig+0x7c8>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800201a:	3a01      	subs	r2, #1
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002024:	0212      	lsls	r2, r2, #8
 8002026:	4311      	orrs	r1, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800202c:	0852      	lsrs	r2, r2, #1
 800202e:	3a01      	subs	r2, #1
 8002030:	0552      	lsls	r2, r2, #21
 8002032:	4311      	orrs	r1, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002038:	0852      	lsrs	r2, r2, #1
 800203a:	3a01      	subs	r2, #1
 800203c:	0652      	lsls	r2, r2, #25
 800203e:	4311      	orrs	r1, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002044:	0912      	lsrs	r2, r2, #4
 8002046:	0452      	lsls	r2, r2, #17
 8002048:	430a      	orrs	r2, r1
 800204a:	4941      	ldr	r1, [pc, #260]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 800204c:	4313      	orrs	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002050:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800205c:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a3b      	ldr	r2, [pc, #236]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002068:	f7ff f8dc 	bl	8001224 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7ff f8d8 	bl	8001224 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e062      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002082:	4b33      	ldr	r3, [pc, #204]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800208e:	e05a      	b.n	8002146 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e059      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002094:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d152      	bne.n	8002146 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a2a      	ldr	r2, [pc, #168]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ac:	4b28      	ldr	r3, [pc, #160]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a27      	ldr	r2, [pc, #156]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020b8:	f7ff f8b4 	bl	8001224 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff f8b0 	bl	8001224 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e03a      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x734>
 80020de:	e032      	b.n	8002146 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d02d      	beq.n	8002142 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a19      	ldr	r2, [pc, #100]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002104:	f023 0303 	bic.w	r3, r3, #3
 8002108:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002110:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002118:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7ff f883 	bl	8001224 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7ff f87f 	bl	8001224 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e009      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x796>
 8002140:	e001      	b.n	8002146 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	f99d808c 	.word	0xf99d808c

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0c8      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d910      	bls.n	800219c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	4961      	ldr	r1, [pc, #388]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0b0      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d04c      	beq.n	8002242 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b0:	4b56      	ldr	r3, [pc, #344]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d121      	bne.n	8002200 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e09e      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d115      	bne.n	8002200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e092      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e0:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e086      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f0:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e07e      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002200:	4b42      	ldr	r3, [pc, #264]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 0203 	bic.w	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	493f      	ldr	r1, [pc, #252]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002212:	f7ff f807 	bl	8001224 <HAL_GetTick>
 8002216:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002218:	e00a      	b.n	8002230 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221a:	f7ff f803 	bl	8001224 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e066      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002230:	4b36      	ldr	r3, [pc, #216]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 020c 	and.w	r2, r3, #12
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	429a      	cmp	r2, r3
 8002240:	d1eb      	bne.n	800221a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	492c      	ldr	r1, [pc, #176]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d210      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4924      	ldr	r1, [pc, #144]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e036      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4918      	ldr	r1, [pc, #96]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4910      	ldr	r1, [pc, #64]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ce:	f000 f825 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022d2:	4601      	mov	r1, r0
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe ff46 	bl	8001184 <HAL_InitTick>
 80022f8:	4603      	mov	r3, r0
 80022fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80022fc:	7afb      	ldrb	r3, [r7, #11]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40022000 	.word	0x40022000
 800230c:	40021000 	.word	0x40021000
 8002310:	080055ec 	.word	0x080055ec
 8002314:	20000000 	.word	0x20000000
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002334:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x34>
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d121      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d11e      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002350:	4b33      	ldr	r3, [pc, #204]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 800235e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e005      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002378:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b04      	cmp	r3, #4
 8002392:	d102      	bne.n	800239a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	e004      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023a0:	4b22      	ldr	r3, [pc, #136]	; (800242c <HAL_RCC_GetSysClockFreq+0x110>)
 80023a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d133      	bne.n	8002412 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d002      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0xa4>
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d003      	beq.n	80023c6 <HAL_RCC_GetSysClockFreq+0xaa>
 80023be:	e005      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023c2:	617b      	str	r3, [r7, #20]
      break;
 80023c4:	e005      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCC_GetSysClockFreq+0x110>)
 80023c8:	617b      	str	r3, [r7, #20]
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	617b      	str	r3, [r7, #20]
      break;
 80023d0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	3301      	adds	r3, #1
 80023de:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	fb02 f203 	mul.w	r2, r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0e5b      	lsrs	r3, r3, #25
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	3301      	adds	r3, #1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002410:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002412:	69bb      	ldr	r3, [r7, #24]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3724      	adds	r7, #36	; 0x24
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40021000 	.word	0x40021000
 8002424:	08005604 	.word	0x08005604
 8002428:	00f42400 	.word	0x00f42400
 800242c:	007a1200 	.word	0x007a1200

08002430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_RCC_GetHCLKFreq+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000

08002448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800244c:	f7ff fff0 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002450:	4601      	mov	r1, r0
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	080055fc 	.word	0x080055fc

08002474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002478:	f7ff ffda 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 800247c:	4601      	mov	r1, r0
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0adb      	lsrs	r3, r3, #11
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_RCC_GetPCLK2Freq+0x28>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	080055fc 	.word	0x080055fc

080024a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024ac:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024b8:	f7ff fa04 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
 80024bc:	6178      	str	r0, [r7, #20]
 80024be:	e014      	b.n	80024ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4a24      	ldr	r2, [pc, #144]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	; 0x58
 80024cc:	4b22      	ldr	r3, [pc, #136]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024d8:	f7ff f9f4 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
 80024dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f0:	d10b      	bne.n	800250a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b80      	cmp	r3, #128	; 0x80
 80024f6:	d919      	bls.n	800252c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2ba0      	cmp	r3, #160	; 0xa0
 80024fc:	d902      	bls.n	8002504 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024fe:	2302      	movs	r3, #2
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	e013      	b.n	800252c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002504:	2301      	movs	r3, #1
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	e010      	b.n	800252c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	d902      	bls.n	8002516 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002510:	2303      	movs	r3, #3
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	e00a      	b.n	800252c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	d102      	bne.n	8002522 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800251c:	2302      	movs	r3, #2
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	e004      	b.n	800252c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b70      	cmp	r3, #112	; 0x70
 8002526:	d101      	bne.n	800252c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002528:	2301      	movs	r3, #1
 800252a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 0207 	bic.w	r2, r3, #7
 8002534:	4909      	ldr	r1, [pc, #36]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800253c:	4b07      	ldr	r3, [pc, #28]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	40022000 	.word	0x40022000

08002560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002568:	2300      	movs	r3, #0
 800256a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800256c:	2300      	movs	r3, #0
 800256e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002578:	2b00      	cmp	r3, #0
 800257a:	d03f      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002584:	d01c      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258a:	d802      	bhi.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00e      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002590:	e01f      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002596:	d003      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002598:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800259c:	d01c      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800259e:	e018      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025a0:	4b85      	ldr	r3, [pc, #532]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a84      	ldr	r2, [pc, #528]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ac:	e015      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 fab9 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 80025ba:	4603      	mov	r3, r0
 80025bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025be:	e00c      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3320      	adds	r3, #32
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fba0 	bl	8002d0c <RCCEx_PLLSAI2_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025d0:	e003      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	74fb      	strb	r3, [r7, #19]
      break;
 80025d6:	e000      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80025d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025da:	7cfb      	ldrb	r3, [r7, #19]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025e0:	4b75      	ldr	r3, [pc, #468]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ee:	4972      	ldr	r1, [pc, #456]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025f6:	e001      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d03f      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800260c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002610:	d01c      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002612:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002616:	d802      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800261c:	e01f      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800261e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002622:	d003      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002624:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002628:	d01c      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800262a:	e018      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800262c:	4b62      	ldr	r3, [pc, #392]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a61      	ldr	r2, [pc, #388]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002636:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002638:	e015      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fa73 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 8002646:	4603      	mov	r3, r0
 8002648:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800264a:	e00c      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3320      	adds	r3, #32
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f000 fb5a 	bl	8002d0c <RCCEx_PLLSAI2_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800265c:	e003      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	74fb      	strb	r3, [r7, #19]
      break;
 8002662:	e000      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800266c:	4b52      	ldr	r3, [pc, #328]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800267a:	494f      	ldr	r1, [pc, #316]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002682:	e001      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a0 	beq.w	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800269a:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00d      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b0:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	4a40      	ldr	r2, [pc, #256]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ba:	6593      	str	r3, [r2, #88]	; 0x58
 80026bc:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c8:	2301      	movs	r3, #1
 80026ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026cc:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a3a      	ldr	r2, [pc, #232]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026d8:	f7fe fda4 	bl	8001224 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026de:	e009      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e0:	f7fe fda0 	bl	8001224 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d902      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	74fb      	strb	r3, [r7, #19]
        break;
 80026f2:	e005      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026f4:	4b31      	ldr	r3, [pc, #196]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ef      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d15c      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002710:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01f      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	d019      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002730:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002750:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe fd5f 	bl	8001224 <HAL_GetTick>
 8002766:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002768:	e00b      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe fd5b 	bl	8001224 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d902      	bls.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	74fb      	strb	r3, [r7, #19]
            break;
 8002780:	e006      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ec      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a6:	4904      	ldr	r1, [pc, #16]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027ae:	e009      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	74bb      	strb	r3, [r7, #18]
 80027b4:	e006      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c4:	7c7b      	ldrb	r3, [r7, #17]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d105      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ca:	4b9e      	ldr	r3, [pc, #632]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	4a9d      	ldr	r2, [pc, #628]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e2:	4b98      	ldr	r3, [pc, #608]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f023 0203 	bic.w	r2, r3, #3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	4994      	ldr	r1, [pc, #592]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002804:	4b8f      	ldr	r3, [pc, #572]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f023 020c 	bic.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	498c      	ldr	r1, [pc, #560]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002826:	4b87      	ldr	r3, [pc, #540]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	4983      	ldr	r1, [pc, #524]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002848:	4b7e      	ldr	r3, [pc, #504]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	497b      	ldr	r1, [pc, #492]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800286a:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002878:	4972      	ldr	r1, [pc, #456]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800288c:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	496a      	ldr	r1, [pc, #424]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ae:	4b65      	ldr	r3, [pc, #404]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	4961      	ldr	r1, [pc, #388]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028d0:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	4959      	ldr	r1, [pc, #356]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028f2:	4b54      	ldr	r3, [pc, #336]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002900:	4950      	ldr	r1, [pc, #320]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002914:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	4948      	ldr	r1, [pc, #288]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	493f      	ldr	r1, [pc, #252]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d028      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002958:	4b3a      	ldr	r3, [pc, #232]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002966:	4937      	ldr	r1, [pc, #220]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002976:	d106      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002978:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a31      	ldr	r2, [pc, #196]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002982:	60d3      	str	r3, [r2, #12]
 8002984:	e011      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800298e:	d10c      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	2101      	movs	r1, #1
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f8c8 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d028      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029b6:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	491f      	ldr	r1, [pc, #124]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d4:	d106      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	4a1a      	ldr	r2, [pc, #104]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e0:	60d3      	str	r3, [r2, #12]
 80029e2:	e011      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2101      	movs	r1, #1
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f899 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02b      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a32:	d109      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a02      	ldr	r2, [pc, #8]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
 8002a40:	e014      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2101      	movs	r1, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f867 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d02f      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a86:	4928      	ldr	r1, [pc, #160]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a96:	d10d      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f844 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d014      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	74bb      	strb	r3, [r7, #18]
 8002ab2:	e011      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3320      	adds	r3, #32
 8002ac2:	2102      	movs	r1, #2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 f921 	bl	8002d0c <RCCEx_PLLSAI2_Config>
 8002aca:	4603      	mov	r3, r0
 8002acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ace:	7cfb      	ldrb	r3, [r7, #19]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af2:	490d      	ldr	r1, [pc, #52]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b16:	4904      	ldr	r1, [pc, #16]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000

08002b2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b3a:	4b73      	ldr	r3, [pc, #460]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d018      	beq.n	8002b78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b46:	4b70      	ldr	r3, [pc, #448]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0203 	and.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d10d      	bne.n	8002b72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
       ||
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b5e:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d044      	beq.n	8002bfc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	e041      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d00c      	beq.n	8002b9a <RCCEx_PLLSAI1_Config+0x6e>
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d013      	beq.n	8002bac <RCCEx_PLLSAI1_Config+0x80>
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d120      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b88:	4b5f      	ldr	r3, [pc, #380]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11d      	bne.n	8002bd0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b98:	e01a      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b9a:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d116      	bne.n	8002bd4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002baa:	e013      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bac:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10f      	bne.n	8002bd8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bc8:	e006      	b.n	8002bd8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8002bce:	e004      	b.n	8002bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bd0:	bf00      	nop
 8002bd2:	e002      	b.n	8002bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bd4:	bf00      	nop
 8002bd6:	e000      	b.n	8002bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bd8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10d      	bne.n	8002bfc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002be0:	4b49      	ldr	r3, [pc, #292]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6819      	ldr	r1, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	4944      	ldr	r1, [pc, #272]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d17d      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c02:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a40      	ldr	r2, [pc, #256]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0e:	f7fe fb09 	bl	8001224 <HAL_GetTick>
 8002c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c14:	e009      	b.n	8002c2a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c16:	f7fe fb05 	bl	8001224 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d902      	bls.n	8002c2a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	73fb      	strb	r3, [r7, #15]
        break;
 8002c28:	e005      	b.n	8002c36 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1ef      	bne.n	8002c16 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d160      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d111      	bne.n	8002c66 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6892      	ldr	r2, [r2, #8]
 8002c52:	0211      	lsls	r1, r2, #8
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68d2      	ldr	r2, [r2, #12]
 8002c58:	0912      	lsrs	r2, r2, #4
 8002c5a:	0452      	lsls	r2, r2, #17
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	492a      	ldr	r1, [pc, #168]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	610b      	str	r3, [r1, #16]
 8002c64:	e027      	b.n	8002cb6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d112      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c6c:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6892      	ldr	r2, [r2, #8]
 8002c7c:	0211      	lsls	r1, r2, #8
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6912      	ldr	r2, [r2, #16]
 8002c82:	0852      	lsrs	r2, r2, #1
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0552      	lsls	r2, r2, #21
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	491f      	ldr	r1, [pc, #124]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	610b      	str	r3, [r1, #16]
 8002c90:	e011      	b.n	8002cb6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6892      	ldr	r2, [r2, #8]
 8002ca2:	0211      	lsls	r1, r2, #8
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6952      	ldr	r2, [r2, #20]
 8002ca8:	0852      	lsrs	r2, r2, #1
 8002caa:	3a01      	subs	r2, #1
 8002cac:	0652      	lsls	r2, r2, #25
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	4915      	ldr	r1, [pc, #84]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a13      	ldr	r2, [pc, #76]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc2:	f7fe faaf 	bl	8001224 <HAL_GetTick>
 8002cc6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cc8:	e009      	b.n	8002cde <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cca:	f7fe faab 	bl	8001224 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d902      	bls.n	8002cde <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	73fb      	strb	r3, [r7, #15]
          break;
 8002cdc:	e005      	b.n	8002cea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0ef      	beq.n	8002cca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d106      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	4903      	ldr	r1, [pc, #12]	; (8002d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000

08002d0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d1a:	4b68      	ldr	r3, [pc, #416]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d018      	beq.n	8002d58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d26:	4b65      	ldr	r3, [pc, #404]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0203 	and.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d10d      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
       ||
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d3e:	4b5f      	ldr	r3, [pc, #380]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d044      	beq.n	8002ddc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	e041      	b.n	8002ddc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d00c      	beq.n	8002d7a <RCCEx_PLLSAI2_Config+0x6e>
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d013      	beq.n	8002d8c <RCCEx_PLLSAI2_Config+0x80>
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d120      	bne.n	8002daa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d68:	4b54      	ldr	r3, [pc, #336]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d11d      	bne.n	8002db0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d78:	e01a      	b.n	8002db0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d7a:	4b50      	ldr	r3, [pc, #320]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d116      	bne.n	8002db4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8a:	e013      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d8c:	4b4b      	ldr	r3, [pc, #300]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10f      	bne.n	8002db8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d98:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002da8:	e006      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
      break;
 8002dae:	e004      	b.n	8002dba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002db0:	bf00      	nop
 8002db2:	e002      	b.n	8002dba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002db4:	bf00      	nop
 8002db6:	e000      	b.n	8002dba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002db8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10d      	bne.n	8002ddc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dc0:	4b3e      	ldr	r3, [pc, #248]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6819      	ldr	r1, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	4939      	ldr	r1, [pc, #228]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d167      	bne.n	8002eb2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002de2:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a35      	ldr	r2, [pc, #212]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dee:	f7fe fa19 	bl	8001224 <HAL_GetTick>
 8002df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002df4:	e009      	b.n	8002e0a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002df6:	f7fe fa15 	bl	8001224 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d902      	bls.n	8002e0a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	73fb      	strb	r3, [r7, #15]
        break;
 8002e08:	e005      	b.n	8002e16 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e0a:	4b2c      	ldr	r3, [pc, #176]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ef      	bne.n	8002df6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d14a      	bne.n	8002eb2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d111      	bne.n	8002e46 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6892      	ldr	r2, [r2, #8]
 8002e32:	0211      	lsls	r1, r2, #8
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68d2      	ldr	r2, [r2, #12]
 8002e38:	0912      	lsrs	r2, r2, #4
 8002e3a:	0452      	lsls	r2, r2, #17
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	491f      	ldr	r1, [pc, #124]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	614b      	str	r3, [r1, #20]
 8002e44:	e011      	b.n	8002e6a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6892      	ldr	r2, [r2, #8]
 8002e56:	0211      	lsls	r1, r2, #8
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6912      	ldr	r2, [r2, #16]
 8002e5c:	0852      	lsrs	r2, r2, #1
 8002e5e:	3a01      	subs	r2, #1
 8002e60:	0652      	lsls	r2, r2, #25
 8002e62:	430a      	orrs	r2, r1
 8002e64:	4915      	ldr	r1, [pc, #84]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fe f9d5 	bl	8001224 <HAL_GetTick>
 8002e7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e7c:	e009      	b.n	8002e92 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e7e:	f7fe f9d1 	bl	8001224 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d902      	bls.n	8002e92 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	73fb      	strb	r3, [r7, #15]
          break;
 8002e90:	e005      	b.n	8002e9e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0ef      	beq.n	8002e7e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d106      	bne.n	8002eb2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	4903      	ldr	r1, [pc, #12]	; (8002ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e049      	b.n	8002f66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd fd86 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f000 faa6 	bl	8003450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d001      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e04f      	b.n	8003028 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a23      	ldr	r2, [pc, #140]	; (8003034 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01d      	beq.n	8002fe6 <HAL_TIM_Base_Start_IT+0x76>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d018      	beq.n	8002fe6 <HAL_TIM_Base_Start_IT+0x76>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_TIM_Base_Start_IT+0x76>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_TIM_Base_Start_IT+0xcc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_TIM_Base_Start_IT+0x76>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_TIM_Base_Start_IT+0x76>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_TIM_Base_Start_IT+0x76>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d115      	bne.n	8003012 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	4b17      	ldr	r3, [pc, #92]	; (800304c <HAL_TIM_Base_Start_IT+0xdc>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b06      	cmp	r3, #6
 8002ff6:	d015      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0xb4>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffe:	d011      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003010:	e008      	b.n	8003024 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e000      	b.n	8003026 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003024:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40000400 	.word	0x40000400
 800303c:	40000800 	.word	0x40000800
 8003040:	40000c00 	.word	0x40000c00
 8003044:	40013400 	.word	0x40013400
 8003048:	40014000 	.word	0x40014000
 800304c:	00010007 	.word	0x00010007

08003050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b02      	cmp	r3, #2
 8003064:	d122      	bne.n	80030ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b02      	cmp	r3, #2
 8003072:	d11b      	bne.n	80030ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0202 	mvn.w	r2, #2
 800307c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f9be 	bl	8003414 <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f9b0 	bl	8003400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f9c1 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d122      	bne.n	8003100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d11b      	bne.n	8003100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0204 	mvn.w	r2, #4
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f994 	bl	8003414 <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f986 	bl	8003400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f997 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b08      	cmp	r3, #8
 800310c:	d122      	bne.n	8003154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b08      	cmp	r3, #8
 800311a:	d11b      	bne.n	8003154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0208 	mvn.w	r2, #8
 8003124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2204      	movs	r2, #4
 800312a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f96a 	bl	8003414 <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f95c 	bl	8003400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f96d 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b10      	cmp	r3, #16
 8003160:	d122      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b10      	cmp	r3, #16
 800316e:	d11b      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0210 	mvn.w	r2, #16
 8003178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2208      	movs	r2, #8
 800317e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f940 	bl	8003414 <HAL_TIM_IC_CaptureCallback>
 8003194:	e005      	b.n	80031a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f932 	bl	8003400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f943 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0201 	mvn.w	r2, #1
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd f9fa 	bl	80005c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b80      	cmp	r3, #128	; 0x80
 80031e0:	d10e      	bne.n	8003200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b80      	cmp	r3, #128	; 0x80
 80031ee:	d107      	bne.n	8003200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 faee 	bl	80037dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320e:	d10e      	bne.n	800322e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b80      	cmp	r3, #128	; 0x80
 800321c:	d107      	bne.n	800322e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fae1 	bl	80037f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d10e      	bne.n	800325a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d107      	bne.n	800325a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8f1 	bl	800343c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b20      	cmp	r3, #32
 8003266:	d10e      	bne.n	8003286 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b20      	cmp	r3, #32
 8003274:	d107      	bne.n	8003286 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f06f 0220 	mvn.w	r2, #32
 800327e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 faa1 	bl	80037c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_TIM_ConfigClockSource+0x18>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e0a8      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x16a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032d0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d067      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0x124>
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d80b      	bhi.n	80032fe <HAL_TIM_ConfigClockSource+0x70>
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d073      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x144>
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d802      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x66>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d06f      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80032f2:	e078      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d06c      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x144>
 80032f8:	2b30      	cmp	r3, #48	; 0x30
 80032fa:	d06a      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80032fc:	e073      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80032fe:	2b70      	cmp	r3, #112	; 0x70
 8003300:	d00d      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x90>
 8003302:	2b70      	cmp	r3, #112	; 0x70
 8003304:	d804      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x82>
 8003306:	2b50      	cmp	r3, #80	; 0x50
 8003308:	d033      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0xe4>
 800330a:	2b60      	cmp	r3, #96	; 0x60
 800330c:	d041      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800330e:	e06a      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003314:	d066      	beq.n	80033e4 <HAL_TIM_ConfigClockSource+0x156>
 8003316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331a:	d017      	beq.n	800334c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800331c:	e063      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f000 f9a3 	bl	8003678 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003340:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	609a      	str	r2, [r3, #8]
      break;
 800334a:	e04c      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6899      	ldr	r1, [r3, #8]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f000 f98c 	bl	8003678 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800336e:	609a      	str	r2, [r3, #8]
      break;
 8003370:	e039      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	461a      	mov	r2, r3
 8003380:	f000 f900 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2150      	movs	r1, #80	; 0x50
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f959 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 8003390:	e029      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6859      	ldr	r1, [r3, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	461a      	mov	r2, r3
 80033a0:	f000 f91f 	bl	80035e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2160      	movs	r1, #96	; 0x60
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f949 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 80033b0:	e019      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	461a      	mov	r2, r3
 80033c0:	f000 f8e0 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f939 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 80033d0:	e009      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f000 f930 	bl	8003642 <TIM_ITRx_SetConfig>
        break;
 80033e2:	e000      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80033e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a40      	ldr	r2, [pc, #256]	; (8003564 <TIM_Base_SetConfig+0x114>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d013      	beq.n	8003490 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d00f      	beq.n	8003490 <TIM_Base_SetConfig+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a3d      	ldr	r2, [pc, #244]	; (8003568 <TIM_Base_SetConfig+0x118>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00b      	beq.n	8003490 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a3c      	ldr	r2, [pc, #240]	; (800356c <TIM_Base_SetConfig+0x11c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d007      	beq.n	8003490 <TIM_Base_SetConfig+0x40>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a3b      	ldr	r2, [pc, #236]	; (8003570 <TIM_Base_SetConfig+0x120>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d003      	beq.n	8003490 <TIM_Base_SetConfig+0x40>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a3a      	ldr	r2, [pc, #232]	; (8003574 <TIM_Base_SetConfig+0x124>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d108      	bne.n	80034a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2f      	ldr	r2, [pc, #188]	; (8003564 <TIM_Base_SetConfig+0x114>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01f      	beq.n	80034ea <TIM_Base_SetConfig+0x9a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d01b      	beq.n	80034ea <TIM_Base_SetConfig+0x9a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2c      	ldr	r2, [pc, #176]	; (8003568 <TIM_Base_SetConfig+0x118>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d017      	beq.n	80034ea <TIM_Base_SetConfig+0x9a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2b      	ldr	r2, [pc, #172]	; (800356c <TIM_Base_SetConfig+0x11c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <TIM_Base_SetConfig+0x9a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2a      	ldr	r2, [pc, #168]	; (8003570 <TIM_Base_SetConfig+0x120>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00f      	beq.n	80034ea <TIM_Base_SetConfig+0x9a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a29      	ldr	r2, [pc, #164]	; (8003574 <TIM_Base_SetConfig+0x124>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00b      	beq.n	80034ea <TIM_Base_SetConfig+0x9a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a28      	ldr	r2, [pc, #160]	; (8003578 <TIM_Base_SetConfig+0x128>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <TIM_Base_SetConfig+0x9a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <TIM_Base_SetConfig+0x12c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_Base_SetConfig+0x9a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a26      	ldr	r2, [pc, #152]	; (8003580 <TIM_Base_SetConfig+0x130>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d108      	bne.n	80034fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a10      	ldr	r2, [pc, #64]	; (8003564 <TIM_Base_SetConfig+0x114>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00f      	beq.n	8003548 <TIM_Base_SetConfig+0xf8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a12      	ldr	r2, [pc, #72]	; (8003574 <TIM_Base_SetConfig+0x124>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00b      	beq.n	8003548 <TIM_Base_SetConfig+0xf8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a11      	ldr	r2, [pc, #68]	; (8003578 <TIM_Base_SetConfig+0x128>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d007      	beq.n	8003548 <TIM_Base_SetConfig+0xf8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a10      	ldr	r2, [pc, #64]	; (800357c <TIM_Base_SetConfig+0x12c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_Base_SetConfig+0xf8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <TIM_Base_SetConfig+0x130>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d103      	bne.n	8003550 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	615a      	str	r2, [r3, #20]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	40000c00 	.word	0x40000c00
 8003574:	40013400 	.word	0x40013400
 8003578:	40014000 	.word	0x40014000
 800357c:	40014400 	.word	0x40014400
 8003580:	40014800 	.word	0x40014800

08003584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0201 	bic.w	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f023 030a 	bic.w	r3, r3, #10
 80035c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b087      	sub	sp, #28
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f023 0210 	bic.w	r2, r3, #16
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800360c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	031b      	lsls	r3, r3, #12
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800361e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	f043 0307 	orr.w	r3, r3, #7
 8003664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	609a      	str	r2, [r3, #8]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	021a      	lsls	r2, r3, #8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	431a      	orrs	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4313      	orrs	r3, r2
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e068      	b.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2e      	ldr	r2, [pc, #184]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a2d      	ldr	r2, [pc, #180]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d108      	bne.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800370a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01d      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003742:	d018      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d009      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10c      	bne.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800377c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4313      	orrs	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40013400 	.word	0x40013400
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800
 80037c0:	40000c00 	.word	0x40000c00
 80037c4:	40014000 	.word	0x40014000

080037c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e040      	b.n	8003898 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd f90a 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	; 0x24
 8003830:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fa10 	bl	8003c68 <UART_SetConfig>
 8003848:	4603      	mov	r3, r0
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e022      	b.n	8003898 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fc8e 	bl	800417c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800386e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800387e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fd15 	bl	80042c0 <UART_CheckIdleState>
 8003896:	4603      	mov	r3, r0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d17a      	bne.n	80039ac <HAL_UART_Receive_IT+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_UART_Receive_IT+0x22>
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e073      	b.n	80039ae <HAL_UART_Receive_IT+0x10e>
    }

    //__HAL_LOCK(huart);

    huart->pRxBuffPtr  = pData;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88fa      	ldrh	r2, [r7, #6]
 80038d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	88fa      	ldrh	r2, [r7, #6]
 80038d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ea:	d10e      	bne.n	800390a <HAL_UART_Receive_IT+0x6a>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <HAL_UART_Receive_IT+0x60>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80038fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038fe:	e02d      	b.n	800395c <HAL_UART_Receive_IT+0xbc>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	22ff      	movs	r2, #255	; 0xff
 8003904:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003908:	e028      	b.n	800395c <HAL_UART_Receive_IT+0xbc>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10d      	bne.n	800392e <HAL_UART_Receive_IT+0x8e>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d104      	bne.n	8003924 <HAL_UART_Receive_IT+0x84>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	22ff      	movs	r2, #255	; 0xff
 800391e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003922:	e01b      	b.n	800395c <HAL_UART_Receive_IT+0xbc>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	227f      	movs	r2, #127	; 0x7f
 8003928:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800392c:	e016      	b.n	800395c <HAL_UART_Receive_IT+0xbc>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003936:	d10d      	bne.n	8003954 <HAL_UART_Receive_IT+0xb4>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_UART_Receive_IT+0xaa>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	227f      	movs	r2, #127	; 0x7f
 8003944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003948:	e008      	b.n	800395c <HAL_UART_Receive_IT+0xbc>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	223f      	movs	r2, #63	; 0x3f
 800394e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003952:	e003      	b.n	800395c <HAL_UART_Receive_IT+0xbc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2222      	movs	r2, #34	; 0x22
 8003966:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d107      	bne.n	8003992 <HAL_UART_Receive_IT+0xf2>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <HAL_UART_Receive_IT+0xf2>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <HAL_UART_Receive_IT+0x11c>)
 800398e:	661a      	str	r2, [r3, #96]	; 0x60
 8003990:	e002      	b.n	8003998 <HAL_UART_Receive_IT+0xf8>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <HAL_UART_Receive_IT+0x120>)
 8003996:	661a      	str	r2, [r3, #96]	; 0x60
    }

    //__HAL_UNLOCK(huart);

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80039a6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_UART_Receive_IT+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	08004589 	.word	0x08004589
 80039c0:	080044df 	.word	0x080044df

080039c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d113      	bne.n	8003a1c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00e      	beq.n	8003a1c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d009      	beq.n	8003a1c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8114 	beq.w	8003c3a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
      }
      return;
 8003a1a:	e10e      	b.n	8003c3a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80d6 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d105      	bne.n	8003a3a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4b86      	ldr	r3, [pc, #536]	; (8003c4c <HAL_UART_IRQHandler+0x288>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80cb 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00e      	beq.n	8003a62 <HAL_UART_IRQHandler+0x9e>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2201      	movs	r2, #1
 8003a54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00e      	beq.n	8003a8a <HAL_UART_IRQHandler+0xc6>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a82:	f043 0204 	orr.w	r2, r3, #4
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <HAL_UART_IRQHandler+0xee>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aaa:	f043 0202 	orr.w	r2, r3, #2
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d104      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003adc:	f043 0208 	orr.w	r2, r3, #8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00f      	beq.n	8003b0e <HAL_UART_IRQHandler+0x14a>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b06:	f043 0220 	orr.w	r2, r3, #32
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8093 	beq.w	8003c3e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00c      	beq.n	8003b3c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b40:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d004      	beq.n	8003b5a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d031      	beq.n	8003bbe <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fc70 	bl	8004440 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d123      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b7c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d013      	beq.n	8003bae <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8a:	4a31      	ldr	r2, [pc, #196]	; (8003c50 <HAL_UART_IRQHandler+0x28c>)
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd fc63 	bl	800145e <HAL_DMA_Abort_IT>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	e00e      	b.n	8003bcc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f850 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	e00a      	b.n	8003bcc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f84c 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	e006      	b.n	8003bcc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f848 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003bca:	e038      	b.n	8003c3e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	bf00      	nop
    return;
 8003bce:	e036      	b.n	8003c3e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00d      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x232>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fd1f 	bl	8004632 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bf4:	e026      	b.n	8003c44 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d017      	beq.n	8003c42 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	4798      	blx	r3
    }
    return;
 8003c1a:	e012      	b.n	8003c42 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00e      	beq.n	8003c44 <HAL_UART_IRQHandler+0x280>
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fc3b 	bl	80044ac <UART_EndTransmit_IT>
    return;
 8003c36:	bf00      	nop
 8003c38:	e004      	b.n	8003c44 <HAL_UART_IRQHandler+0x280>
      return;
 8003c3a:	bf00      	nop
 8003c3c:	e002      	b.n	8003c44 <HAL_UART_IRQHandler+0x280>
    return;
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <HAL_UART_IRQHandler+0x280>
    return;
 8003c42:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	04000120 	.word	0x04000120
 8003c50:	08004481 	.word	0x08004481

08003c54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c68:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003c6c:	b088      	sub	sp, #32
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4bac      	ldr	r3, [pc, #688]	; (8003f48 <UART_SetConfig+0x2e0>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	69f9      	ldr	r1, [r7, #28]
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4aa2      	ldr	r2, [pc, #648]	; (8003f4c <UART_SetConfig+0x2e4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a99      	ldr	r2, [pc, #612]	; (8003f50 <UART_SetConfig+0x2e8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d121      	bne.n	8003d34 <UART_SetConfig+0xcc>
 8003cf0:	4b98      	ldr	r3, [pc, #608]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d816      	bhi.n	8003d2c <UART_SetConfig+0xc4>
 8003cfe:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <UART_SetConfig+0x9c>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d21 	.word	0x08003d21
 8003d0c:	08003d1b 	.word	0x08003d1b
 8003d10:	08003d27 	.word	0x08003d27
 8003d14:	2301      	movs	r3, #1
 8003d16:	76fb      	strb	r3, [r7, #27]
 8003d18:	e0e8      	b.n	8003eec <UART_SetConfig+0x284>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	76fb      	strb	r3, [r7, #27]
 8003d1e:	e0e5      	b.n	8003eec <UART_SetConfig+0x284>
 8003d20:	2304      	movs	r3, #4
 8003d22:	76fb      	strb	r3, [r7, #27]
 8003d24:	e0e2      	b.n	8003eec <UART_SetConfig+0x284>
 8003d26:	2308      	movs	r3, #8
 8003d28:	76fb      	strb	r3, [r7, #27]
 8003d2a:	e0df      	b.n	8003eec <UART_SetConfig+0x284>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	76fb      	strb	r3, [r7, #27]
 8003d30:	bf00      	nop
 8003d32:	e0db      	b.n	8003eec <UART_SetConfig+0x284>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a87      	ldr	r2, [pc, #540]	; (8003f58 <UART_SetConfig+0x2f0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d134      	bne.n	8003da8 <UART_SetConfig+0x140>
 8003d3e:	4b85      	ldr	r3, [pc, #532]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b0c      	cmp	r3, #12
 8003d4a:	d829      	bhi.n	8003da0 <UART_SetConfig+0x138>
 8003d4c:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <UART_SetConfig+0xec>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003d89 	.word	0x08003d89
 8003d58:	08003da1 	.word	0x08003da1
 8003d5c:	08003da1 	.word	0x08003da1
 8003d60:	08003da1 	.word	0x08003da1
 8003d64:	08003d95 	.word	0x08003d95
 8003d68:	08003da1 	.word	0x08003da1
 8003d6c:	08003da1 	.word	0x08003da1
 8003d70:	08003da1 	.word	0x08003da1
 8003d74:	08003d8f 	.word	0x08003d8f
 8003d78:	08003da1 	.word	0x08003da1
 8003d7c:	08003da1 	.word	0x08003da1
 8003d80:	08003da1 	.word	0x08003da1
 8003d84:	08003d9b 	.word	0x08003d9b
 8003d88:	2300      	movs	r3, #0
 8003d8a:	76fb      	strb	r3, [r7, #27]
 8003d8c:	e0ae      	b.n	8003eec <UART_SetConfig+0x284>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	76fb      	strb	r3, [r7, #27]
 8003d92:	e0ab      	b.n	8003eec <UART_SetConfig+0x284>
 8003d94:	2304      	movs	r3, #4
 8003d96:	76fb      	strb	r3, [r7, #27]
 8003d98:	e0a8      	b.n	8003eec <UART_SetConfig+0x284>
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	76fb      	strb	r3, [r7, #27]
 8003d9e:	e0a5      	b.n	8003eec <UART_SetConfig+0x284>
 8003da0:	2310      	movs	r3, #16
 8003da2:	76fb      	strb	r3, [r7, #27]
 8003da4:	bf00      	nop
 8003da6:	e0a1      	b.n	8003eec <UART_SetConfig+0x284>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a6b      	ldr	r2, [pc, #428]	; (8003f5c <UART_SetConfig+0x2f4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d120      	bne.n	8003df4 <UART_SetConfig+0x18c>
 8003db2:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d00f      	beq.n	8003de0 <UART_SetConfig+0x178>
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d802      	bhi.n	8003dca <UART_SetConfig+0x162>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <UART_SetConfig+0x16c>
 8003dc8:	e010      	b.n	8003dec <UART_SetConfig+0x184>
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d005      	beq.n	8003dda <UART_SetConfig+0x172>
 8003dce:	2b30      	cmp	r3, #48	; 0x30
 8003dd0:	d009      	beq.n	8003de6 <UART_SetConfig+0x17e>
 8003dd2:	e00b      	b.n	8003dec <UART_SetConfig+0x184>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	76fb      	strb	r3, [r7, #27]
 8003dd8:	e088      	b.n	8003eec <UART_SetConfig+0x284>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	76fb      	strb	r3, [r7, #27]
 8003dde:	e085      	b.n	8003eec <UART_SetConfig+0x284>
 8003de0:	2304      	movs	r3, #4
 8003de2:	76fb      	strb	r3, [r7, #27]
 8003de4:	e082      	b.n	8003eec <UART_SetConfig+0x284>
 8003de6:	2308      	movs	r3, #8
 8003de8:	76fb      	strb	r3, [r7, #27]
 8003dea:	e07f      	b.n	8003eec <UART_SetConfig+0x284>
 8003dec:	2310      	movs	r3, #16
 8003dee:	76fb      	strb	r3, [r7, #27]
 8003df0:	bf00      	nop
 8003df2:	e07b      	b.n	8003eec <UART_SetConfig+0x284>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a59      	ldr	r2, [pc, #356]	; (8003f60 <UART_SetConfig+0x2f8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d120      	bne.n	8003e40 <UART_SetConfig+0x1d8>
 8003dfe:	4b55      	ldr	r3, [pc, #340]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d00f      	beq.n	8003e2c <UART_SetConfig+0x1c4>
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d802      	bhi.n	8003e16 <UART_SetConfig+0x1ae>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <UART_SetConfig+0x1b8>
 8003e14:	e010      	b.n	8003e38 <UART_SetConfig+0x1d0>
 8003e16:	2b80      	cmp	r3, #128	; 0x80
 8003e18:	d005      	beq.n	8003e26 <UART_SetConfig+0x1be>
 8003e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e1c:	d009      	beq.n	8003e32 <UART_SetConfig+0x1ca>
 8003e1e:	e00b      	b.n	8003e38 <UART_SetConfig+0x1d0>
 8003e20:	2300      	movs	r3, #0
 8003e22:	76fb      	strb	r3, [r7, #27]
 8003e24:	e062      	b.n	8003eec <UART_SetConfig+0x284>
 8003e26:	2302      	movs	r3, #2
 8003e28:	76fb      	strb	r3, [r7, #27]
 8003e2a:	e05f      	b.n	8003eec <UART_SetConfig+0x284>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e05c      	b.n	8003eec <UART_SetConfig+0x284>
 8003e32:	2308      	movs	r3, #8
 8003e34:	76fb      	strb	r3, [r7, #27]
 8003e36:	e059      	b.n	8003eec <UART_SetConfig+0x284>
 8003e38:	2310      	movs	r3, #16
 8003e3a:	76fb      	strb	r3, [r7, #27]
 8003e3c:	bf00      	nop
 8003e3e:	e055      	b.n	8003eec <UART_SetConfig+0x284>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a47      	ldr	r2, [pc, #284]	; (8003f64 <UART_SetConfig+0x2fc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d124      	bne.n	8003e94 <UART_SetConfig+0x22c>
 8003e4a:	4b42      	ldr	r3, [pc, #264]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e58:	d012      	beq.n	8003e80 <UART_SetConfig+0x218>
 8003e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5e:	d802      	bhi.n	8003e66 <UART_SetConfig+0x1fe>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <UART_SetConfig+0x20c>
 8003e64:	e012      	b.n	8003e8c <UART_SetConfig+0x224>
 8003e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e6a:	d006      	beq.n	8003e7a <UART_SetConfig+0x212>
 8003e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e70:	d009      	beq.n	8003e86 <UART_SetConfig+0x21e>
 8003e72:	e00b      	b.n	8003e8c <UART_SetConfig+0x224>
 8003e74:	2300      	movs	r3, #0
 8003e76:	76fb      	strb	r3, [r7, #27]
 8003e78:	e038      	b.n	8003eec <UART_SetConfig+0x284>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	76fb      	strb	r3, [r7, #27]
 8003e7e:	e035      	b.n	8003eec <UART_SetConfig+0x284>
 8003e80:	2304      	movs	r3, #4
 8003e82:	76fb      	strb	r3, [r7, #27]
 8003e84:	e032      	b.n	8003eec <UART_SetConfig+0x284>
 8003e86:	2308      	movs	r3, #8
 8003e88:	76fb      	strb	r3, [r7, #27]
 8003e8a:	e02f      	b.n	8003eec <UART_SetConfig+0x284>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	76fb      	strb	r3, [r7, #27]
 8003e90:	bf00      	nop
 8003e92:	e02b      	b.n	8003eec <UART_SetConfig+0x284>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2c      	ldr	r2, [pc, #176]	; (8003f4c <UART_SetConfig+0x2e4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d124      	bne.n	8003ee8 <UART_SetConfig+0x280>
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eac:	d012      	beq.n	8003ed4 <UART_SetConfig+0x26c>
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d802      	bhi.n	8003eba <UART_SetConfig+0x252>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d007      	beq.n	8003ec8 <UART_SetConfig+0x260>
 8003eb8:	e012      	b.n	8003ee0 <UART_SetConfig+0x278>
 8003eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ebe:	d006      	beq.n	8003ece <UART_SetConfig+0x266>
 8003ec0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec4:	d009      	beq.n	8003eda <UART_SetConfig+0x272>
 8003ec6:	e00b      	b.n	8003ee0 <UART_SetConfig+0x278>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	76fb      	strb	r3, [r7, #27]
 8003ecc:	e00e      	b.n	8003eec <UART_SetConfig+0x284>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	76fb      	strb	r3, [r7, #27]
 8003ed2:	e00b      	b.n	8003eec <UART_SetConfig+0x284>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	76fb      	strb	r3, [r7, #27]
 8003ed8:	e008      	b.n	8003eec <UART_SetConfig+0x284>
 8003eda:	2308      	movs	r3, #8
 8003edc:	76fb      	strb	r3, [r7, #27]
 8003ede:	e005      	b.n	8003eec <UART_SetConfig+0x284>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	76fb      	strb	r3, [r7, #27]
 8003ee4:	bf00      	nop
 8003ee6:	e001      	b.n	8003eec <UART_SetConfig+0x284>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <UART_SetConfig+0x2e4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	f040 8087 	bne.w	8004006 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ef8:	7efb      	ldrb	r3, [r7, #27]
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d836      	bhi.n	8003f6c <UART_SetConfig+0x304>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0x29c>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f6d 	.word	0x08003f6d
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f6d 	.word	0x08003f6d
 8003f14:	08003f37 	.word	0x08003f37
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	08003f6d 	.word	0x08003f6d
 8003f20:	08003f6d 	.word	0x08003f6d
 8003f24:	08003f3f 	.word	0x08003f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f28:	f7fe fa8e 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8003f2c:	6178      	str	r0, [r7, #20]
        break;
 8003f2e:	e022      	b.n	8003f76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f30:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <UART_SetConfig+0x300>)
 8003f32:	617b      	str	r3, [r7, #20]
        break;
 8003f34:	e01f      	b.n	8003f76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f36:	f7fe f9f1 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003f3a:	6178      	str	r0, [r7, #20]
        break;
 8003f3c:	e01b      	b.n	8003f76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f42:	617b      	str	r3, [r7, #20]
        break;
 8003f44:	e017      	b.n	8003f76 <UART_SetConfig+0x30e>
 8003f46:	bf00      	nop
 8003f48:	efff69f3 	.word	0xefff69f3
 8003f4c:	40008000 	.word	0x40008000
 8003f50:	40013800 	.word	0x40013800
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40004400 	.word	0x40004400
 8003f5c:	40004800 	.word	0x40004800
 8003f60:	40004c00 	.word	0x40004c00
 8003f64:	40005000 	.word	0x40005000
 8003f68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	76bb      	strb	r3, [r7, #26]
        break;
 8003f74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80f1 	beq.w	8004160 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d305      	bcc.n	8003f9a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d902      	bls.n	8003fa0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	76bb      	strb	r3, [r7, #26]
 8003f9e:	e0df      	b.n	8004160 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	f04f 0400 	mov.w	r4, #0
 8003fb0:	0214      	lsls	r4, r2, #8
 8003fb2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003fb6:	020b      	lsls	r3, r1, #8
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6852      	ldr	r2, [r2, #4]
 8003fbc:	0852      	lsrs	r2, r2, #1
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	eb13 0b01 	adds.w	fp, r3, r1
 8003fc8:	eb44 0c02 	adc.w	ip, r4, r2
 8003fcc:	4658      	mov	r0, fp
 8003fce:	4661      	mov	r1, ip
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f04f 0400 	mov.w	r4, #0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4623      	mov	r3, r4
 8003fdc:	f7fc f948 	bl	8000270 <__aeabi_uldivmod>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	460c      	mov	r4, r1
 8003fe4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fec:	d308      	bcc.n	8004000 <UART_SetConfig+0x398>
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff4:	d204      	bcs.n	8004000 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	e0af      	b.n	8004160 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	76bb      	strb	r3, [r7, #26]
 8004004:	e0ac      	b.n	8004160 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400e:	d15b      	bne.n	80040c8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004010:	7efb      	ldrb	r3, [r7, #27]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d827      	bhi.n	8004066 <UART_SetConfig+0x3fe>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x3b4>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	08004041 	.word	0x08004041
 8004020:	08004049 	.word	0x08004049
 8004024:	08004051 	.word	0x08004051
 8004028:	08004067 	.word	0x08004067
 800402c:	08004057 	.word	0x08004057
 8004030:	08004067 	.word	0x08004067
 8004034:	08004067 	.word	0x08004067
 8004038:	08004067 	.word	0x08004067
 800403c:	0800405f 	.word	0x0800405f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004040:	f7fe fa02 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8004044:	6178      	str	r0, [r7, #20]
        break;
 8004046:	e013      	b.n	8004070 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004048:	f7fe fa14 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 800404c:	6178      	str	r0, [r7, #20]
        break;
 800404e:	e00f      	b.n	8004070 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004050:	4b49      	ldr	r3, [pc, #292]	; (8004178 <UART_SetConfig+0x510>)
 8004052:	617b      	str	r3, [r7, #20]
        break;
 8004054:	e00c      	b.n	8004070 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004056:	f7fe f961 	bl	800231c <HAL_RCC_GetSysClockFreq>
 800405a:	6178      	str	r0, [r7, #20]
        break;
 800405c:	e008      	b.n	8004070 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004062:	617b      	str	r3, [r7, #20]
        break;
 8004064:	e004      	b.n	8004070 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	76bb      	strb	r3, [r7, #26]
        break;
 800406e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d074      	beq.n	8004160 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	005a      	lsls	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	441a      	add	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	fbb2 f3f3 	udiv	r3, r2, r3
 800408a:	b29b      	uxth	r3, r3
 800408c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b0f      	cmp	r3, #15
 8004092:	d916      	bls.n	80040c2 <UART_SetConfig+0x45a>
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409a:	d212      	bcs.n	80040c2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f023 030f 	bic.w	r3, r3, #15
 80040a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	89fb      	ldrh	r3, [r7, #14]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	89fa      	ldrh	r2, [r7, #14]
 80040be:	60da      	str	r2, [r3, #12]
 80040c0:	e04e      	b.n	8004160 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	76bb      	strb	r3, [r7, #26]
 80040c6:	e04b      	b.n	8004160 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040c8:	7efb      	ldrb	r3, [r7, #27]
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d827      	bhi.n	800411e <UART_SetConfig+0x4b6>
 80040ce:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <UART_SetConfig+0x46c>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	08004101 	.word	0x08004101
 80040dc:	08004109 	.word	0x08004109
 80040e0:	0800411f 	.word	0x0800411f
 80040e4:	0800410f 	.word	0x0800410f
 80040e8:	0800411f 	.word	0x0800411f
 80040ec:	0800411f 	.word	0x0800411f
 80040f0:	0800411f 	.word	0x0800411f
 80040f4:	08004117 	.word	0x08004117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7fe f9a6 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 80040fc:	6178      	str	r0, [r7, #20]
        break;
 80040fe:	e013      	b.n	8004128 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004100:	f7fe f9b8 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8004104:	6178      	str	r0, [r7, #20]
        break;
 8004106:	e00f      	b.n	8004128 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <UART_SetConfig+0x510>)
 800410a:	617b      	str	r3, [r7, #20]
        break;
 800410c:	e00c      	b.n	8004128 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410e:	f7fe f905 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8004112:	6178      	str	r0, [r7, #20]
        break;
 8004114:	e008      	b.n	8004128 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800411a:	617b      	str	r3, [r7, #20]
        break;
 800411c:	e004      	b.n	8004128 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	76bb      	strb	r3, [r7, #26]
        break;
 8004126:	bf00      	nop
    }

    if (pclk != 0U)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d018      	beq.n	8004160 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	085a      	lsrs	r2, r3, #1
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	441a      	add	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	b29b      	uxth	r3, r3
 8004142:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b0f      	cmp	r3, #15
 8004148:	d908      	bls.n	800415c <UART_SetConfig+0x4f4>
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004150:	d204      	bcs.n	800415c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	e001      	b.n	8004160 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800416c:	7ebb      	ldrb	r3, [r7, #26]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004178:	00f42400 	.word	0x00f42400

0800417c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01a      	beq.n	8004292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427a:	d10a      	bne.n	8004292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
  }
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80042ce:	f7fc ffa9 	bl	8001224 <HAL_GetTick>
 80042d2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d10e      	bne.n	8004300 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f82a 	bl	800434a <UART_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e020      	b.n	8004342 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b04      	cmp	r3, #4
 800430c:	d10e      	bne.n	800432c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800430e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f814 	bl	800434a <UART_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e00a      	b.n	8004342 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	4613      	mov	r3, r2
 8004358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435a:	e05d      	b.n	8004418 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004362:	d059      	beq.n	8004418 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fc ff5e 	bl	8001224 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <UART_WaitOnFlagUntilTimeout+0x30>
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11b      	bne.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004388:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e042      	b.n	8004438 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d02b      	beq.n	8004418 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ce:	d123      	bne.n	8004418 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043e8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e00f      	b.n	8004438 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4013      	ands	r3, r2
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	429a      	cmp	r2, r3
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	429a      	cmp	r2, r3
 8004434:	d092      	beq.n	800435c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004456:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7ff fbd8 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7fc f86f 	bl	80005b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044f2:	2b22      	cmp	r3, #34	; 0x22
 80044f4:	d13a      	bne.n	800456c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044fc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80044fe:	89bb      	ldrh	r3, [r7, #12]
 8004500:	b2d9      	uxtb	r1, r3
 8004502:	89fb      	ldrh	r3, [r7, #14]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450a:	400a      	ands	r2, r1
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d123      	bne.n	8004580 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004546:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0201 	bic.w	r2, r2, #1
 8004556:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7fc f803 	bl	8000570 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800456a:	e009      	b.n	8004580 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	8b1b      	ldrh	r3, [r3, #24]
 8004572:	b29a      	uxth	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0208 	orr.w	r2, r2, #8
 800457c:	b292      	uxth	r2, r2
 800457e:	831a      	strh	r2, [r3, #24]
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004596:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459c:	2b22      	cmp	r3, #34	; 0x22
 800459e:	d13a      	bne.n	8004616 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045a6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80045ae:	89ba      	ldrh	r2, [r7, #12]
 80045b0:	89fb      	ldrh	r3, [r7, #14]
 80045b2:	4013      	ands	r3, r2
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	1c9a      	adds	r2, r3, #2
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d123      	bne.n	800462a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fb ffae 	bl	8000570 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004614:	e009      	b.n	800462a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	8b1b      	ldrh	r3, [r3, #24]
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0208 	orr.w	r2, r2, #8
 8004626:	b292      	uxth	r2, r2
 8004628:	831a      	strh	r2, [r3, #24]
}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <__assert_func>:
 8004648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800464a:	461c      	mov	r4, r3
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <__assert_func+0x2c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4605      	mov	r5, r0
 8004652:	68d8      	ldr	r0, [r3, #12]
 8004654:	b152      	cbz	r2, 800466c <__assert_func+0x24>
 8004656:	4b08      	ldr	r3, [pc, #32]	; (8004678 <__assert_func+0x30>)
 8004658:	9100      	str	r1, [sp, #0]
 800465a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800465e:	4907      	ldr	r1, [pc, #28]	; (800467c <__assert_func+0x34>)
 8004660:	462b      	mov	r3, r5
 8004662:	4622      	mov	r2, r4
 8004664:	f000 f814 	bl	8004690 <fiprintf>
 8004668:	f000 fc98 	bl	8004f9c <abort>
 800466c:	4b04      	ldr	r3, [pc, #16]	; (8004680 <__assert_func+0x38>)
 800466e:	461a      	mov	r2, r3
 8004670:	e7f2      	b.n	8004658 <__assert_func+0x10>
 8004672:	bf00      	nop
 8004674:	2000000c 	.word	0x2000000c
 8004678:	080056b1 	.word	0x080056b1
 800467c:	080056be 	.word	0x080056be
 8004680:	080056ec 	.word	0x080056ec

08004684 <__errno>:
 8004684:	4b01      	ldr	r3, [pc, #4]	; (800468c <__errno+0x8>)
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	2000000c 	.word	0x2000000c

08004690 <fiprintf>:
 8004690:	b40e      	push	{r1, r2, r3}
 8004692:	b503      	push	{r0, r1, lr}
 8004694:	4601      	mov	r1, r0
 8004696:	ab03      	add	r3, sp, #12
 8004698:	4805      	ldr	r0, [pc, #20]	; (80046b0 <fiprintf+0x20>)
 800469a:	f853 2b04 	ldr.w	r2, [r3], #4
 800469e:	6800      	ldr	r0, [r0, #0]
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	f000 f90d 	bl	80048c0 <_vfiprintf_r>
 80046a6:	b002      	add	sp, #8
 80046a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046ac:	b003      	add	sp, #12
 80046ae:	4770      	bx	lr
 80046b0:	2000000c 	.word	0x2000000c

080046b4 <__libc_init_array>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	4e0d      	ldr	r6, [pc, #52]	; (80046ec <__libc_init_array+0x38>)
 80046b8:	4c0d      	ldr	r4, [pc, #52]	; (80046f0 <__libc_init_array+0x3c>)
 80046ba:	1ba4      	subs	r4, r4, r6
 80046bc:	10a4      	asrs	r4, r4, #2
 80046be:	2500      	movs	r5, #0
 80046c0:	42a5      	cmp	r5, r4
 80046c2:	d109      	bne.n	80046d8 <__libc_init_array+0x24>
 80046c4:	4e0b      	ldr	r6, [pc, #44]	; (80046f4 <__libc_init_array+0x40>)
 80046c6:	4c0c      	ldr	r4, [pc, #48]	; (80046f8 <__libc_init_array+0x44>)
 80046c8:	f000 ff40 	bl	800554c <_init>
 80046cc:	1ba4      	subs	r4, r4, r6
 80046ce:	10a4      	asrs	r4, r4, #2
 80046d0:	2500      	movs	r5, #0
 80046d2:	42a5      	cmp	r5, r4
 80046d4:	d105      	bne.n	80046e2 <__libc_init_array+0x2e>
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046dc:	4798      	blx	r3
 80046de:	3501      	adds	r5, #1
 80046e0:	e7ee      	b.n	80046c0 <__libc_init_array+0xc>
 80046e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046e6:	4798      	blx	r3
 80046e8:	3501      	adds	r5, #1
 80046ea:	e7f2      	b.n	80046d2 <__libc_init_array+0x1e>
 80046ec:	08005790 	.word	0x08005790
 80046f0:	08005790 	.word	0x08005790
 80046f4:	08005790 	.word	0x08005790
 80046f8:	08005794 	.word	0x08005794

080046fc <malloc>:
 80046fc:	4b02      	ldr	r3, [pc, #8]	; (8004708 <malloc+0xc>)
 80046fe:	4601      	mov	r1, r0
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	f000 b859 	b.w	80047b8 <_malloc_r>
 8004706:	bf00      	nop
 8004708:	2000000c 	.word	0x2000000c

0800470c <memset>:
 800470c:	4402      	add	r2, r0
 800470e:	4603      	mov	r3, r0
 8004710:	4293      	cmp	r3, r2
 8004712:	d100      	bne.n	8004716 <memset+0xa>
 8004714:	4770      	bx	lr
 8004716:	f803 1b01 	strb.w	r1, [r3], #1
 800471a:	e7f9      	b.n	8004710 <memset+0x4>

0800471c <_free_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4605      	mov	r5, r0
 8004720:	2900      	cmp	r1, #0
 8004722:	d045      	beq.n	80047b0 <_free_r+0x94>
 8004724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004728:	1f0c      	subs	r4, r1, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	bfb8      	it	lt
 800472e:	18e4      	addlt	r4, r4, r3
 8004730:	f000 fe1a 	bl	8005368 <__malloc_lock>
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <_free_r+0x98>)
 8004736:	6813      	ldr	r3, [r2, #0]
 8004738:	4610      	mov	r0, r2
 800473a:	b933      	cbnz	r3, 800474a <_free_r+0x2e>
 800473c:	6063      	str	r3, [r4, #4]
 800473e:	6014      	str	r4, [r2, #0]
 8004740:	4628      	mov	r0, r5
 8004742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004746:	f000 be10 	b.w	800536a <__malloc_unlock>
 800474a:	42a3      	cmp	r3, r4
 800474c:	d90c      	bls.n	8004768 <_free_r+0x4c>
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	1862      	adds	r2, r4, r1
 8004752:	4293      	cmp	r3, r2
 8004754:	bf04      	itt	eq
 8004756:	681a      	ldreq	r2, [r3, #0]
 8004758:	685b      	ldreq	r3, [r3, #4]
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	bf04      	itt	eq
 800475e:	1852      	addeq	r2, r2, r1
 8004760:	6022      	streq	r2, [r4, #0]
 8004762:	6004      	str	r4, [r0, #0]
 8004764:	e7ec      	b.n	8004740 <_free_r+0x24>
 8004766:	4613      	mov	r3, r2
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	b10a      	cbz	r2, 8004770 <_free_r+0x54>
 800476c:	42a2      	cmp	r2, r4
 800476e:	d9fa      	bls.n	8004766 <_free_r+0x4a>
 8004770:	6819      	ldr	r1, [r3, #0]
 8004772:	1858      	adds	r0, r3, r1
 8004774:	42a0      	cmp	r0, r4
 8004776:	d10b      	bne.n	8004790 <_free_r+0x74>
 8004778:	6820      	ldr	r0, [r4, #0]
 800477a:	4401      	add	r1, r0
 800477c:	1858      	adds	r0, r3, r1
 800477e:	4282      	cmp	r2, r0
 8004780:	6019      	str	r1, [r3, #0]
 8004782:	d1dd      	bne.n	8004740 <_free_r+0x24>
 8004784:	6810      	ldr	r0, [r2, #0]
 8004786:	6852      	ldr	r2, [r2, #4]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	4401      	add	r1, r0
 800478c:	6019      	str	r1, [r3, #0]
 800478e:	e7d7      	b.n	8004740 <_free_r+0x24>
 8004790:	d902      	bls.n	8004798 <_free_r+0x7c>
 8004792:	230c      	movs	r3, #12
 8004794:	602b      	str	r3, [r5, #0]
 8004796:	e7d3      	b.n	8004740 <_free_r+0x24>
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	1821      	adds	r1, r4, r0
 800479c:	428a      	cmp	r2, r1
 800479e:	bf04      	itt	eq
 80047a0:	6811      	ldreq	r1, [r2, #0]
 80047a2:	6852      	ldreq	r2, [r2, #4]
 80047a4:	6062      	str	r2, [r4, #4]
 80047a6:	bf04      	itt	eq
 80047a8:	1809      	addeq	r1, r1, r0
 80047aa:	6021      	streq	r1, [r4, #0]
 80047ac:	605c      	str	r4, [r3, #4]
 80047ae:	e7c7      	b.n	8004740 <_free_r+0x24>
 80047b0:	bd38      	pop	{r3, r4, r5, pc}
 80047b2:	bf00      	nop
 80047b4:	20000094 	.word	0x20000094

080047b8 <_malloc_r>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	1ccd      	adds	r5, r1, #3
 80047bc:	f025 0503 	bic.w	r5, r5, #3
 80047c0:	3508      	adds	r5, #8
 80047c2:	2d0c      	cmp	r5, #12
 80047c4:	bf38      	it	cc
 80047c6:	250c      	movcc	r5, #12
 80047c8:	2d00      	cmp	r5, #0
 80047ca:	4606      	mov	r6, r0
 80047cc:	db01      	blt.n	80047d2 <_malloc_r+0x1a>
 80047ce:	42a9      	cmp	r1, r5
 80047d0:	d903      	bls.n	80047da <_malloc_r+0x22>
 80047d2:	230c      	movs	r3, #12
 80047d4:	6033      	str	r3, [r6, #0]
 80047d6:	2000      	movs	r0, #0
 80047d8:	bd70      	pop	{r4, r5, r6, pc}
 80047da:	f000 fdc5 	bl	8005368 <__malloc_lock>
 80047de:	4a21      	ldr	r2, [pc, #132]	; (8004864 <_malloc_r+0xac>)
 80047e0:	6814      	ldr	r4, [r2, #0]
 80047e2:	4621      	mov	r1, r4
 80047e4:	b991      	cbnz	r1, 800480c <_malloc_r+0x54>
 80047e6:	4c20      	ldr	r4, [pc, #128]	; (8004868 <_malloc_r+0xb0>)
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	b91b      	cbnz	r3, 80047f4 <_malloc_r+0x3c>
 80047ec:	4630      	mov	r0, r6
 80047ee:	f000 fb05 	bl	8004dfc <_sbrk_r>
 80047f2:	6020      	str	r0, [r4, #0]
 80047f4:	4629      	mov	r1, r5
 80047f6:	4630      	mov	r0, r6
 80047f8:	f000 fb00 	bl	8004dfc <_sbrk_r>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d124      	bne.n	800484a <_malloc_r+0x92>
 8004800:	230c      	movs	r3, #12
 8004802:	6033      	str	r3, [r6, #0]
 8004804:	4630      	mov	r0, r6
 8004806:	f000 fdb0 	bl	800536a <__malloc_unlock>
 800480a:	e7e4      	b.n	80047d6 <_malloc_r+0x1e>
 800480c:	680b      	ldr	r3, [r1, #0]
 800480e:	1b5b      	subs	r3, r3, r5
 8004810:	d418      	bmi.n	8004844 <_malloc_r+0x8c>
 8004812:	2b0b      	cmp	r3, #11
 8004814:	d90f      	bls.n	8004836 <_malloc_r+0x7e>
 8004816:	600b      	str	r3, [r1, #0]
 8004818:	50cd      	str	r5, [r1, r3]
 800481a:	18cc      	adds	r4, r1, r3
 800481c:	4630      	mov	r0, r6
 800481e:	f000 fda4 	bl	800536a <__malloc_unlock>
 8004822:	f104 000b 	add.w	r0, r4, #11
 8004826:	1d23      	adds	r3, r4, #4
 8004828:	f020 0007 	bic.w	r0, r0, #7
 800482c:	1ac3      	subs	r3, r0, r3
 800482e:	d0d3      	beq.n	80047d8 <_malloc_r+0x20>
 8004830:	425a      	negs	r2, r3
 8004832:	50e2      	str	r2, [r4, r3]
 8004834:	e7d0      	b.n	80047d8 <_malloc_r+0x20>
 8004836:	428c      	cmp	r4, r1
 8004838:	684b      	ldr	r3, [r1, #4]
 800483a:	bf16      	itet	ne
 800483c:	6063      	strne	r3, [r4, #4]
 800483e:	6013      	streq	r3, [r2, #0]
 8004840:	460c      	movne	r4, r1
 8004842:	e7eb      	b.n	800481c <_malloc_r+0x64>
 8004844:	460c      	mov	r4, r1
 8004846:	6849      	ldr	r1, [r1, #4]
 8004848:	e7cc      	b.n	80047e4 <_malloc_r+0x2c>
 800484a:	1cc4      	adds	r4, r0, #3
 800484c:	f024 0403 	bic.w	r4, r4, #3
 8004850:	42a0      	cmp	r0, r4
 8004852:	d005      	beq.n	8004860 <_malloc_r+0xa8>
 8004854:	1a21      	subs	r1, r4, r0
 8004856:	4630      	mov	r0, r6
 8004858:	f000 fad0 	bl	8004dfc <_sbrk_r>
 800485c:	3001      	adds	r0, #1
 800485e:	d0cf      	beq.n	8004800 <_malloc_r+0x48>
 8004860:	6025      	str	r5, [r4, #0]
 8004862:	e7db      	b.n	800481c <_malloc_r+0x64>
 8004864:	20000094 	.word	0x20000094
 8004868:	20000098 	.word	0x20000098

0800486c <__sfputc_r>:
 800486c:	6893      	ldr	r3, [r2, #8]
 800486e:	3b01      	subs	r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	b410      	push	{r4}
 8004874:	6093      	str	r3, [r2, #8]
 8004876:	da08      	bge.n	800488a <__sfputc_r+0x1e>
 8004878:	6994      	ldr	r4, [r2, #24]
 800487a:	42a3      	cmp	r3, r4
 800487c:	db01      	blt.n	8004882 <__sfputc_r+0x16>
 800487e:	290a      	cmp	r1, #10
 8004880:	d103      	bne.n	800488a <__sfputc_r+0x1e>
 8004882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004886:	f000 bac9 	b.w	8004e1c <__swbuf_r>
 800488a:	6813      	ldr	r3, [r2, #0]
 800488c:	1c58      	adds	r0, r3, #1
 800488e:	6010      	str	r0, [r2, #0]
 8004890:	7019      	strb	r1, [r3, #0]
 8004892:	4608      	mov	r0, r1
 8004894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004898:	4770      	bx	lr

0800489a <__sfputs_r>:
 800489a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489c:	4606      	mov	r6, r0
 800489e:	460f      	mov	r7, r1
 80048a0:	4614      	mov	r4, r2
 80048a2:	18d5      	adds	r5, r2, r3
 80048a4:	42ac      	cmp	r4, r5
 80048a6:	d101      	bne.n	80048ac <__sfputs_r+0x12>
 80048a8:	2000      	movs	r0, #0
 80048aa:	e007      	b.n	80048bc <__sfputs_r+0x22>
 80048ac:	463a      	mov	r2, r7
 80048ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b2:	4630      	mov	r0, r6
 80048b4:	f7ff ffda 	bl	800486c <__sfputc_r>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d1f3      	bne.n	80048a4 <__sfputs_r+0xa>
 80048bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048c0 <_vfiprintf_r>:
 80048c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c4:	460c      	mov	r4, r1
 80048c6:	b09d      	sub	sp, #116	; 0x74
 80048c8:	4617      	mov	r7, r2
 80048ca:	461d      	mov	r5, r3
 80048cc:	4606      	mov	r6, r0
 80048ce:	b118      	cbz	r0, 80048d8 <_vfiprintf_r+0x18>
 80048d0:	6983      	ldr	r3, [r0, #24]
 80048d2:	b90b      	cbnz	r3, 80048d8 <_vfiprintf_r+0x18>
 80048d4:	f000 fc5a 	bl	800518c <__sinit>
 80048d8:	4b7c      	ldr	r3, [pc, #496]	; (8004acc <_vfiprintf_r+0x20c>)
 80048da:	429c      	cmp	r4, r3
 80048dc:	d158      	bne.n	8004990 <_vfiprintf_r+0xd0>
 80048de:	6874      	ldr	r4, [r6, #4]
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	0718      	lsls	r0, r3, #28
 80048e4:	d55e      	bpl.n	80049a4 <_vfiprintf_r+0xe4>
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05b      	beq.n	80049a4 <_vfiprintf_r+0xe4>
 80048ec:	2300      	movs	r3, #0
 80048ee:	9309      	str	r3, [sp, #36]	; 0x24
 80048f0:	2320      	movs	r3, #32
 80048f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048f6:	2330      	movs	r3, #48	; 0x30
 80048f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048fc:	9503      	str	r5, [sp, #12]
 80048fe:	f04f 0b01 	mov.w	fp, #1
 8004902:	46b8      	mov	r8, r7
 8004904:	4645      	mov	r5, r8
 8004906:	f815 3b01 	ldrb.w	r3, [r5], #1
 800490a:	b10b      	cbz	r3, 8004910 <_vfiprintf_r+0x50>
 800490c:	2b25      	cmp	r3, #37	; 0x25
 800490e:	d154      	bne.n	80049ba <_vfiprintf_r+0xfa>
 8004910:	ebb8 0a07 	subs.w	sl, r8, r7
 8004914:	d00b      	beq.n	800492e <_vfiprintf_r+0x6e>
 8004916:	4653      	mov	r3, sl
 8004918:	463a      	mov	r2, r7
 800491a:	4621      	mov	r1, r4
 800491c:	4630      	mov	r0, r6
 800491e:	f7ff ffbc 	bl	800489a <__sfputs_r>
 8004922:	3001      	adds	r0, #1
 8004924:	f000 80c2 	beq.w	8004aac <_vfiprintf_r+0x1ec>
 8004928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800492a:	4453      	add	r3, sl
 800492c:	9309      	str	r3, [sp, #36]	; 0x24
 800492e:	f898 3000 	ldrb.w	r3, [r8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80ba 	beq.w	8004aac <_vfiprintf_r+0x1ec>
 8004938:	2300      	movs	r3, #0
 800493a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800493e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004942:	9304      	str	r3, [sp, #16]
 8004944:	9307      	str	r3, [sp, #28]
 8004946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800494a:	931a      	str	r3, [sp, #104]	; 0x68
 800494c:	46a8      	mov	r8, r5
 800494e:	2205      	movs	r2, #5
 8004950:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004954:	485e      	ldr	r0, [pc, #376]	; (8004ad0 <_vfiprintf_r+0x210>)
 8004956:	f7fb fc3b 	bl	80001d0 <memchr>
 800495a:	9b04      	ldr	r3, [sp, #16]
 800495c:	bb78      	cbnz	r0, 80049be <_vfiprintf_r+0xfe>
 800495e:	06d9      	lsls	r1, r3, #27
 8004960:	bf44      	itt	mi
 8004962:	2220      	movmi	r2, #32
 8004964:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004968:	071a      	lsls	r2, r3, #28
 800496a:	bf44      	itt	mi
 800496c:	222b      	movmi	r2, #43	; 0x2b
 800496e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004972:	782a      	ldrb	r2, [r5, #0]
 8004974:	2a2a      	cmp	r2, #42	; 0x2a
 8004976:	d02a      	beq.n	80049ce <_vfiprintf_r+0x10e>
 8004978:	9a07      	ldr	r2, [sp, #28]
 800497a:	46a8      	mov	r8, r5
 800497c:	2000      	movs	r0, #0
 800497e:	250a      	movs	r5, #10
 8004980:	4641      	mov	r1, r8
 8004982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004986:	3b30      	subs	r3, #48	; 0x30
 8004988:	2b09      	cmp	r3, #9
 800498a:	d969      	bls.n	8004a60 <_vfiprintf_r+0x1a0>
 800498c:	b360      	cbz	r0, 80049e8 <_vfiprintf_r+0x128>
 800498e:	e024      	b.n	80049da <_vfiprintf_r+0x11a>
 8004990:	4b50      	ldr	r3, [pc, #320]	; (8004ad4 <_vfiprintf_r+0x214>)
 8004992:	429c      	cmp	r4, r3
 8004994:	d101      	bne.n	800499a <_vfiprintf_r+0xda>
 8004996:	68b4      	ldr	r4, [r6, #8]
 8004998:	e7a2      	b.n	80048e0 <_vfiprintf_r+0x20>
 800499a:	4b4f      	ldr	r3, [pc, #316]	; (8004ad8 <_vfiprintf_r+0x218>)
 800499c:	429c      	cmp	r4, r3
 800499e:	bf08      	it	eq
 80049a0:	68f4      	ldreq	r4, [r6, #12]
 80049a2:	e79d      	b.n	80048e0 <_vfiprintf_r+0x20>
 80049a4:	4621      	mov	r1, r4
 80049a6:	4630      	mov	r0, r6
 80049a8:	f000 fa8a 	bl	8004ec0 <__swsetup_r>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d09d      	beq.n	80048ec <_vfiprintf_r+0x2c>
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049b4:	b01d      	add	sp, #116	; 0x74
 80049b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ba:	46a8      	mov	r8, r5
 80049bc:	e7a2      	b.n	8004904 <_vfiprintf_r+0x44>
 80049be:	4a44      	ldr	r2, [pc, #272]	; (8004ad0 <_vfiprintf_r+0x210>)
 80049c0:	1a80      	subs	r0, r0, r2
 80049c2:	fa0b f000 	lsl.w	r0, fp, r0
 80049c6:	4318      	orrs	r0, r3
 80049c8:	9004      	str	r0, [sp, #16]
 80049ca:	4645      	mov	r5, r8
 80049cc:	e7be      	b.n	800494c <_vfiprintf_r+0x8c>
 80049ce:	9a03      	ldr	r2, [sp, #12]
 80049d0:	1d11      	adds	r1, r2, #4
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	9103      	str	r1, [sp, #12]
 80049d6:	2a00      	cmp	r2, #0
 80049d8:	db01      	blt.n	80049de <_vfiprintf_r+0x11e>
 80049da:	9207      	str	r2, [sp, #28]
 80049dc:	e004      	b.n	80049e8 <_vfiprintf_r+0x128>
 80049de:	4252      	negs	r2, r2
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	9207      	str	r2, [sp, #28]
 80049e6:	9304      	str	r3, [sp, #16]
 80049e8:	f898 3000 	ldrb.w	r3, [r8]
 80049ec:	2b2e      	cmp	r3, #46	; 0x2e
 80049ee:	d10e      	bne.n	8004a0e <_vfiprintf_r+0x14e>
 80049f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80049f4:	2b2a      	cmp	r3, #42	; 0x2a
 80049f6:	d138      	bne.n	8004a6a <_vfiprintf_r+0x1aa>
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	1d1a      	adds	r2, r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	9203      	str	r2, [sp, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bfb8      	it	lt
 8004a04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a08:	f108 0802 	add.w	r8, r8, #2
 8004a0c:	9305      	str	r3, [sp, #20]
 8004a0e:	4d33      	ldr	r5, [pc, #204]	; (8004adc <_vfiprintf_r+0x21c>)
 8004a10:	f898 1000 	ldrb.w	r1, [r8]
 8004a14:	2203      	movs	r2, #3
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7fb fbda 	bl	80001d0 <memchr>
 8004a1c:	b140      	cbz	r0, 8004a30 <_vfiprintf_r+0x170>
 8004a1e:	2340      	movs	r3, #64	; 0x40
 8004a20:	1b40      	subs	r0, r0, r5
 8004a22:	fa03 f000 	lsl.w	r0, r3, r0
 8004a26:	9b04      	ldr	r3, [sp, #16]
 8004a28:	4303      	orrs	r3, r0
 8004a2a:	f108 0801 	add.w	r8, r8, #1
 8004a2e:	9304      	str	r3, [sp, #16]
 8004a30:	f898 1000 	ldrb.w	r1, [r8]
 8004a34:	482a      	ldr	r0, [pc, #168]	; (8004ae0 <_vfiprintf_r+0x220>)
 8004a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a3a:	2206      	movs	r2, #6
 8004a3c:	f108 0701 	add.w	r7, r8, #1
 8004a40:	f7fb fbc6 	bl	80001d0 <memchr>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d037      	beq.n	8004ab8 <_vfiprintf_r+0x1f8>
 8004a48:	4b26      	ldr	r3, [pc, #152]	; (8004ae4 <_vfiprintf_r+0x224>)
 8004a4a:	bb1b      	cbnz	r3, 8004a94 <_vfiprintf_r+0x1d4>
 8004a4c:	9b03      	ldr	r3, [sp, #12]
 8004a4e:	3307      	adds	r3, #7
 8004a50:	f023 0307 	bic.w	r3, r3, #7
 8004a54:	3308      	adds	r3, #8
 8004a56:	9303      	str	r3, [sp, #12]
 8004a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a5a:	444b      	add	r3, r9
 8004a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a5e:	e750      	b.n	8004902 <_vfiprintf_r+0x42>
 8004a60:	fb05 3202 	mla	r2, r5, r2, r3
 8004a64:	2001      	movs	r0, #1
 8004a66:	4688      	mov	r8, r1
 8004a68:	e78a      	b.n	8004980 <_vfiprintf_r+0xc0>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f108 0801 	add.w	r8, r8, #1
 8004a70:	9305      	str	r3, [sp, #20]
 8004a72:	4619      	mov	r1, r3
 8004a74:	250a      	movs	r5, #10
 8004a76:	4640      	mov	r0, r8
 8004a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a7c:	3a30      	subs	r2, #48	; 0x30
 8004a7e:	2a09      	cmp	r2, #9
 8004a80:	d903      	bls.n	8004a8a <_vfiprintf_r+0x1ca>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0c3      	beq.n	8004a0e <_vfiprintf_r+0x14e>
 8004a86:	9105      	str	r1, [sp, #20]
 8004a88:	e7c1      	b.n	8004a0e <_vfiprintf_r+0x14e>
 8004a8a:	fb05 2101 	mla	r1, r5, r1, r2
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4680      	mov	r8, r0
 8004a92:	e7f0      	b.n	8004a76 <_vfiprintf_r+0x1b6>
 8004a94:	ab03      	add	r3, sp, #12
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	4622      	mov	r2, r4
 8004a9a:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <_vfiprintf_r+0x228>)
 8004a9c:	a904      	add	r1, sp, #16
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f3af 8000 	nop.w
 8004aa4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004aa8:	4681      	mov	r9, r0
 8004aaa:	d1d5      	bne.n	8004a58 <_vfiprintf_r+0x198>
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	065b      	lsls	r3, r3, #25
 8004ab0:	f53f af7e 	bmi.w	80049b0 <_vfiprintf_r+0xf0>
 8004ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ab6:	e77d      	b.n	80049b4 <_vfiprintf_r+0xf4>
 8004ab8:	ab03      	add	r3, sp, #12
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4622      	mov	r2, r4
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <_vfiprintf_r+0x228>)
 8004ac0:	a904      	add	r1, sp, #16
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f000 f888 	bl	8004bd8 <_printf_i>
 8004ac8:	e7ec      	b.n	8004aa4 <_vfiprintf_r+0x1e4>
 8004aca:	bf00      	nop
 8004acc:	08005748 	.word	0x08005748
 8004ad0:	080056f4 	.word	0x080056f4
 8004ad4:	08005768 	.word	0x08005768
 8004ad8:	08005728 	.word	0x08005728
 8004adc:	080056fa 	.word	0x080056fa
 8004ae0:	080056fe 	.word	0x080056fe
 8004ae4:	00000000 	.word	0x00000000
 8004ae8:	0800489b 	.word	0x0800489b

08004aec <_printf_common>:
 8004aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	4691      	mov	r9, r2
 8004af2:	461f      	mov	r7, r3
 8004af4:	688a      	ldr	r2, [r1, #8]
 8004af6:	690b      	ldr	r3, [r1, #16]
 8004af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004afc:	4293      	cmp	r3, r2
 8004afe:	bfb8      	it	lt
 8004b00:	4613      	movlt	r3, r2
 8004b02:	f8c9 3000 	str.w	r3, [r9]
 8004b06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	b112      	cbz	r2, 8004b16 <_printf_common+0x2a>
 8004b10:	3301      	adds	r3, #1
 8004b12:	f8c9 3000 	str.w	r3, [r9]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	0699      	lsls	r1, r3, #26
 8004b1a:	bf42      	ittt	mi
 8004b1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b20:	3302      	addmi	r3, #2
 8004b22:	f8c9 3000 	strmi.w	r3, [r9]
 8004b26:	6825      	ldr	r5, [r4, #0]
 8004b28:	f015 0506 	ands.w	r5, r5, #6
 8004b2c:	d107      	bne.n	8004b3e <_printf_common+0x52>
 8004b2e:	f104 0a19 	add.w	sl, r4, #25
 8004b32:	68e3      	ldr	r3, [r4, #12]
 8004b34:	f8d9 2000 	ldr.w	r2, [r9]
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	42ab      	cmp	r3, r5
 8004b3c:	dc28      	bgt.n	8004b90 <_printf_common+0xa4>
 8004b3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	3300      	adds	r3, #0
 8004b46:	bf18      	it	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	0692      	lsls	r2, r2, #26
 8004b4c:	d42d      	bmi.n	8004baa <_printf_common+0xbe>
 8004b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b52:	4639      	mov	r1, r7
 8004b54:	4630      	mov	r0, r6
 8004b56:	47c0      	blx	r8
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d020      	beq.n	8004b9e <_printf_common+0xb2>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	68e5      	ldr	r5, [r4, #12]
 8004b60:	f8d9 2000 	ldr.w	r2, [r9]
 8004b64:	f003 0306 	and.w	r3, r3, #6
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	bf08      	it	eq
 8004b6c:	1aad      	subeq	r5, r5, r2
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	6922      	ldr	r2, [r4, #16]
 8004b72:	bf0c      	ite	eq
 8004b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b78:	2500      	movne	r5, #0
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	bfc4      	itt	gt
 8004b7e:	1a9b      	subgt	r3, r3, r2
 8004b80:	18ed      	addgt	r5, r5, r3
 8004b82:	f04f 0900 	mov.w	r9, #0
 8004b86:	341a      	adds	r4, #26
 8004b88:	454d      	cmp	r5, r9
 8004b8a:	d11a      	bne.n	8004bc2 <_printf_common+0xd6>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	e008      	b.n	8004ba2 <_printf_common+0xb6>
 8004b90:	2301      	movs	r3, #1
 8004b92:	4652      	mov	r2, sl
 8004b94:	4639      	mov	r1, r7
 8004b96:	4630      	mov	r0, r6
 8004b98:	47c0      	blx	r8
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d103      	bne.n	8004ba6 <_printf_common+0xba>
 8004b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	e7c3      	b.n	8004b32 <_printf_common+0x46>
 8004baa:	18e1      	adds	r1, r4, r3
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	2030      	movs	r0, #48	; 0x30
 8004bb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bb4:	4422      	add	r2, r4
 8004bb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	e7c5      	b.n	8004b4e <_printf_common+0x62>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	4639      	mov	r1, r7
 8004bc8:	4630      	mov	r0, r6
 8004bca:	47c0      	blx	r8
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d0e6      	beq.n	8004b9e <_printf_common+0xb2>
 8004bd0:	f109 0901 	add.w	r9, r9, #1
 8004bd4:	e7d8      	b.n	8004b88 <_printf_common+0x9c>
	...

08004bd8 <_printf_i>:
 8004bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004be0:	460c      	mov	r4, r1
 8004be2:	7e09      	ldrb	r1, [r1, #24]
 8004be4:	b085      	sub	sp, #20
 8004be6:	296e      	cmp	r1, #110	; 0x6e
 8004be8:	4617      	mov	r7, r2
 8004bea:	4606      	mov	r6, r0
 8004bec:	4698      	mov	r8, r3
 8004bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bf0:	f000 80b3 	beq.w	8004d5a <_printf_i+0x182>
 8004bf4:	d822      	bhi.n	8004c3c <_printf_i+0x64>
 8004bf6:	2963      	cmp	r1, #99	; 0x63
 8004bf8:	d036      	beq.n	8004c68 <_printf_i+0x90>
 8004bfa:	d80a      	bhi.n	8004c12 <_printf_i+0x3a>
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	f000 80b9 	beq.w	8004d74 <_printf_i+0x19c>
 8004c02:	2958      	cmp	r1, #88	; 0x58
 8004c04:	f000 8083 	beq.w	8004d0e <_printf_i+0x136>
 8004c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c10:	e032      	b.n	8004c78 <_printf_i+0xa0>
 8004c12:	2964      	cmp	r1, #100	; 0x64
 8004c14:	d001      	beq.n	8004c1a <_printf_i+0x42>
 8004c16:	2969      	cmp	r1, #105	; 0x69
 8004c18:	d1f6      	bne.n	8004c08 <_printf_i+0x30>
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	6813      	ldr	r3, [r2, #0]
 8004c1e:	0605      	lsls	r5, r0, #24
 8004c20:	f103 0104 	add.w	r1, r3, #4
 8004c24:	d52a      	bpl.n	8004c7c <_printf_i+0xa4>
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	da03      	bge.n	8004c36 <_printf_i+0x5e>
 8004c2e:	222d      	movs	r2, #45	; 0x2d
 8004c30:	425b      	negs	r3, r3
 8004c32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c36:	486f      	ldr	r0, [pc, #444]	; (8004df4 <_printf_i+0x21c>)
 8004c38:	220a      	movs	r2, #10
 8004c3a:	e039      	b.n	8004cb0 <_printf_i+0xd8>
 8004c3c:	2973      	cmp	r1, #115	; 0x73
 8004c3e:	f000 809d 	beq.w	8004d7c <_printf_i+0x1a4>
 8004c42:	d808      	bhi.n	8004c56 <_printf_i+0x7e>
 8004c44:	296f      	cmp	r1, #111	; 0x6f
 8004c46:	d020      	beq.n	8004c8a <_printf_i+0xb2>
 8004c48:	2970      	cmp	r1, #112	; 0x70
 8004c4a:	d1dd      	bne.n	8004c08 <_printf_i+0x30>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	f043 0320 	orr.w	r3, r3, #32
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	e003      	b.n	8004c5e <_printf_i+0x86>
 8004c56:	2975      	cmp	r1, #117	; 0x75
 8004c58:	d017      	beq.n	8004c8a <_printf_i+0xb2>
 8004c5a:	2978      	cmp	r1, #120	; 0x78
 8004c5c:	d1d4      	bne.n	8004c08 <_printf_i+0x30>
 8004c5e:	2378      	movs	r3, #120	; 0x78
 8004c60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c64:	4864      	ldr	r0, [pc, #400]	; (8004df8 <_printf_i+0x220>)
 8004c66:	e055      	b.n	8004d14 <_printf_i+0x13c>
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	1d19      	adds	r1, r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6011      	str	r1, [r2, #0]
 8004c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e08c      	b.n	8004d96 <_printf_i+0x1be>
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6011      	str	r1, [r2, #0]
 8004c80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c84:	bf18      	it	ne
 8004c86:	b21b      	sxthne	r3, r3
 8004c88:	e7cf      	b.n	8004c2a <_printf_i+0x52>
 8004c8a:	6813      	ldr	r3, [r2, #0]
 8004c8c:	6825      	ldr	r5, [r4, #0]
 8004c8e:	1d18      	adds	r0, r3, #4
 8004c90:	6010      	str	r0, [r2, #0]
 8004c92:	0628      	lsls	r0, r5, #24
 8004c94:	d501      	bpl.n	8004c9a <_printf_i+0xc2>
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	e002      	b.n	8004ca0 <_printf_i+0xc8>
 8004c9a:	0668      	lsls	r0, r5, #25
 8004c9c:	d5fb      	bpl.n	8004c96 <_printf_i+0xbe>
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	4854      	ldr	r0, [pc, #336]	; (8004df4 <_printf_i+0x21c>)
 8004ca2:	296f      	cmp	r1, #111	; 0x6f
 8004ca4:	bf14      	ite	ne
 8004ca6:	220a      	movne	r2, #10
 8004ca8:	2208      	moveq	r2, #8
 8004caa:	2100      	movs	r1, #0
 8004cac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cb0:	6865      	ldr	r5, [r4, #4]
 8004cb2:	60a5      	str	r5, [r4, #8]
 8004cb4:	2d00      	cmp	r5, #0
 8004cb6:	f2c0 8095 	blt.w	8004de4 <_printf_i+0x20c>
 8004cba:	6821      	ldr	r1, [r4, #0]
 8004cbc:	f021 0104 	bic.w	r1, r1, #4
 8004cc0:	6021      	str	r1, [r4, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d13d      	bne.n	8004d42 <_printf_i+0x16a>
 8004cc6:	2d00      	cmp	r5, #0
 8004cc8:	f040 808e 	bne.w	8004de8 <_printf_i+0x210>
 8004ccc:	4665      	mov	r5, ip
 8004cce:	2a08      	cmp	r2, #8
 8004cd0:	d10b      	bne.n	8004cea <_printf_i+0x112>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	07db      	lsls	r3, r3, #31
 8004cd6:	d508      	bpl.n	8004cea <_printf_i+0x112>
 8004cd8:	6923      	ldr	r3, [r4, #16]
 8004cda:	6862      	ldr	r2, [r4, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	bfde      	ittt	le
 8004ce0:	2330      	movle	r3, #48	; 0x30
 8004ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ce6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004cea:	ebac 0305 	sub.w	r3, ip, r5
 8004cee:	6123      	str	r3, [r4, #16]
 8004cf0:	f8cd 8000 	str.w	r8, [sp]
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	aa03      	add	r2, sp, #12
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7ff fef6 	bl	8004aec <_printf_common>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d14d      	bne.n	8004da0 <_printf_i+0x1c8>
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d08:	b005      	add	sp, #20
 8004d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d0e:	4839      	ldr	r0, [pc, #228]	; (8004df4 <_printf_i+0x21c>)
 8004d10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d14:	6813      	ldr	r3, [r2, #0]
 8004d16:	6821      	ldr	r1, [r4, #0]
 8004d18:	1d1d      	adds	r5, r3, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6015      	str	r5, [r2, #0]
 8004d1e:	060a      	lsls	r2, r1, #24
 8004d20:	d50b      	bpl.n	8004d3a <_printf_i+0x162>
 8004d22:	07ca      	lsls	r2, r1, #31
 8004d24:	bf44      	itt	mi
 8004d26:	f041 0120 	orrmi.w	r1, r1, #32
 8004d2a:	6021      	strmi	r1, [r4, #0]
 8004d2c:	b91b      	cbnz	r3, 8004d36 <_printf_i+0x15e>
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	f022 0220 	bic.w	r2, r2, #32
 8004d34:	6022      	str	r2, [r4, #0]
 8004d36:	2210      	movs	r2, #16
 8004d38:	e7b7      	b.n	8004caa <_printf_i+0xd2>
 8004d3a:	064d      	lsls	r5, r1, #25
 8004d3c:	bf48      	it	mi
 8004d3e:	b29b      	uxthmi	r3, r3
 8004d40:	e7ef      	b.n	8004d22 <_printf_i+0x14a>
 8004d42:	4665      	mov	r5, ip
 8004d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d48:	fb02 3311 	mls	r3, r2, r1, r3
 8004d4c:	5cc3      	ldrb	r3, [r0, r3]
 8004d4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d52:	460b      	mov	r3, r1
 8004d54:	2900      	cmp	r1, #0
 8004d56:	d1f5      	bne.n	8004d44 <_printf_i+0x16c>
 8004d58:	e7b9      	b.n	8004cce <_printf_i+0xf6>
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	6825      	ldr	r5, [r4, #0]
 8004d5e:	6961      	ldr	r1, [r4, #20]
 8004d60:	1d18      	adds	r0, r3, #4
 8004d62:	6010      	str	r0, [r2, #0]
 8004d64:	0628      	lsls	r0, r5, #24
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	d501      	bpl.n	8004d6e <_printf_i+0x196>
 8004d6a:	6019      	str	r1, [r3, #0]
 8004d6c:	e002      	b.n	8004d74 <_printf_i+0x19c>
 8004d6e:	066a      	lsls	r2, r5, #25
 8004d70:	d5fb      	bpl.n	8004d6a <_printf_i+0x192>
 8004d72:	8019      	strh	r1, [r3, #0]
 8004d74:	2300      	movs	r3, #0
 8004d76:	6123      	str	r3, [r4, #16]
 8004d78:	4665      	mov	r5, ip
 8004d7a:	e7b9      	b.n	8004cf0 <_printf_i+0x118>
 8004d7c:	6813      	ldr	r3, [r2, #0]
 8004d7e:	1d19      	adds	r1, r3, #4
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	681d      	ldr	r5, [r3, #0]
 8004d84:	6862      	ldr	r2, [r4, #4]
 8004d86:	2100      	movs	r1, #0
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f7fb fa21 	bl	80001d0 <memchr>
 8004d8e:	b108      	cbz	r0, 8004d94 <_printf_i+0x1bc>
 8004d90:	1b40      	subs	r0, r0, r5
 8004d92:	6060      	str	r0, [r4, #4]
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	6123      	str	r3, [r4, #16]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9e:	e7a7      	b.n	8004cf0 <_printf_i+0x118>
 8004da0:	6923      	ldr	r3, [r4, #16]
 8004da2:	462a      	mov	r2, r5
 8004da4:	4639      	mov	r1, r7
 8004da6:	4630      	mov	r0, r6
 8004da8:	47c0      	blx	r8
 8004daa:	3001      	adds	r0, #1
 8004dac:	d0aa      	beq.n	8004d04 <_printf_i+0x12c>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	079b      	lsls	r3, r3, #30
 8004db2:	d413      	bmi.n	8004ddc <_printf_i+0x204>
 8004db4:	68e0      	ldr	r0, [r4, #12]
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	4298      	cmp	r0, r3
 8004dba:	bfb8      	it	lt
 8004dbc:	4618      	movlt	r0, r3
 8004dbe:	e7a3      	b.n	8004d08 <_printf_i+0x130>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	464a      	mov	r2, r9
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	47c0      	blx	r8
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d09a      	beq.n	8004d04 <_printf_i+0x12c>
 8004dce:	3501      	adds	r5, #1
 8004dd0:	68e3      	ldr	r3, [r4, #12]
 8004dd2:	9a03      	ldr	r2, [sp, #12]
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	42ab      	cmp	r3, r5
 8004dd8:	dcf2      	bgt.n	8004dc0 <_printf_i+0x1e8>
 8004dda:	e7eb      	b.n	8004db4 <_printf_i+0x1dc>
 8004ddc:	2500      	movs	r5, #0
 8004dde:	f104 0919 	add.w	r9, r4, #25
 8004de2:	e7f5      	b.n	8004dd0 <_printf_i+0x1f8>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1ac      	bne.n	8004d42 <_printf_i+0x16a>
 8004de8:	7803      	ldrb	r3, [r0, #0]
 8004dea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df2:	e76c      	b.n	8004cce <_printf_i+0xf6>
 8004df4:	08005705 	.word	0x08005705
 8004df8:	08005716 	.word	0x08005716

08004dfc <_sbrk_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4c06      	ldr	r4, [pc, #24]	; (8004e18 <_sbrk_r+0x1c>)
 8004e00:	2300      	movs	r3, #0
 8004e02:	4605      	mov	r5, r0
 8004e04:	4608      	mov	r0, r1
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	f7fb ff82 	bl	8000d10 <_sbrk>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d102      	bne.n	8004e16 <_sbrk_r+0x1a>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	b103      	cbz	r3, 8004e16 <_sbrk_r+0x1a>
 8004e14:	602b      	str	r3, [r5, #0]
 8004e16:	bd38      	pop	{r3, r4, r5, pc}
 8004e18:	200005e4 	.word	0x200005e4

08004e1c <__swbuf_r>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	460e      	mov	r6, r1
 8004e20:	4614      	mov	r4, r2
 8004e22:	4605      	mov	r5, r0
 8004e24:	b118      	cbz	r0, 8004e2e <__swbuf_r+0x12>
 8004e26:	6983      	ldr	r3, [r0, #24]
 8004e28:	b90b      	cbnz	r3, 8004e2e <__swbuf_r+0x12>
 8004e2a:	f000 f9af 	bl	800518c <__sinit>
 8004e2e:	4b21      	ldr	r3, [pc, #132]	; (8004eb4 <__swbuf_r+0x98>)
 8004e30:	429c      	cmp	r4, r3
 8004e32:	d12a      	bne.n	8004e8a <__swbuf_r+0x6e>
 8004e34:	686c      	ldr	r4, [r5, #4]
 8004e36:	69a3      	ldr	r3, [r4, #24]
 8004e38:	60a3      	str	r3, [r4, #8]
 8004e3a:	89a3      	ldrh	r3, [r4, #12]
 8004e3c:	071a      	lsls	r2, r3, #28
 8004e3e:	d52e      	bpl.n	8004e9e <__swbuf_r+0x82>
 8004e40:	6923      	ldr	r3, [r4, #16]
 8004e42:	b363      	cbz	r3, 8004e9e <__swbuf_r+0x82>
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	6820      	ldr	r0, [r4, #0]
 8004e48:	1ac0      	subs	r0, r0, r3
 8004e4a:	6963      	ldr	r3, [r4, #20]
 8004e4c:	b2f6      	uxtb	r6, r6
 8004e4e:	4283      	cmp	r3, r0
 8004e50:	4637      	mov	r7, r6
 8004e52:	dc04      	bgt.n	8004e5e <__swbuf_r+0x42>
 8004e54:	4621      	mov	r1, r4
 8004e56:	4628      	mov	r0, r5
 8004e58:	f000 f92e 	bl	80050b8 <_fflush_r>
 8004e5c:	bb28      	cbnz	r0, 8004eaa <__swbuf_r+0x8e>
 8004e5e:	68a3      	ldr	r3, [r4, #8]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	60a3      	str	r3, [r4, #8]
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	6022      	str	r2, [r4, #0]
 8004e6a:	701e      	strb	r6, [r3, #0]
 8004e6c:	6963      	ldr	r3, [r4, #20]
 8004e6e:	3001      	adds	r0, #1
 8004e70:	4283      	cmp	r3, r0
 8004e72:	d004      	beq.n	8004e7e <__swbuf_r+0x62>
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	07db      	lsls	r3, r3, #31
 8004e78:	d519      	bpl.n	8004eae <__swbuf_r+0x92>
 8004e7a:	2e0a      	cmp	r6, #10
 8004e7c:	d117      	bne.n	8004eae <__swbuf_r+0x92>
 8004e7e:	4621      	mov	r1, r4
 8004e80:	4628      	mov	r0, r5
 8004e82:	f000 f919 	bl	80050b8 <_fflush_r>
 8004e86:	b190      	cbz	r0, 8004eae <__swbuf_r+0x92>
 8004e88:	e00f      	b.n	8004eaa <__swbuf_r+0x8e>
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <__swbuf_r+0x9c>)
 8004e8c:	429c      	cmp	r4, r3
 8004e8e:	d101      	bne.n	8004e94 <__swbuf_r+0x78>
 8004e90:	68ac      	ldr	r4, [r5, #8]
 8004e92:	e7d0      	b.n	8004e36 <__swbuf_r+0x1a>
 8004e94:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <__swbuf_r+0xa0>)
 8004e96:	429c      	cmp	r4, r3
 8004e98:	bf08      	it	eq
 8004e9a:	68ec      	ldreq	r4, [r5, #12]
 8004e9c:	e7cb      	b.n	8004e36 <__swbuf_r+0x1a>
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f000 f80d 	bl	8004ec0 <__swsetup_r>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d0cc      	beq.n	8004e44 <__swbuf_r+0x28>
 8004eaa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004eae:	4638      	mov	r0, r7
 8004eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	08005748 	.word	0x08005748
 8004eb8:	08005768 	.word	0x08005768
 8004ebc:	08005728 	.word	0x08005728

08004ec0 <__swsetup_r>:
 8004ec0:	4b32      	ldr	r3, [pc, #200]	; (8004f8c <__swsetup_r+0xcc>)
 8004ec2:	b570      	push	{r4, r5, r6, lr}
 8004ec4:	681d      	ldr	r5, [r3, #0]
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	460c      	mov	r4, r1
 8004eca:	b125      	cbz	r5, 8004ed6 <__swsetup_r+0x16>
 8004ecc:	69ab      	ldr	r3, [r5, #24]
 8004ece:	b913      	cbnz	r3, 8004ed6 <__swsetup_r+0x16>
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 f95b 	bl	800518c <__sinit>
 8004ed6:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <__swsetup_r+0xd0>)
 8004ed8:	429c      	cmp	r4, r3
 8004eda:	d10f      	bne.n	8004efc <__swsetup_r+0x3c>
 8004edc:	686c      	ldr	r4, [r5, #4]
 8004ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	0715      	lsls	r5, r2, #28
 8004ee6:	d42c      	bmi.n	8004f42 <__swsetup_r+0x82>
 8004ee8:	06d0      	lsls	r0, r2, #27
 8004eea:	d411      	bmi.n	8004f10 <__swsetup_r+0x50>
 8004eec:	2209      	movs	r2, #9
 8004eee:	6032      	str	r2, [r6, #0]
 8004ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004efa:	e03e      	b.n	8004f7a <__swsetup_r+0xba>
 8004efc:	4b25      	ldr	r3, [pc, #148]	; (8004f94 <__swsetup_r+0xd4>)
 8004efe:	429c      	cmp	r4, r3
 8004f00:	d101      	bne.n	8004f06 <__swsetup_r+0x46>
 8004f02:	68ac      	ldr	r4, [r5, #8]
 8004f04:	e7eb      	b.n	8004ede <__swsetup_r+0x1e>
 8004f06:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <__swsetup_r+0xd8>)
 8004f08:	429c      	cmp	r4, r3
 8004f0a:	bf08      	it	eq
 8004f0c:	68ec      	ldreq	r4, [r5, #12]
 8004f0e:	e7e6      	b.n	8004ede <__swsetup_r+0x1e>
 8004f10:	0751      	lsls	r1, r2, #29
 8004f12:	d512      	bpl.n	8004f3a <__swsetup_r+0x7a>
 8004f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f16:	b141      	cbz	r1, 8004f2a <__swsetup_r+0x6a>
 8004f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f1c:	4299      	cmp	r1, r3
 8004f1e:	d002      	beq.n	8004f26 <__swsetup_r+0x66>
 8004f20:	4630      	mov	r0, r6
 8004f22:	f7ff fbfb 	bl	800471c <_free_r>
 8004f26:	2300      	movs	r3, #0
 8004f28:	6363      	str	r3, [r4, #52]	; 0x34
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f30:	81a3      	strh	r3, [r4, #12]
 8004f32:	2300      	movs	r3, #0
 8004f34:	6063      	str	r3, [r4, #4]
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	89a3      	ldrh	r3, [r4, #12]
 8004f3c:	f043 0308 	orr.w	r3, r3, #8
 8004f40:	81a3      	strh	r3, [r4, #12]
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	b94b      	cbnz	r3, 8004f5a <__swsetup_r+0x9a>
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f50:	d003      	beq.n	8004f5a <__swsetup_r+0x9a>
 8004f52:	4621      	mov	r1, r4
 8004f54:	4630      	mov	r0, r6
 8004f56:	f000 f9c7 	bl	80052e8 <__smakebuf_r>
 8004f5a:	89a2      	ldrh	r2, [r4, #12]
 8004f5c:	f012 0301 	ands.w	r3, r2, #1
 8004f60:	d00c      	beq.n	8004f7c <__swsetup_r+0xbc>
 8004f62:	2300      	movs	r3, #0
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	6963      	ldr	r3, [r4, #20]
 8004f68:	425b      	negs	r3, r3
 8004f6a:	61a3      	str	r3, [r4, #24]
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	b953      	cbnz	r3, 8004f86 <__swsetup_r+0xc6>
 8004f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004f78:	d1ba      	bne.n	8004ef0 <__swsetup_r+0x30>
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	0792      	lsls	r2, r2, #30
 8004f7e:	bf58      	it	pl
 8004f80:	6963      	ldrpl	r3, [r4, #20]
 8004f82:	60a3      	str	r3, [r4, #8]
 8004f84:	e7f2      	b.n	8004f6c <__swsetup_r+0xac>
 8004f86:	2000      	movs	r0, #0
 8004f88:	e7f7      	b.n	8004f7a <__swsetup_r+0xba>
 8004f8a:	bf00      	nop
 8004f8c:	2000000c 	.word	0x2000000c
 8004f90:	08005748 	.word	0x08005748
 8004f94:	08005768 	.word	0x08005768
 8004f98:	08005728 	.word	0x08005728

08004f9c <abort>:
 8004f9c:	b508      	push	{r3, lr}
 8004f9e:	2006      	movs	r0, #6
 8004fa0:	f000 fa0c 	bl	80053bc <raise>
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7fb fe3b 	bl	8000c20 <_exit>
	...

08004fac <__sflush_r>:
 8004fac:	898a      	ldrh	r2, [r1, #12]
 8004fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	0710      	lsls	r0, r2, #28
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	d458      	bmi.n	800506c <__sflush_r+0xc0>
 8004fba:	684b      	ldr	r3, [r1, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dc05      	bgt.n	8004fcc <__sflush_r+0x20>
 8004fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dc02      	bgt.n	8004fcc <__sflush_r+0x20>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fce:	2e00      	cmp	r6, #0
 8004fd0:	d0f9      	beq.n	8004fc6 <__sflush_r+0x1a>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fd8:	682f      	ldr	r7, [r5, #0]
 8004fda:	6a21      	ldr	r1, [r4, #32]
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	d032      	beq.n	8005046 <__sflush_r+0x9a>
 8004fe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fe2:	89a3      	ldrh	r3, [r4, #12]
 8004fe4:	075a      	lsls	r2, r3, #29
 8004fe6:	d505      	bpl.n	8004ff4 <__sflush_r+0x48>
 8004fe8:	6863      	ldr	r3, [r4, #4]
 8004fea:	1ac0      	subs	r0, r0, r3
 8004fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fee:	b10b      	cbz	r3, 8004ff4 <__sflush_r+0x48>
 8004ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ff2:	1ac0      	subs	r0, r0, r3
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ffa:	6a21      	ldr	r1, [r4, #32]
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b0      	blx	r6
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	d106      	bne.n	8005014 <__sflush_r+0x68>
 8005006:	6829      	ldr	r1, [r5, #0]
 8005008:	291d      	cmp	r1, #29
 800500a:	d848      	bhi.n	800509e <__sflush_r+0xf2>
 800500c:	4a29      	ldr	r2, [pc, #164]	; (80050b4 <__sflush_r+0x108>)
 800500e:	40ca      	lsrs	r2, r1
 8005010:	07d6      	lsls	r6, r2, #31
 8005012:	d544      	bpl.n	800509e <__sflush_r+0xf2>
 8005014:	2200      	movs	r2, #0
 8005016:	6062      	str	r2, [r4, #4]
 8005018:	04d9      	lsls	r1, r3, #19
 800501a:	6922      	ldr	r2, [r4, #16]
 800501c:	6022      	str	r2, [r4, #0]
 800501e:	d504      	bpl.n	800502a <__sflush_r+0x7e>
 8005020:	1c42      	adds	r2, r0, #1
 8005022:	d101      	bne.n	8005028 <__sflush_r+0x7c>
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	b903      	cbnz	r3, 800502a <__sflush_r+0x7e>
 8005028:	6560      	str	r0, [r4, #84]	; 0x54
 800502a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800502c:	602f      	str	r7, [r5, #0]
 800502e:	2900      	cmp	r1, #0
 8005030:	d0c9      	beq.n	8004fc6 <__sflush_r+0x1a>
 8005032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005036:	4299      	cmp	r1, r3
 8005038:	d002      	beq.n	8005040 <__sflush_r+0x94>
 800503a:	4628      	mov	r0, r5
 800503c:	f7ff fb6e 	bl	800471c <_free_r>
 8005040:	2000      	movs	r0, #0
 8005042:	6360      	str	r0, [r4, #52]	; 0x34
 8005044:	e7c0      	b.n	8004fc8 <__sflush_r+0x1c>
 8005046:	2301      	movs	r3, #1
 8005048:	4628      	mov	r0, r5
 800504a:	47b0      	blx	r6
 800504c:	1c41      	adds	r1, r0, #1
 800504e:	d1c8      	bne.n	8004fe2 <__sflush_r+0x36>
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0c5      	beq.n	8004fe2 <__sflush_r+0x36>
 8005056:	2b1d      	cmp	r3, #29
 8005058:	d001      	beq.n	800505e <__sflush_r+0xb2>
 800505a:	2b16      	cmp	r3, #22
 800505c:	d101      	bne.n	8005062 <__sflush_r+0xb6>
 800505e:	602f      	str	r7, [r5, #0]
 8005060:	e7b1      	b.n	8004fc6 <__sflush_r+0x1a>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005068:	81a3      	strh	r3, [r4, #12]
 800506a:	e7ad      	b.n	8004fc8 <__sflush_r+0x1c>
 800506c:	690f      	ldr	r7, [r1, #16]
 800506e:	2f00      	cmp	r7, #0
 8005070:	d0a9      	beq.n	8004fc6 <__sflush_r+0x1a>
 8005072:	0793      	lsls	r3, r2, #30
 8005074:	680e      	ldr	r6, [r1, #0]
 8005076:	bf08      	it	eq
 8005078:	694b      	ldreq	r3, [r1, #20]
 800507a:	600f      	str	r7, [r1, #0]
 800507c:	bf18      	it	ne
 800507e:	2300      	movne	r3, #0
 8005080:	eba6 0807 	sub.w	r8, r6, r7
 8005084:	608b      	str	r3, [r1, #8]
 8005086:	f1b8 0f00 	cmp.w	r8, #0
 800508a:	dd9c      	ble.n	8004fc6 <__sflush_r+0x1a>
 800508c:	4643      	mov	r3, r8
 800508e:	463a      	mov	r2, r7
 8005090:	6a21      	ldr	r1, [r4, #32]
 8005092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005094:	4628      	mov	r0, r5
 8005096:	47b0      	blx	r6
 8005098:	2800      	cmp	r0, #0
 800509a:	dc06      	bgt.n	80050aa <__sflush_r+0xfe>
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a2:	81a3      	strh	r3, [r4, #12]
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a8:	e78e      	b.n	8004fc8 <__sflush_r+0x1c>
 80050aa:	4407      	add	r7, r0
 80050ac:	eba8 0800 	sub.w	r8, r8, r0
 80050b0:	e7e9      	b.n	8005086 <__sflush_r+0xda>
 80050b2:	bf00      	nop
 80050b4:	20400001 	.word	0x20400001

080050b8 <_fflush_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	690b      	ldr	r3, [r1, #16]
 80050bc:	4605      	mov	r5, r0
 80050be:	460c      	mov	r4, r1
 80050c0:	b1db      	cbz	r3, 80050fa <_fflush_r+0x42>
 80050c2:	b118      	cbz	r0, 80050cc <_fflush_r+0x14>
 80050c4:	6983      	ldr	r3, [r0, #24]
 80050c6:	b90b      	cbnz	r3, 80050cc <_fflush_r+0x14>
 80050c8:	f000 f860 	bl	800518c <__sinit>
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <_fflush_r+0x48>)
 80050ce:	429c      	cmp	r4, r3
 80050d0:	d109      	bne.n	80050e6 <_fflush_r+0x2e>
 80050d2:	686c      	ldr	r4, [r5, #4]
 80050d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d8:	b17b      	cbz	r3, 80050fa <_fflush_r+0x42>
 80050da:	4621      	mov	r1, r4
 80050dc:	4628      	mov	r0, r5
 80050de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050e2:	f7ff bf63 	b.w	8004fac <__sflush_r>
 80050e6:	4b07      	ldr	r3, [pc, #28]	; (8005104 <_fflush_r+0x4c>)
 80050e8:	429c      	cmp	r4, r3
 80050ea:	d101      	bne.n	80050f0 <_fflush_r+0x38>
 80050ec:	68ac      	ldr	r4, [r5, #8]
 80050ee:	e7f1      	b.n	80050d4 <_fflush_r+0x1c>
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <_fflush_r+0x50>)
 80050f2:	429c      	cmp	r4, r3
 80050f4:	bf08      	it	eq
 80050f6:	68ec      	ldreq	r4, [r5, #12]
 80050f8:	e7ec      	b.n	80050d4 <_fflush_r+0x1c>
 80050fa:	2000      	movs	r0, #0
 80050fc:	bd38      	pop	{r3, r4, r5, pc}
 80050fe:	bf00      	nop
 8005100:	08005748 	.word	0x08005748
 8005104:	08005768 	.word	0x08005768
 8005108:	08005728 	.word	0x08005728

0800510c <std>:
 800510c:	2300      	movs	r3, #0
 800510e:	b510      	push	{r4, lr}
 8005110:	4604      	mov	r4, r0
 8005112:	e9c0 3300 	strd	r3, r3, [r0]
 8005116:	6083      	str	r3, [r0, #8]
 8005118:	8181      	strh	r1, [r0, #12]
 800511a:	6643      	str	r3, [r0, #100]	; 0x64
 800511c:	81c2      	strh	r2, [r0, #14]
 800511e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005122:	6183      	str	r3, [r0, #24]
 8005124:	4619      	mov	r1, r3
 8005126:	2208      	movs	r2, #8
 8005128:	305c      	adds	r0, #92	; 0x5c
 800512a:	f7ff faef 	bl	800470c <memset>
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <std+0x38>)
 8005130:	6263      	str	r3, [r4, #36]	; 0x24
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <std+0x3c>)
 8005134:	62a3      	str	r3, [r4, #40]	; 0x28
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <std+0x40>)
 8005138:	62e3      	str	r3, [r4, #44]	; 0x2c
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <std+0x44>)
 800513c:	6224      	str	r4, [r4, #32]
 800513e:	6323      	str	r3, [r4, #48]	; 0x30
 8005140:	bd10      	pop	{r4, pc}
 8005142:	bf00      	nop
 8005144:	080053f5 	.word	0x080053f5
 8005148:	08005417 	.word	0x08005417
 800514c:	0800544f 	.word	0x0800544f
 8005150:	08005473 	.word	0x08005473

08005154 <_cleanup_r>:
 8005154:	4901      	ldr	r1, [pc, #4]	; (800515c <_cleanup_r+0x8>)
 8005156:	f000 b885 	b.w	8005264 <_fwalk_reent>
 800515a:	bf00      	nop
 800515c:	080050b9 	.word	0x080050b9

08005160 <__sfmoreglue>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	1e4a      	subs	r2, r1, #1
 8005164:	2568      	movs	r5, #104	; 0x68
 8005166:	4355      	muls	r5, r2
 8005168:	460e      	mov	r6, r1
 800516a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800516e:	f7ff fb23 	bl	80047b8 <_malloc_r>
 8005172:	4604      	mov	r4, r0
 8005174:	b140      	cbz	r0, 8005188 <__sfmoreglue+0x28>
 8005176:	2100      	movs	r1, #0
 8005178:	e9c0 1600 	strd	r1, r6, [r0]
 800517c:	300c      	adds	r0, #12
 800517e:	60a0      	str	r0, [r4, #8]
 8005180:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005184:	f7ff fac2 	bl	800470c <memset>
 8005188:	4620      	mov	r0, r4
 800518a:	bd70      	pop	{r4, r5, r6, pc}

0800518c <__sinit>:
 800518c:	6983      	ldr	r3, [r0, #24]
 800518e:	b510      	push	{r4, lr}
 8005190:	4604      	mov	r4, r0
 8005192:	bb33      	cbnz	r3, 80051e2 <__sinit+0x56>
 8005194:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005198:	6503      	str	r3, [r0, #80]	; 0x50
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <__sinit+0x58>)
 800519c:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <__sinit+0x5c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6282      	str	r2, [r0, #40]	; 0x28
 80051a2:	4298      	cmp	r0, r3
 80051a4:	bf04      	itt	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	6183      	streq	r3, [r0, #24]
 80051aa:	f000 f81f 	bl	80051ec <__sfp>
 80051ae:	6060      	str	r0, [r4, #4]
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 f81b 	bl	80051ec <__sfp>
 80051b6:	60a0      	str	r0, [r4, #8]
 80051b8:	4620      	mov	r0, r4
 80051ba:	f000 f817 	bl	80051ec <__sfp>
 80051be:	2200      	movs	r2, #0
 80051c0:	60e0      	str	r0, [r4, #12]
 80051c2:	2104      	movs	r1, #4
 80051c4:	6860      	ldr	r0, [r4, #4]
 80051c6:	f7ff ffa1 	bl	800510c <std>
 80051ca:	2201      	movs	r2, #1
 80051cc:	2109      	movs	r1, #9
 80051ce:	68a0      	ldr	r0, [r4, #8]
 80051d0:	f7ff ff9c 	bl	800510c <std>
 80051d4:	2202      	movs	r2, #2
 80051d6:	2112      	movs	r1, #18
 80051d8:	68e0      	ldr	r0, [r4, #12]
 80051da:	f7ff ff97 	bl	800510c <std>
 80051de:	2301      	movs	r3, #1
 80051e0:	61a3      	str	r3, [r4, #24]
 80051e2:	bd10      	pop	{r4, pc}
 80051e4:	080056f0 	.word	0x080056f0
 80051e8:	08005155 	.word	0x08005155

080051ec <__sfp>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	4b1b      	ldr	r3, [pc, #108]	; (800525c <__sfp+0x70>)
 80051f0:	681e      	ldr	r6, [r3, #0]
 80051f2:	69b3      	ldr	r3, [r6, #24]
 80051f4:	4607      	mov	r7, r0
 80051f6:	b913      	cbnz	r3, 80051fe <__sfp+0x12>
 80051f8:	4630      	mov	r0, r6
 80051fa:	f7ff ffc7 	bl	800518c <__sinit>
 80051fe:	3648      	adds	r6, #72	; 0x48
 8005200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005204:	3b01      	subs	r3, #1
 8005206:	d503      	bpl.n	8005210 <__sfp+0x24>
 8005208:	6833      	ldr	r3, [r6, #0]
 800520a:	b133      	cbz	r3, 800521a <__sfp+0x2e>
 800520c:	6836      	ldr	r6, [r6, #0]
 800520e:	e7f7      	b.n	8005200 <__sfp+0x14>
 8005210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005214:	b16d      	cbz	r5, 8005232 <__sfp+0x46>
 8005216:	3468      	adds	r4, #104	; 0x68
 8005218:	e7f4      	b.n	8005204 <__sfp+0x18>
 800521a:	2104      	movs	r1, #4
 800521c:	4638      	mov	r0, r7
 800521e:	f7ff ff9f 	bl	8005160 <__sfmoreglue>
 8005222:	6030      	str	r0, [r6, #0]
 8005224:	2800      	cmp	r0, #0
 8005226:	d1f1      	bne.n	800520c <__sfp+0x20>
 8005228:	230c      	movs	r3, #12
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	4604      	mov	r4, r0
 800522e:	4620      	mov	r0, r4
 8005230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005232:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <__sfp+0x74>)
 8005234:	6665      	str	r5, [r4, #100]	; 0x64
 8005236:	e9c4 5500 	strd	r5, r5, [r4]
 800523a:	60a5      	str	r5, [r4, #8]
 800523c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005240:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005244:	2208      	movs	r2, #8
 8005246:	4629      	mov	r1, r5
 8005248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800524c:	f7ff fa5e 	bl	800470c <memset>
 8005250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005258:	e7e9      	b.n	800522e <__sfp+0x42>
 800525a:	bf00      	nop
 800525c:	080056f0 	.word	0x080056f0
 8005260:	ffff0001 	.word	0xffff0001

08005264 <_fwalk_reent>:
 8005264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005268:	4680      	mov	r8, r0
 800526a:	4689      	mov	r9, r1
 800526c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005270:	2600      	movs	r6, #0
 8005272:	b914      	cbnz	r4, 800527a <_fwalk_reent+0x16>
 8005274:	4630      	mov	r0, r6
 8005276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800527a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800527e:	3f01      	subs	r7, #1
 8005280:	d501      	bpl.n	8005286 <_fwalk_reent+0x22>
 8005282:	6824      	ldr	r4, [r4, #0]
 8005284:	e7f5      	b.n	8005272 <_fwalk_reent+0xe>
 8005286:	89ab      	ldrh	r3, [r5, #12]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d907      	bls.n	800529c <_fwalk_reent+0x38>
 800528c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005290:	3301      	adds	r3, #1
 8005292:	d003      	beq.n	800529c <_fwalk_reent+0x38>
 8005294:	4629      	mov	r1, r5
 8005296:	4640      	mov	r0, r8
 8005298:	47c8      	blx	r9
 800529a:	4306      	orrs	r6, r0
 800529c:	3568      	adds	r5, #104	; 0x68
 800529e:	e7ee      	b.n	800527e <_fwalk_reent+0x1a>

080052a0 <__swhatbuf_r>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	460e      	mov	r6, r1
 80052a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a8:	2900      	cmp	r1, #0
 80052aa:	b096      	sub	sp, #88	; 0x58
 80052ac:	4614      	mov	r4, r2
 80052ae:	461d      	mov	r5, r3
 80052b0:	da07      	bge.n	80052c2 <__swhatbuf_r+0x22>
 80052b2:	2300      	movs	r3, #0
 80052b4:	602b      	str	r3, [r5, #0]
 80052b6:	89b3      	ldrh	r3, [r6, #12]
 80052b8:	061a      	lsls	r2, r3, #24
 80052ba:	d410      	bmi.n	80052de <__swhatbuf_r+0x3e>
 80052bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c0:	e00e      	b.n	80052e0 <__swhatbuf_r+0x40>
 80052c2:	466a      	mov	r2, sp
 80052c4:	f000 f8fc 	bl	80054c0 <_fstat_r>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	dbf2      	blt.n	80052b2 <__swhatbuf_r+0x12>
 80052cc:	9a01      	ldr	r2, [sp, #4]
 80052ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052d6:	425a      	negs	r2, r3
 80052d8:	415a      	adcs	r2, r3
 80052da:	602a      	str	r2, [r5, #0]
 80052dc:	e7ee      	b.n	80052bc <__swhatbuf_r+0x1c>
 80052de:	2340      	movs	r3, #64	; 0x40
 80052e0:	2000      	movs	r0, #0
 80052e2:	6023      	str	r3, [r4, #0]
 80052e4:	b016      	add	sp, #88	; 0x58
 80052e6:	bd70      	pop	{r4, r5, r6, pc}

080052e8 <__smakebuf_r>:
 80052e8:	898b      	ldrh	r3, [r1, #12]
 80052ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052ec:	079d      	lsls	r5, r3, #30
 80052ee:	4606      	mov	r6, r0
 80052f0:	460c      	mov	r4, r1
 80052f2:	d507      	bpl.n	8005304 <__smakebuf_r+0x1c>
 80052f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	6123      	str	r3, [r4, #16]
 80052fc:	2301      	movs	r3, #1
 80052fe:	6163      	str	r3, [r4, #20]
 8005300:	b002      	add	sp, #8
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	ab01      	add	r3, sp, #4
 8005306:	466a      	mov	r2, sp
 8005308:	f7ff ffca 	bl	80052a0 <__swhatbuf_r>
 800530c:	9900      	ldr	r1, [sp, #0]
 800530e:	4605      	mov	r5, r0
 8005310:	4630      	mov	r0, r6
 8005312:	f7ff fa51 	bl	80047b8 <_malloc_r>
 8005316:	b948      	cbnz	r0, 800532c <__smakebuf_r+0x44>
 8005318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531c:	059a      	lsls	r2, r3, #22
 800531e:	d4ef      	bmi.n	8005300 <__smakebuf_r+0x18>
 8005320:	f023 0303 	bic.w	r3, r3, #3
 8005324:	f043 0302 	orr.w	r3, r3, #2
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	e7e3      	b.n	80052f4 <__smakebuf_r+0xc>
 800532c:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <__smakebuf_r+0x7c>)
 800532e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	6020      	str	r0, [r4, #0]
 8005334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	9b00      	ldr	r3, [sp, #0]
 800533c:	6163      	str	r3, [r4, #20]
 800533e:	9b01      	ldr	r3, [sp, #4]
 8005340:	6120      	str	r0, [r4, #16]
 8005342:	b15b      	cbz	r3, 800535c <__smakebuf_r+0x74>
 8005344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005348:	4630      	mov	r0, r6
 800534a:	f000 f8cb 	bl	80054e4 <_isatty_r>
 800534e:	b128      	cbz	r0, 800535c <__smakebuf_r+0x74>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	81a3      	strh	r3, [r4, #12]
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	431d      	orrs	r5, r3
 8005360:	81a5      	strh	r5, [r4, #12]
 8005362:	e7cd      	b.n	8005300 <__smakebuf_r+0x18>
 8005364:	08005155 	.word	0x08005155

08005368 <__malloc_lock>:
 8005368:	4770      	bx	lr

0800536a <__malloc_unlock>:
 800536a:	4770      	bx	lr

0800536c <_raise_r>:
 800536c:	291f      	cmp	r1, #31
 800536e:	b538      	push	{r3, r4, r5, lr}
 8005370:	4604      	mov	r4, r0
 8005372:	460d      	mov	r5, r1
 8005374:	d904      	bls.n	8005380 <_raise_r+0x14>
 8005376:	2316      	movs	r3, #22
 8005378:	6003      	str	r3, [r0, #0]
 800537a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005382:	b112      	cbz	r2, 800538a <_raise_r+0x1e>
 8005384:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005388:	b94b      	cbnz	r3, 800539e <_raise_r+0x32>
 800538a:	4620      	mov	r0, r4
 800538c:	f000 f830 	bl	80053f0 <_getpid_r>
 8005390:	462a      	mov	r2, r5
 8005392:	4601      	mov	r1, r0
 8005394:	4620      	mov	r0, r4
 8005396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800539a:	f000 b817 	b.w	80053cc <_kill_r>
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d00a      	beq.n	80053b8 <_raise_r+0x4c>
 80053a2:	1c59      	adds	r1, r3, #1
 80053a4:	d103      	bne.n	80053ae <_raise_r+0x42>
 80053a6:	2316      	movs	r3, #22
 80053a8:	6003      	str	r3, [r0, #0]
 80053aa:	2001      	movs	r0, #1
 80053ac:	e7e7      	b.n	800537e <_raise_r+0x12>
 80053ae:	2400      	movs	r4, #0
 80053b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80053b4:	4628      	mov	r0, r5
 80053b6:	4798      	blx	r3
 80053b8:	2000      	movs	r0, #0
 80053ba:	e7e0      	b.n	800537e <_raise_r+0x12>

080053bc <raise>:
 80053bc:	4b02      	ldr	r3, [pc, #8]	; (80053c8 <raise+0xc>)
 80053be:	4601      	mov	r1, r0
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	f7ff bfd3 	b.w	800536c <_raise_r>
 80053c6:	bf00      	nop
 80053c8:	2000000c 	.word	0x2000000c

080053cc <_kill_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4c07      	ldr	r4, [pc, #28]	; (80053ec <_kill_r+0x20>)
 80053d0:	2300      	movs	r3, #0
 80053d2:	4605      	mov	r5, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	f7fb fc11 	bl	8000c00 <_kill>
 80053de:	1c43      	adds	r3, r0, #1
 80053e0:	d102      	bne.n	80053e8 <_kill_r+0x1c>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	b103      	cbz	r3, 80053e8 <_kill_r+0x1c>
 80053e6:	602b      	str	r3, [r5, #0]
 80053e8:	bd38      	pop	{r3, r4, r5, pc}
 80053ea:	bf00      	nop
 80053ec:	200005e4 	.word	0x200005e4

080053f0 <_getpid_r>:
 80053f0:	f7fb bbfe 	b.w	8000bf0 <_getpid>

080053f4 <__sread>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	460c      	mov	r4, r1
 80053f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fc:	f000 f894 	bl	8005528 <_read_r>
 8005400:	2800      	cmp	r0, #0
 8005402:	bfab      	itete	ge
 8005404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005406:	89a3      	ldrhlt	r3, [r4, #12]
 8005408:	181b      	addge	r3, r3, r0
 800540a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800540e:	bfac      	ite	ge
 8005410:	6563      	strge	r3, [r4, #84]	; 0x54
 8005412:	81a3      	strhlt	r3, [r4, #12]
 8005414:	bd10      	pop	{r4, pc}

08005416 <__swrite>:
 8005416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541a:	461f      	mov	r7, r3
 800541c:	898b      	ldrh	r3, [r1, #12]
 800541e:	05db      	lsls	r3, r3, #23
 8005420:	4605      	mov	r5, r0
 8005422:	460c      	mov	r4, r1
 8005424:	4616      	mov	r6, r2
 8005426:	d505      	bpl.n	8005434 <__swrite+0x1e>
 8005428:	2302      	movs	r3, #2
 800542a:	2200      	movs	r2, #0
 800542c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005430:	f000 f868 	bl	8005504 <_lseek_r>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800543a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	4632      	mov	r2, r6
 8005442:	463b      	mov	r3, r7
 8005444:	4628      	mov	r0, r5
 8005446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800544a:	f000 b817 	b.w	800547c <_write_r>

0800544e <__sseek>:
 800544e:	b510      	push	{r4, lr}
 8005450:	460c      	mov	r4, r1
 8005452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005456:	f000 f855 	bl	8005504 <_lseek_r>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	bf15      	itete	ne
 8005460:	6560      	strne	r0, [r4, #84]	; 0x54
 8005462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800546a:	81a3      	strheq	r3, [r4, #12]
 800546c:	bf18      	it	ne
 800546e:	81a3      	strhne	r3, [r4, #12]
 8005470:	bd10      	pop	{r4, pc}

08005472 <__sclose>:
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 b813 	b.w	80054a0 <_close_r>
	...

0800547c <_write_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4c07      	ldr	r4, [pc, #28]	; (800549c <_write_r+0x20>)
 8005480:	4605      	mov	r5, r0
 8005482:	4608      	mov	r0, r1
 8005484:	4611      	mov	r1, r2
 8005486:	2200      	movs	r2, #0
 8005488:	6022      	str	r2, [r4, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	f7fb fbef 	bl	8000c6e <_write>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d102      	bne.n	800549a <_write_r+0x1e>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	b103      	cbz	r3, 800549a <_write_r+0x1e>
 8005498:	602b      	str	r3, [r5, #0]
 800549a:	bd38      	pop	{r3, r4, r5, pc}
 800549c:	200005e4 	.word	0x200005e4

080054a0 <_close_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4c06      	ldr	r4, [pc, #24]	; (80054bc <_close_r+0x1c>)
 80054a4:	2300      	movs	r3, #0
 80054a6:	4605      	mov	r5, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	6023      	str	r3, [r4, #0]
 80054ac:	f7fb fbfb 	bl	8000ca6 <_close>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_close_r+0x1a>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_close_r+0x1a>
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	200005e4 	.word	0x200005e4

080054c0 <_fstat_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4c07      	ldr	r4, [pc, #28]	; (80054e0 <_fstat_r+0x20>)
 80054c4:	2300      	movs	r3, #0
 80054c6:	4605      	mov	r5, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	4611      	mov	r1, r2
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	f7fb fbf6 	bl	8000cbe <_fstat>
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	d102      	bne.n	80054dc <_fstat_r+0x1c>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	b103      	cbz	r3, 80054dc <_fstat_r+0x1c>
 80054da:	602b      	str	r3, [r5, #0]
 80054dc:	bd38      	pop	{r3, r4, r5, pc}
 80054de:	bf00      	nop
 80054e0:	200005e4 	.word	0x200005e4

080054e4 <_isatty_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4c06      	ldr	r4, [pc, #24]	; (8005500 <_isatty_r+0x1c>)
 80054e8:	2300      	movs	r3, #0
 80054ea:	4605      	mov	r5, r0
 80054ec:	4608      	mov	r0, r1
 80054ee:	6023      	str	r3, [r4, #0]
 80054f0:	f7fb fbf5 	bl	8000cde <_isatty>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d102      	bne.n	80054fe <_isatty_r+0x1a>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	b103      	cbz	r3, 80054fe <_isatty_r+0x1a>
 80054fc:	602b      	str	r3, [r5, #0]
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	200005e4 	.word	0x200005e4

08005504 <_lseek_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4c07      	ldr	r4, [pc, #28]	; (8005524 <_lseek_r+0x20>)
 8005508:	4605      	mov	r5, r0
 800550a:	4608      	mov	r0, r1
 800550c:	4611      	mov	r1, r2
 800550e:	2200      	movs	r2, #0
 8005510:	6022      	str	r2, [r4, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	f7fb fbee 	bl	8000cf4 <_lseek>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_lseek_r+0x1e>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	b103      	cbz	r3, 8005522 <_lseek_r+0x1e>
 8005520:	602b      	str	r3, [r5, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	200005e4 	.word	0x200005e4

08005528 <_read_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4c07      	ldr	r4, [pc, #28]	; (8005548 <_read_r+0x20>)
 800552c:	4605      	mov	r5, r0
 800552e:	4608      	mov	r0, r1
 8005530:	4611      	mov	r1, r2
 8005532:	2200      	movs	r2, #0
 8005534:	6022      	str	r2, [r4, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	f7fb fb7c 	bl	8000c34 <_read>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d102      	bne.n	8005546 <_read_r+0x1e>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	b103      	cbz	r3, 8005546 <_read_r+0x1e>
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	bd38      	pop	{r3, r4, r5, pc}
 8005548:	200005e4 	.word	0x200005e4

0800554c <_init>:
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554e:	bf00      	nop
 8005550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005552:	bc08      	pop	{r3}
 8005554:	469e      	mov	lr, r3
 8005556:	4770      	bx	lr

08005558 <_fini>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr
